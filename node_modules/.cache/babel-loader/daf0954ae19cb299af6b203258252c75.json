{"ast":null,"code":"var _jsxFileName = \"/Users/berkakgun/Desktop/ttk/ttkui/src/components/AuthGuard.tsx\";\nimport React, { useState } from \"react\";\nimport { UserContext } from \"core/store/ContextApi/Context\";\nimport { Application } from \"core/db\";\nexport function AuthGuard(props) {\n  var _Application$currentU;\n\n  const [authState, setAuthState] = useState({\n    isLoggedIn: ((_Application$currentU = Application.currentUser) === null || _Application$currentU === void 0 ? void 0 : _Application$currentU.state) === \"active\",\n    currentUser: Application.currentUser\n  });\n\n  const handleLogout = () => {\n    var _Application$currentU2;\n\n    return (_Application$currentU2 = Application.currentUser) === null || _Application$currentU2 === void 0 ? void 0 : _Application$currentU2.logOut;\n  };\n\n  const authInfo = React.useMemo(() => {\n    const {\n      isLoggedIn,\n      currentUser\n    } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: {\n        handleLogout,\n        setAuthState\n      }\n    };\n    return value;\n  }, [authState]);\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: authInfo,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 5\n    }\n  }, props.children);\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/AuthGuard.tsx"],"names":["React","useState","UserContext","Application","AuthGuard","props","authState","setAuthState","isLoggedIn","currentUser","state","handleLogout","logOut","authInfo","useMemo","value","actions","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,QAA4B,SAA5B;AAEA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AAAA;;AACpC,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BN,QAAQ,CAAC;AACzCO,IAAAA,UAAU,EAAE,0BAAAL,WAAW,CAACM,WAAZ,gFAAyBC,KAAzB,MAAmC,QADN;AAEzCD,IAAAA,WAAW,EAAEN,WAAW,CAACM;AAFgB,GAAD,CAA1C;;AAKA,QAAME,YAAY,GAAG;AAAA;;AAAA,qCAAMR,WAAW,CAACM,WAAlB,2DAAM,uBAAyBG,MAA/B;AAAA,GAArB;;AACA,QAAMC,QAAQ,GAAGb,KAAK,CAACc,OAAN,CAAc,MAAM;AACnC,UAAM;AAAEN,MAAAA,UAAF;AAAcC,MAAAA;AAAd,QAA8BH,SAApC;AACA,UAAMS,KAAK,GAAG;AACZP,MAAAA,UADY;AAEZC,MAAAA,WAFY;AAGZO,MAAAA,OAAO,EAAE;AAAEL,QAAAA,YAAF;AAAgBJ,QAAAA;AAAhB;AAHG,KAAd;AAKA,WAAOQ,KAAP;AACD,GARgB,EAQd,CAACT,SAAD,CARc,CAAjB;AASA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEO,QAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGR,KAAK,CAACY,QADT,CADF;AAKD","sourcesContent":["import React, { useState } from \"react\";\nimport { UserContext } from \"core/store/ContextApi/Context\";\nimport { Application } from \"core/db\";\n\nexport function AuthGuard(props: any) {\n  const [authState, setAuthState] = useState({\n    isLoggedIn: Application.currentUser?.state === \"active\",\n    currentUser: Application.currentUser,\n  });\n\n  const handleLogout = () => Application.currentUser?.logOut;\n  const authInfo = React.useMemo(() => {\n    const { isLoggedIn, currentUser } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, setAuthState },\n    };\n    return value;\n  }, [authState]);\n  return (\n    <UserContext.Provider value={authInfo}>\n      {props.children}\n    </UserContext.Provider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}