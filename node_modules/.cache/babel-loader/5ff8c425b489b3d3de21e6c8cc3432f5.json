{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"]\n};\nexport function CreateDefaultUser(environment) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const [isLoading, setState] = useState(false);\n  const [user, setUser] = useState({});\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload)\n    }).then(res => res.json()).then(user => {\n      const {\n        responseContext,\n        errorResponses,\n        error\n      } = user;\n      setUser(responseContext[0]);\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email\n      } = model;\n\n      if (!error) {\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken\n        }));\n      }\n    }).finally(() => {\n      setState(false);\n    });\n    return user;\n  };\n\n  return [isLoading, loadUser]; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","user","setUser","loadUser","fetch","method","body","JSON","stringify","then","res","json","responseContext","errorResponses","error","accessToken","password","model","user_id","email","dispatch","finally"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,eAApC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,YADG;AAEdC,EAAAA,QAAQ,EAAE,CAAC,uBAAD,EAA0B,cAA1B;AAFI,CAAhB;AAKA,OAAO,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,GAA9C,CADqD,CACF;;AACnD,QAAMC,GAAG,GAAI,qBAAoBH,WAAY,UAA7C;AAEA,QAAM,CAACI,SAAD,EAAYC,QAAZ,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM,CAACa,IAAD,EAAOC,OAAP,IAAkBd,QAAQ,CAAC,EAAD,CAAhC;;AAEA,QAAMe,QAAQ,GAAG,MAAM;AACrBH,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAI,IAAAA,KAAK,CAACN,GAAD,EAAM;AACTO,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAejB,OAAf;AAFG,KAAN,CAAL,CAIGkB,IAJH,CAISC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJjB,EAKGF,IALH,CAKSR,IAAD,IAAU;AACd,YAAM;AAAEW,QAAAA,eAAF;AAAmBC,QAAAA,cAAnB;AAAmCC,QAAAA;AAAnC,UAA6Cb,IAAnD;AACAC,MAAAA,OAAO,CAACU,eAAe,CAAC,CAAD,CAAhB,CAAP;AACA,YAAM;AAAEG,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAmCL,eAAe,CAAC,CAAD,CAAxD;AACA,YAAM;AAAEM,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAqBF,KAA3B;;AACA,UAAI,CAACH,KAAL,EAAY;AACVzB,QAAAA,KAAK,CAAC+B,QAAN,CACE9B,mBAAmB,CAAC;AAAE4B,UAAAA,OAAF;AAAWC,UAAAA,KAAX;AAAkBH,UAAAA,QAAlB;AAA4BD,UAAAA;AAA5B,SAAD,CADrB;AAGD;AACF,KAfH,EAgBGM,OAhBH,CAgBW,MAAM;AACbrB,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAlBH;AAmBA,WAAOC,IAAP;AACD,GAtBD;;AAuBA,SAAO,CAACF,SAAD,EAAYI,QAAZ,CAAP,CA9BqD,CA8Bd;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n  const [user, setUser] = useState({});\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, errorResponses, error } = user;\n        setUser(responseContext[0]);\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({ user_id, email, password, accessToken })\n          );\n        }\n      })\n      .finally(() => {\n        setState(false);\n      });\n    return user;\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}