{"ast":null,"code":"/* import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nimport { db, client } from \"db/initDb\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"store/selectors\";\n\ninterface contextType {\n  jobDate?: string; // example \"2020-03-06 14:00\"\n  businessModel?: number;\n  serviceId?: number;\n  proBalance?: number;\n  quoteId?: number;\n  countryId?: number;\n}\n\ninterface jobContextType {\n  operation?: string;\n  commands?: Array<string | undefined>;\n  commandContext?: contextType;\n  proTestContext?: {};\n}\n\nconst payload: {\n  operation: string;\n  commands: Array<string>;\n  commandContext: contextType;\n  jobTestContext: jobContextType;\n} = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n  commandContext: {},\n  jobTestContext: {},\n};\n\nexport function CreateCustomUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const user = useSelector(getUserElements);\n  const [isLoading, setState] = useState(false);\n\n  const loadCustomUser = () => {\n    /* if (user.country) {\n      payload.commands.push(\"WITHCOUNTRYID\");\n      payload.commandContext[\"countryId\"] = user.country;\n    } */\n\n/*  if (user.job) {\n      payload.commands.push(\"WITHJOB\");\n      payload.jobTestContext = {\n        operation: \"CREATEJOB\",\n        commands: [\"WITHSERVICEID\"],\n        commandContext: {\n          serviceId: parseInt(user.service),\n        },\n      };\n      if (user.date) {\n        payload.jobTestContext.commands?.push(\"WITHJOBDATE\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n      }\n      if (user.deal === 1) {\n        payload.jobTestContext.commands?.push(\"WITHDEAL\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: [\"CREATEPRO\"],\n          commands: [\"WITHCREDITCARD\", \"WITHBALANCE\"],\n          commandContext: { proBalance: 10000 },\n        };\n      } else if (user.deal === 0) {\n        payload.jobTestContext.commands?.push(\"WITHQUOTES\");\n      }\n      console.log(payload);\n    }\n\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n            })\n          );\n          db.collection(\"test\")\n            .insertOne({\n              user_id: client.auth.user?.id,\n              id: user_id,\n              email,\n              password,\n              accessToken,\n              first_name,\n            })\n            .then((result) =>\n              console.log(\n                `Successfully inserted item with _id: ${result.insertedId}`\n              )\n            )\n            .catch((err) => console.error(`Failed to insert item: ${err}`));\n        }\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadCustomUser] as const;\n} * / */","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createCustomUser.tsx"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA","sourcesContent":["/* import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nimport { db, client } from \"db/initDb\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"store/selectors\";\n\ninterface contextType {\n  jobDate?: string; // example \"2020-03-06 14:00\"\n  businessModel?: number;\n  serviceId?: number;\n  proBalance?: number;\n  quoteId?: number;\n  countryId?: number;\n}\n\ninterface jobContextType {\n  operation?: string;\n  commands?: Array<string | undefined>;\n  commandContext?: contextType;\n  proTestContext?: {};\n}\n\nconst payload: {\n  operation: string;\n  commands: Array<string>;\n  commandContext: contextType;\n  jobTestContext: jobContextType;\n} = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n  commandContext: {},\n  jobTestContext: {},\n};\n\nexport function CreateCustomUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const user = useSelector(getUserElements);\n  const [isLoading, setState] = useState(false);\n\n  const loadCustomUser = () => {\n    /* if (user.country) {\n      payload.commands.push(\"WITHCOUNTRYID\");\n      payload.commandContext[\"countryId\"] = user.country;\n    } */\n/*  if (user.job) {\n      payload.commands.push(\"WITHJOB\");\n      payload.jobTestContext = {\n        operation: \"CREATEJOB\",\n        commands: [\"WITHSERVICEID\"],\n        commandContext: {\n          serviceId: parseInt(user.service),\n        },\n      };\n      if (user.date) {\n        payload.jobTestContext.commands?.push(\"WITHJOBDATE\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n      }\n      if (user.deal === 1) {\n        payload.jobTestContext.commands?.push(\"WITHDEAL\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: [\"CREATEPRO\"],\n          commands: [\"WITHCREDITCARD\", \"WITHBALANCE\"],\n          commandContext: { proBalance: 10000 },\n        };\n      } else if (user.deal === 0) {\n        payload.jobTestContext.commands?.push(\"WITHQUOTES\");\n      }\n      console.log(payload);\n    }\n\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n            })\n          );\n          db.collection(\"test\")\n            .insertOne({\n              user_id: client.auth.user?.id,\n              id: user_id,\n              email,\n              password,\n              accessToken,\n              first_name,\n            })\n            .then((result) =>\n              console.log(\n                `Successfully inserted item with _id: ${result.insertedId}`\n              )\n            )\n            .catch((err) => console.error(`Failed to insert item: ${err}`));\n        }\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadCustomUser] as const;\n} * / */\n"]},"metadata":{},"sourceType":"module"}