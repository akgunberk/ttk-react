{"ast":null,"code":"var _jsxFileName = \"/Users/berkakgun/Desktop/ttk/ttkui/src/components/container/withClipboard.tsx\";\nimport React, { useState, useRef } from \"react\";\nimport { Popup, Button, Icon } from \"semantic-ui-react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst TriggerButton = ({\n  name,\n  copy,\n  popUp\n}) => {\n  const buttonRef = useRef(false);\n  return /*#__PURE__*/React.createElement(CopyToClipboard, {\n    text: copy,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Popup, {\n    triggerRef: buttonRef,\n    content: `Copied to clipboard.`,\n    pinned: true,\n    position: \"right center\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    ref: buttonRef.current.valueOf,\n    basic: true,\n    type: \"button\",\n    style: {\n      width: \"125px\"\n    },\n    animated: \"fade\",\n    size: \"medium\",\n    onClick: () => popUp(true),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Button.Content, {\n    visible: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 9\n    }\n  }, name), /*#__PURE__*/React.createElement(Button.Content, {\n    hidden: true,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }\n  }, \"Copy \", /*#__PURE__*/React.createElement(Icon, {\n    style: {\n      marginLeft: \"4px\"\n    },\n    name: \"clipboard\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 16\n    }\n  }))));\n};\n\nconst ClipBoardButton = ({\n  name,\n  copy\n}) => {\n  const [info, setInfo] = useState(false);\n  const ref = useRef(false);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      margin: \"5px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(TriggerButton, {\n    name: name,\n    copy: copy,\n    popUp: e => setInfo(e),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default ClipBoardButton;","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/container/withClipboard.tsx"],"names":["React","useState","useRef","Popup","Button","Icon","CopyToClipboard","TriggerButton","name","copy","popUp","buttonRef","current","valueOf","width","marginLeft","ClipBoardButton","info","setInfo","ref","margin","e"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,MAA1B,QAAwC,OAAxC;AACA,SAASC,KAAT,EAAgBC,MAAhB,EAAwBC,IAAxB,QAAoC,mBAApC;AACA,OAAOC,eAAP,MAA4B,yBAA5B;;AAEA,MAAMC,aAIJ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,IAAR;AAAcC,EAAAA;AAAd,CAAD,KAA2B;AAC9B,QAAMC,SAAS,GAAGT,MAAM,CAAC,KAAD,CAAxB;AACA,sBACE,oBAAC,eAAD;AAAiB,IAAA,IAAI,EAAEO,IAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AACE,IAAA,UAAU,EAAEE,SADd;AAEE,IAAA,OAAO,EAAG,sBAFZ;AAGE,IAAA,MAAM,MAHR;AAIE,IAAA,QAAQ,EAAC,cAJX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAOE,oBAAC,MAAD;AACE,IAAA,GAAG,EAAEA,SAAS,CAACC,OAAV,CAAkBC,OADzB;AAEE,IAAA,KAAK,MAFP;AAGE,IAAA,IAAI,EAAC,QAHP;AAIE,IAAA,KAAK,EAAE;AAAEC,MAAAA,KAAK,EAAE;AAAT,KAJT;AAKE,IAAA,QAAQ,EAAC,MALX;AAME,IAAA,IAAI,EAAC,QANP;AAOE,IAAA,OAAO,EAAE,MAAMJ,KAAK,CAAC,IAAD,CAPtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBASE,oBAAC,MAAD,CAAQ,OAAR;AAAgB,IAAA,OAAO,MAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAyBF,IAAzB,CATF,eAUE,oBAAC,MAAD,CAAQ,OAAR;AAAgB,IAAA,MAAM,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BACO,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEO,MAAAA,UAAU,EAAE;AAAd,KAAb;AAAoC,IAAA,IAAI,EAAC,WAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADP,CAVF,CAPF,CADF;AAwBD,CA9BD;;AAgCA,MAAMC,eAAyD,GAAG,CAAC;AACjER,EAAAA,IADiE;AAEjEC,EAAAA;AAFiE,CAAD,KAG5D;AACJ,QAAM,CAACQ,IAAD,EAAOC,OAAP,IAAkBjB,QAAQ,CAAC,KAAD,CAAhC;AACA,QAAMkB,GAAG,GAAGjB,MAAM,CAAC,KAAD,CAAlB;AACA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEkB,MAAAA,MAAM,EAAE;AAAV,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,aAAD;AAAe,IAAA,IAAI,EAAEZ,IAArB;AAA2B,IAAA,IAAI,EAAEC,IAAjC;AAAuC,IAAA,KAAK,EAAGY,CAAD,IAAOH,OAAO,CAACG,CAAD,CAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAKD,CAXD;;AAaA,eAAeL,eAAf","sourcesContent":["import React, { useState, useRef } from \"react\";\nimport { Popup, Button, Icon } from \"semantic-ui-react\";\nimport CopyToClipboard from \"react-copy-to-clipboard\";\n\nconst TriggerButton: React.FC<{\n  name: string;\n  copy: string;\n  popUp: React.Dispatch<React.SetStateAction<boolean>>;\n}> = ({ name, copy, popUp }) => {\n  const buttonRef = useRef(false);\n  return (\n    <CopyToClipboard text={copy}>\n      <Popup\n        triggerRef={buttonRef}\n        content={`Copied to clipboard.`}\n        pinned\n        position=\"right center\"\n      />\n      <Button\n        ref={buttonRef.current.valueOf}\n        basic\n        type=\"button\"\n        style={{ width: \"125px\" }}\n        animated=\"fade\"\n        size=\"medium\"\n        onClick={() => popUp(true)}\n      >\n        <Button.Content visible>{name}</Button.Content>\n        <Button.Content hidden>\n          Copy <Icon style={{ marginLeft: \"4px\" }} name=\"clipboard\" />\n        </Button.Content>\n      </Button>\n    </CopyToClipboard>\n  );\n};\n\nconst ClipBoardButton: React.FC<{ name: string; copy: string }> = ({\n  name,\n  copy,\n}) => {\n  const [info, setInfo] = useState(false);\n  const ref = useRef(false);\n  return (\n    <div style={{ margin: \"5px\" }}>\n      <TriggerButton name={name} copy={copy} popUp={(e) => setInfo(e)} />\n    </div>\n  );\n};\n\nexport default ClipBoardButton;\n"]},"metadata":{},"sourceType":"module"}