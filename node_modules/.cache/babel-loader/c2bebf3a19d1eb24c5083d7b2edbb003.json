{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri } from \"assets/constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\n/* export function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\n  // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n  form.setAttribute(\"action\", oauth2Endpoint);\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n} */\n\nexport async function LoginWithGoogle() {\n  let credentials;\n\n  try {\n    credentials = Realm.Credentials.google(redirect_uri);\n  } catch (error) {\n    console.log(error);\n  }\n\n  debugger;\n  return await app.logIn(credentials).then(user => {\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      success: false,\n      error\n    };\n  }\n}\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","redirect_uri","app","App","id","mongo","services","service","collection","db","database","LoginWithGoogle","credentials","Credentials","google","error","console","log","logIn","then","user","SignUp","email","password","emailPasswordAuth","registerUser","success","undefined","ConfirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","catch","err"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,YAAT,QAA6B,kBAA7B;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIH,KAAK,CAACI,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaN,OAAb,CAAqBA,OAAO,CAACO,OAA7B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,EADuB,CACpBT,OAAO,CAACU,QADY,EAEvBF,UAFuB,CAEZR,OAAO,CAACQ,UAFI,CAAnB;AAIP;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,OAAO,eAAeG,eAAf,GAAiC;AACtC,MAAIC,WAAJ;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAGb,KAAK,CAACc,WAAN,CAAkBC,MAAlB,CAAyBb,YAAzB,CAAd;AACD,GAFD,CAEE,OAAOc,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AACD;AACA,SAAO,MAAMb,GAAG,CAACgB,KAAJ,CAAUN,WAAV,EAAuBO,IAAvB,CAA6BC,IAAD,IAAU;AACjDJ,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBG,IAAI,CAAChB,EAAG,EAA1C;AACD,GAFY,CAAb;AAGD;AAED,OAAO,eAAeiB,MAAf,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAI;AACF,UAAMrB,GAAG,CAACsB,iBAAJ,CAAsBC,YAAtB,CAAmCH,KAAnC,EAA0CC,QAA1C,CAAN;AACA,WAAO;AAAEG,MAAAA,OAAO,EAAE,IAAX;AAAiBX,MAAAA,KAAK,EAAEY;AAAxB,KAAP;AACD,GAHD,CAGE,OAAOZ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO;AAAEW,MAAAA,OAAO,EAAE,KAAX;AAAkBX,MAAAA;AAAlB,KAAP;AACD;AACF;AAED,OAAO,eAAea,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAOlC,GAAG,CAACsB,iBAAJ,CAAsBc,WAAtB,CAAkCH,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CAAgCjB,KAAhC,EAAuC;AAC5C,SAAOpB,GAAG,CAACsB,iBAAJ,CACJgB,sBADI,CACmBlB,KADnB,EAEJH,IAFI,CAEC,MAAM;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJwB,KALI,CAKGC,GAAD,IAAS;AACd1B,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDyB,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri } from \"assets/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\n/* export function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\n  // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n  form.setAttribute(\"action\", oauth2Endpoint);\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n} */\n\nexport async function LoginWithGoogle() {\n  let credentials;\n  try {\n    credentials = Realm.Credentials.google(redirect_uri);\n  } catch (error) {\n    console.log(error);\n  }\n  debugger;\n  return await app.logIn(credentials).then((user) => {\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}