{"ast":null,"code":"import _regeneratorRuntime from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as Realm from\"realm-web\";import fetch from\"node-fetch\";import{mongodb}from\"./db/constants\";export var app=new Realm.App({id:\"ttk-ui-cvkwt\"});export var mongo=app.services.mongodb(mongodb.service);export var collection=mongo.db(mongodb.database).collection(mongodb.collection);export function SignUp(_x,_x2){return _SignUp.apply(this,arguments);}function _SignUp(){_SignUp=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(email,password){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:_context.prev=0;_context.next=3;return app.emailPasswordAuth.registerUser(email,password);case 3:return _context.abrupt(\"return\",{success:true,error:undefined});case 6:_context.prev=6;_context.t0=_context[\"catch\"](0);console.log(_context.t0);return _context.abrupt(\"return\",{success:false,error:_context.t0});case 10:case\"end\":return _context.stop();}}},_callee,null,[[0,6]]);}));return _SignUp.apply(this,arguments);}export function LogIn(){return _LogIn.apply(this,arguments);}function _LogIn(){_LogIn=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){var redirect_uri,client_id,url,gtoken;return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:redirect_uri=\"https://realm.mongodb.com/api/client/v2.0/auth/callback\";client_id=\"291216037477-tlo72q1hnsl5kk6qph3spkc191mhnfn2.apps.googleusercontent.com\";url=\"https://accounts.google.com/o/oauth2/v2/auth?\\n  scope=https%3A//www.googleapis.com/auth/drive.metadata.readonly&\\n  include_granted_scopes=true&\\n  response_type=token&\\n  redirect_uri=\".concat(redirect_uri,\"&\\n  client_id=\").concat(client_id);_context2.next=5;return fetch(url,{method:\"GET\"}).then(function(token){return token;});case 5:gtoken=_context2.sent;try{Realm.Credentials.google(gtoken);}catch(err){console.log(err);}case 7:case\"end\":return _context2.stop();}}},_callee2);}));return _LogIn.apply(this,arguments);}export function ConfirmUser(){return _ConfirmUser.apply(this,arguments);}function _ConfirmUser(){_ConfirmUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var url,params,token,tokenId;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:url=window.location.search;params=new URLSearchParams(url);token=params.get(\"token\");tokenId=params.get(\"tokenId\");return _context3.abrupt(\"return\",app.emailPasswordAuth.confirmUser(token,tokenId));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _ConfirmUser.apply(this,arguments);}export function SendResetPasswordEmail(email){return app.emailPasswordAuth.sendResetPasswordEmail(email).then(function(){console.log(\"Successfully sent password reset email!\");}).catch(function(err){console.log(\"Error sending password reset email:\",err);});}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","fetch","mongodb","app","App","id","mongo","services","service","collection","db","database","SignUp","email","password","emailPasswordAuth","registerUser","success","error","undefined","console","log","LogIn","redirect_uri","client_id","url","method","then","token","gtoken","Credentials","google","err","ConfirmUser","window","location","search","params","URLSearchParams","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","catch"],"mappings":"+SAAA,MAAO,GAAKA,CAAAA,KAAZ,KAAuB,WAAvB,CACA,MAAOC,CAAAA,KAAP,KAAkB,YAAlB,CAEA,OAASC,OAAT,KAAwB,gBAAxB,CAEA,MAAO,IAAMC,CAAAA,GAAG,CAAG,GAAIH,CAAAA,KAAK,CAACI,GAAV,CAAc,CAAEC,EAAE,CAAE,cAAN,CAAd,CAAZ,CAEP,MAAO,IAAMC,CAAAA,KAAK,CAAGH,GAAG,CAACI,QAAJ,CAAaL,OAAb,CAAqBA,OAAO,CAACM,OAA7B,CAAd,CAEP,MAAO,IAAMC,CAAAA,UAAU,CAAGH,KAAK,CAC5BI,EADuB,CACpBR,OAAO,CAACS,QADY,EAEvBF,UAFuB,CAEZP,OAAO,CAACO,UAFI,CAAnB,CAIP,eAAsBG,CAAAA,MAAtB,+C,mFAAO,iBAAsBC,KAAtB,CAA6BC,QAA7B,wJAEGX,CAAAA,GAAG,CAACY,iBAAJ,CAAsBC,YAAtB,CAAmCH,KAAnC,CAA0CC,QAA1C,CAFH,wCAGI,CAAEG,OAAO,CAAE,IAAX,CAAiBC,KAAK,CAAEC,SAAxB,CAHJ,0DAKHC,OAAO,CAACC,GAAR,cALG,gCAMI,CAAEJ,OAAO,CAAE,KAAX,CAAkBC,KAAK,YAAvB,CANJ,sE,yCAUP,eAAsBI,CAAAA,KAAtB,wC,iFAAO,8KACCC,YADD,CAEH,yDAFG,CAGCC,SAHD,CAIH,0EAJG,CAKCC,GALD,qMASUF,YATV,2BAUOC,SAVP,yBAWcvB,CAAAA,KAAK,CAACwB,GAAD,CAAM,CAAEC,MAAM,CAAE,KAAV,CAAN,CAAL,CAA8BC,IAA9B,CAAmC,SAACC,KAAD,CAAW,CAC/D,MAAOA,CAAAA,KAAP,CACD,CAFkB,CAXd,QAWDC,MAXC,gBAcL,GAAI,CACF7B,KAAK,CAAC8B,WAAN,CAAkBC,MAAlB,CAAyBF,MAAzB,EACD,CAAC,MAAOG,GAAP,CAAY,CACZZ,OAAO,CAACC,GAAR,CAAYW,GAAZ,EACD,CAlBI,wD,wCAqBP,eAAsBC,CAAAA,WAAtB,8C,6FAAO,qKACCR,GADD,CACOS,MAAM,CAACC,QAAP,CAAgBC,MADvB,CAECC,MAFD,CAEU,GAAIC,CAAAA,eAAJ,CAAoBb,GAApB,CAFV,CAGCG,KAHD,CAGSS,MAAM,CAACE,GAAP,CAAW,OAAX,CAHT,CAICC,OAJD,CAIWH,MAAM,CAACE,GAAP,CAAW,SAAX,CAJX,kCAMEpC,GAAG,CAACY,iBAAJ,CAAsB0B,WAAtB,CAAkCb,KAAlC,CAAyCY,OAAzC,CANF,0D,8CASP,MAAO,SAASE,CAAAA,sBAAT,CAAgC7B,KAAhC,CAAuC,CAC5C,MAAOV,CAAAA,GAAG,CAACY,iBAAJ,CACJ4B,sBADI,CACmB9B,KADnB,EAEJc,IAFI,CAEC,UAAM,CACVP,OAAO,CAACC,GAAR,CAAY,yCAAZ,EACD,CAJI,EAKJuB,KALI,CAKE,SAACZ,GAAD,CAAS,CACdZ,OAAO,CAACC,GAAR,CAAY,qCAAZ,CAAmDW,GAAnD,EACD,CAPI,CAAP,CAQD","sourcesContent":["import * as Realm from \"realm-web\";\nimport fetch from \"node-fetch\";\n\nimport { mongodb } from \"./db/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function LogIn() {\n  const redirect_uri =\n    \"https://realm.mongodb.com/api/client/v2.0/auth/callback\";\n  const client_id =\n    \"291216037477-tlo72q1hnsl5kk6qph3spkc191mhnfn2.apps.googleusercontent.com\";\n  const url = `https://accounts.google.com/o/oauth2/v2/auth?\n  scope=https%3A//www.googleapis.com/auth/drive.metadata.readonly&\n  include_granted_scopes=true&\n  response_type=token&\n  redirect_uri=${redirect_uri}&\n  client_id=${client_id}`;\n  let gtoken = await fetch(url, { method: \"GET\" }).then((token) => {\n    return token;\n  });\n  try {\n    Realm.Credentials.google(gtoken);\n  } catch (err) {\n    console.log(err);\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}