{"ast":null,"code":"import _slicedToArray from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import store from\"store/index\";import{dispatchDefaultUser}from\"store/actions\";import{db,client}from\"api/db-actions\";var payload={operation:\"CREATEUSER\",commands:[\"WITHPHONECONFIRMATION\",\"WITHPASSWORD\"]};export function CreateDefaultUser(environment){process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"]=\"0\";// to prevent SSL\nvar url=\"https://ttk.armut.\".concat(environment,\"/operate\");var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setState=_useState2[1];var loadUser=function loadUser(){setState(true);fetch(url,{method:\"POST\",body:JSON.stringify(payload)}).then(function(res){return res.json();}).then(function(user){var responseContext=user.responseContext,error=user.error;if(error)return;var _responseContext$=responseContext[0],accessToken=_responseContext$.accessToken,password=_responseContext$.password,model=_responseContext$.model;var user_id=model.user_id,email=model.email;if(!error){var _client$auth$user;store.dispatch(dispatchDefaultUser({user_id:user_id,email:email,password:password,accessToken:accessToken}));db.collection(\"test\").insertOne({user_id:(_client$auth$user=client.auth.user)===null||_client$auth$user===void 0?void 0:_client$auth$user.id,id:user_id,environment:environment,email:email,password:password,accessToken:accessToken});}}).catch(function(error){console.log(error);}).finally(function(){setState(false);});};return[isLoading,loadUser];// infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","db","client","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","loadUser","fetch","method","body","JSON","stringify","then","res","json","user","responseContext","error","accessToken","password","model","user_id","email","dispatch","collection","insertOne","auth","id","catch","console","log","finally"],"mappings":"yJAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,aAAlB,CACA,OAASC,mBAAT,KAAoC,eAApC,CACA,OAASC,EAAT,CAAaC,MAAb,KAA2B,gBAA3B,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACdC,SAAS,CAAE,YADG,CAEdC,QAAQ,CAAE,CAAC,uBAAD,CAA0B,cAA1B,CAFI,CAAhB,CAKA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,WAA3B,CAAgD,CACrDC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA8C,GAA9C,CAAmD;AACnD,GAAMC,CAAAA,GAAG,6BAAwBH,WAAxB,YAAT,CAFqD,cAIvBT,QAAQ,CAAC,KAAD,CAJe,wCAI9Ca,SAJ8C,eAInCC,QAJmC,eAMrD,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrBD,QAAQ,CAAC,IAAD,CAAR,CACAE,KAAK,CAACJ,GAAD,CAAM,CACTK,MAAM,CAAE,MADC,CAETC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAef,OAAf,CAFG,CAAN,CAAL,CAIGgB,IAJH,CAIQ,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAJR,EAKGF,IALH,CAKQ,SAACG,IAAD,CAAU,IACNC,CAAAA,eADM,CACqBD,IADrB,CACNC,eADM,CACWC,KADX,CACqBF,IADrB,CACWE,KADX,CAEd,GAAIA,KAAJ,CAAW,OAFG,sBAG2BD,eAAe,CAAC,CAAD,CAH1C,CAGNE,WAHM,mBAGNA,WAHM,CAGOC,QAHP,mBAGOA,QAHP,CAGiBC,KAHjB,mBAGiBA,KAHjB,IAINC,CAAAA,OAJM,CAIaD,KAJb,CAINC,OAJM,CAIGC,KAJH,CAIaF,KAJb,CAIGE,KAJH,CAKd,GAAI,CAACL,KAAL,CAAY,uBACVzB,KAAK,CAAC+B,QAAN,CACE9B,mBAAmB,CAAC,CAAE4B,OAAO,CAAPA,OAAF,CAAWC,KAAK,CAALA,KAAX,CAAkBH,QAAQ,CAARA,QAAlB,CAA4BD,WAAW,CAAXA,WAA5B,CAAD,CADrB,EAGAxB,EAAE,CAAC8B,UAAH,CAAc,MAAd,EAAsBC,SAAtB,CAAgC,CAC9BJ,OAAO,oBAAE1B,MAAM,CAAC+B,IAAP,CAAYX,IAAd,4CAAE,kBAAkBY,EADG,CAE9BA,EAAE,CAAEN,OAF0B,CAG9BrB,WAAW,CAAXA,WAH8B,CAI9BsB,KAAK,CAALA,KAJ8B,CAK9BH,QAAQ,CAARA,QAL8B,CAM9BD,WAAW,CAAXA,WAN8B,CAAhC,EAQD,CACF,CAvBH,EAwBGU,KAxBH,CAwBS,SAACX,KAAD,CAAW,CAChBY,OAAO,CAACC,GAAR,CAAYb,KAAZ,EACD,CA1BH,EA2BGc,OA3BH,CA2BW,UAAM,CACb1B,QAAQ,CAAC,KAAD,CAAR,CACD,CA7BH,EA8BD,CAhCD,CAiCA,MAAO,CAACD,SAAD,CAAYE,QAAZ,CAAP,CAAuC;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nimport { db, client } from \"api/db-actions\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        if (error) return;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({ user_id, email, password, accessToken })\n          );\n          db.collection(\"test\").insertOne({\n            user_id: client.auth.user?.id,\n            id: user_id,\n            environment,\n            email,\n            password,\n            accessToken,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}