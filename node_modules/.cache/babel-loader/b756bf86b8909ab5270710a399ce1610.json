{"ast":null,"code":"import { Stitch, RemoteMongoClient //AnonymousCredential,\n, UserPasswordCredential, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\nexport const db = client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\").db(\"ttk-ui-db\");\nexport const collection = db.collection(\"test\");\nexport async function fetchUsers(environment) {\n  return await collection.find({\n    environment\n  }).asArray().then(users => users);\n}\nexport async function deleteUser(id) {\n  return await collection.deleteOne({\n    id\n  }).then(res => console.log(\"deleted\"));\n}\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\n/* export function saveUser(environment) {\n  client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment)\n      .insertOne({\n        auth: \"asdnaksjdnasjdhasd\",\n        email: \"berkakgun@email.com\",\n        password: \"123456789\",\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  });\n} */\n\nexport async function SignUp(email, password) {\n  const emailPasswordClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  console.log(token, tokenId); // Confirm the user's email/password account\n\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  return emailPassClient.confirmUser(token, tokenId);\n}\nexport function resendConfirmation(email) {\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  emailPassClient.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/api/db-actions.js"],"names":["Stitch","RemoteMongoClient","UserPasswordCredential","UserPasswordAuthProviderClient","client","initializeDefaultAppClient","db","getServiceClient","factory","collection","fetchUsers","environment","find","asArray","then","users","deleteUser","id","deleteOne","res","console","log","logDB","email","password","credential","authedUser","auth","loginWithCredential","success","error","undefined","err","SignUp","emailPasswordClient","defaultAppClient","getProviderClient","registerWithEmail","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPassClient","resendConfirmation","sendResetPasswordEmail","catch"],"mappings":"AAAA,SACEA,MADF,EAEEC,iBAFF,CAGE;AAHF,EAIEC,sBAJF,EAKEC,8BALF,QAMO,4BANP;AAQA,OAAO,MAAMC,MAAM,GAAGJ,MAAM,CAACK,0BAAP,CAAkC,cAAlC,CAAf;AAEP,OAAO,MAAMC,EAAE,GAAGF,MAAM,CACrBG,gBADe,CACEN,iBAAiB,CAACO,OADpB,EAC6B,eAD7B,EAEfF,EAFe,CAEZ,WAFY,CAAX;AAIP,OAAO,MAAMG,UAAU,GAAGH,EAAE,CAACG,UAAH,CAAc,MAAd,CAAnB;AAEP,OAAO,eAAeC,UAAf,CAA0BC,WAA1B,EAAuC;AAC5C,SAAO,MAAMF,UAAU,CACpBG,IADU,CACL;AAAED,IAAAA;AAAF,GADK,EAEVE,OAFU,GAGVC,IAHU,CAGJC,KAAD,IAAWA,KAHN,CAAb;AAID;AAED,OAAO,eAAeC,UAAf,CAA0BC,EAA1B,EAA8B;AACnC,SAAO,MAAMR,UAAU,CACpBS,SADU,CACA;AAAED,IAAAA;AAAF,GADA,EAEVH,IAFU,CAEJK,GAAD,IAASC,OAAO,CAACC,GAAR,CAAY,SAAZ,CAFJ,CAAb;AAGD;AAED,OAAO,eAAeC,KAAf,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAC3C,QAAMC,UAAU,GAAG,IAAIvB,sBAAJ,CAA2BqB,KAA3B,EAAkCC,QAAlC,CAAnB;;AACA,MAAI;AACF,UAAME,UAAU,GAAG,MAAMtB,MAAM,CAACuB,IAAP,CAAYC,mBAAZ,CAAgCH,UAAhC,CAAzB;AACAL,IAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCK,UAAU,CAACT,EAAG,EAA7D;AACA,WAAO;AAAEY,MAAAA,OAAO,EAAE,IAAX;AAAiBZ,MAAAA,EAAE,EAAES,UAAU,CAACT,EAAhC;AAAoCa,MAAAA,KAAK,EAAEC;AAA3C,KAAP;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,OAAO,CAACU,KAAR,CAAe,4BAA2BE,GAAI,EAA9C;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACD;AACF;AAED;;;;;;;;;;;;;;;AAeA,OAAO,eAAeC,MAAf,CAAsBV,KAAtB,EAA6BC,QAA7B,EAAuC;AAC5C,QAAMU,mBAAmB,GAAGlC,MAAM,CAACmC,gBAAP,CAAwBR,IAAxB,CAA6BS,iBAA7B,CAC1BjC,8BAA8B,CAACK,OADL,CAA5B;;AAIA,MAAI;AACF,UAAM0B,mBAAmB,CAACG,iBAApB,CAAsCd,KAAtC,EAA6CC,QAA7C,CAAN;AACA,WAAO;AAAEK,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAEC;AAAxB,KAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZZ,IAAAA,OAAO,CAACC,GAAR,CAAYW,GAAZ;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACD;AACF;AAED,OAAO,eAAeM,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AACA1B,EAAAA,OAAO,CAACC,GAAR,CAAYwB,KAAZ,EAAmBE,OAAnB,EALkC,CAOlC;;AACA,QAAMC,eAAe,GAAGhD,MAAM,CAACmC,gBAAP,CAAwBR,IAAxB,CAA6BS,iBAA7B,CACtBjC,8BAA8B,CAACK,OADT,CAAxB;AAGA,SAAOwC,eAAe,CAACV,WAAhB,CAA4BO,KAA5B,EAAmCE,OAAnC,CAAP;AACD;AAED,OAAO,SAASE,kBAAT,CAA4B1B,KAA5B,EAAmC;AACxC,QAAMyB,eAAe,GAAGhD,MAAM,CAACmC,gBAAP,CAAwBR,IAAxB,CAA6BS,iBAA7B,CACtBjC,8BAA8B,CAACK,OADT,CAAxB;AAIAwC,EAAAA,eAAe,CACZE,sBADH,CAC0B3B,KAD1B,EAEGT,IAFH,CAEQ,MAAM;AACVM,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJH,EAKG8B,KALH,CAKUnB,GAAD,IAAS;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDW,GAAnD;AACD,GAPH;AAQD","sourcesContent":["import {\n  Stitch,\n  RemoteMongoClient,\n  //AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nexport const db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui-db\");\n\nexport const collection = db.collection(\"test\");\n\nexport async function fetchUsers(environment) {\n  return await collection\n    .find({ environment })\n    .asArray()\n    .then((users) => users);\n}\n\nexport async function deleteUser(id) {\n  return await collection\n    .deleteOne({ id })\n    .then((res) => console.log(\"deleted\"));\n}\n\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\n/* export function saveUser(environment) {\n  client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment)\n      .insertOne({\n        auth: \"asdnaksjdnasjdhasd\",\n        email: \"berkakgun@email.com\",\n        password: \"123456789\",\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  });\n} */\n\nexport async function SignUp(email, password) {\n  const emailPasswordClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  console.log(token, tokenId);\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}