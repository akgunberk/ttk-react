{"ast":null,"code":"import * as Realm from \"realm-web\";\nconst app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\n/* import {\n  Stitch,\n  RemoteMongoClient,\n  //AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nexport const db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui-db\");\n\nconst collection = db.collection(\"test\");\n\nexport const auth = Stitch.defaultAppClient.auth;\n\nexport const emailPasswordClient = auth.getProviderClient(\n  UserPasswordAuthProviderClient.factory\n);\n\nexport default collection;\n\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n */","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/db/initDb.js"],"names":["Realm","app","App","id"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,MAAMC,GAAc,GAAG,IAAID,KAAK,CAACE,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAvB;AAEA","sourcesContent":["import * as Realm from \"realm-web\";\n\nconst app: Realm.App = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\n/* import {\n  Stitch,\n  RemoteMongoClient,\n  //AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nexport const db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui-db\");\n\nconst collection = db.collection(\"test\");\n\nexport const auth = Stitch.defaultAppClient.auth;\n\nexport const emailPasswordClient = auth.getProviderClient(\n  UserPasswordAuthProviderClient.factory\n);\n\nexport default collection;\n\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n */\n"]},"metadata":{},"sourceType":"module"}