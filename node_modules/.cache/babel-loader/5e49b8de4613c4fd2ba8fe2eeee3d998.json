{"ast":null,"code":"import _regeneratorRuntime from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect,useRef}from\"react\";import{UserContext}from\"core/store/ContextApi/Context\";import{Application}from\"core/initApp\";export function AuthGuard(props){var appRef=useRef(Application);var _useState=useState(Application.currentUser),_useState2=_slicedToArray(_useState,2),user=_useState2[0],setAuthState=_useState2[1];useEffect(function(){setAuthState(Application.currentUser);},[appRef.current.currentUser]);var logOut=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _Application$currentU;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!Application.currentUser){_context.next=4;break;}_context.next=3;return(_Application$currentU=Application.currentUser)===null||_Application$currentU===void 0?void 0:_Application$currentU.logOut();case 3:setAuthState(Application.currentUser);case 4:case\"end\":return _context.stop();}}},_callee);}));return function logOut(){return _ref.apply(this,arguments);};}();return/*#__PURE__*/React.createElement(UserContext.Provider,{value:{user:user,actions:{logOut:logOut,setAuthState:setAuthState}}},props.children);}/* \nexport function AuthGuard(props: any) {\n   const appRef = useRef(Application);\n  const [authState, setAuthState] = useState({\n    isLoggedIn: Application.currentUser?.state === \"active\",\n    currentUser: Application.currentUser,\n  });\n  // eslint-disable-next-line\n\n  const handleLogout = () => {\n    Application.currentUser?.logOut();\n    setAuthState({ isLoggedIn: false, currentUser: null });\n  };\n\n  const authInfo = React.useMemo(() => {\n    const { isLoggedIn, currentUser } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, setAuthState },\n    };\n    return value;\n  }, [authState]);\n\n  return (\n    <UserContext.Provider value={authInfo}>\n      {props.children}\n    </UserContext.Provider>\n  );\n} */","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/display/Auth/AuthGuard.tsx"],"names":["React","useState","useEffect","useRef","UserContext","Application","AuthGuard","props","appRef","currentUser","user","setAuthState","current","logOut","actions","children"],"mappings":"wcAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,CAAqCC,MAArC,KAAmD,OAAnD,CACA,OAASC,WAAT,KAA4B,+BAA5B,CACA,OAASC,WAAT,KAA4B,cAA5B,CAGA,MAAO,SAASC,CAAAA,SAAT,CAAmBC,KAAnB,CAA+B,CACpC,GAAMC,CAAAA,MAAM,CAAGL,MAAM,CAACE,WAAD,CAArB,CADoC,cAGPJ,QAAQ,CAG3BI,WAAW,CAACI,WAHe,CAHD,wCAG7BC,IAH6B,eAGvBC,YAHuB,eAQpCT,SAAS,CAAC,UAAM,CACdS,YAAY,CAACN,WAAW,CAACI,WAAb,CAAZ,CACD,CAFQ,CAEN,CAACD,MAAM,CAACI,OAAP,CAAeH,WAAhB,CAFM,CAAT,CAIA,GAAMI,CAAAA,MAAM,0FAAG,iKACTR,WAAW,CAACI,WADH,sEAELJ,WAAW,CAACI,WAFP,gDAEL,sBAAyBI,MAAzB,EAFK,QAGXF,YAAY,CAACN,WAAW,CAACI,WAAb,CAAZ,CAHW,sDAAH,kBAANI,CAAAA,MAAM,0CAAZ,CAOA,mBACE,oBAAC,WAAD,CAAa,QAAb,EAAsB,KAAK,CAAE,CAAEH,IAAI,CAAJA,IAAF,CAAQI,OAAO,CAAE,CAAED,MAAM,CAANA,MAAF,CAAUF,YAAY,CAAZA,YAAV,CAAjB,CAA7B,EACGJ,KAAK,CAACQ,QADT,CADF,CAKD,CAED","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { UserContext } from \"core/store/ContextApi/Context\";\nimport { Application } from \"core/initApp\";\nimport { User } from \"realm-web\";\n\nexport function AuthGuard(props: any) {\n  const appRef = useRef(Application);\n\n  const [user, setAuthState] = useState<User<\n    Realm.DefaultFunctionsFactory,\n    any\n  > | null>(Application.currentUser);\n\n  useEffect(() => {\n    setAuthState(Application.currentUser);\n  }, [appRef.current.currentUser]);\n\n  const logOut = async () => {\n    if (Application.currentUser) {\n      await Application.currentUser?.logOut();\n      setAuthState(Application.currentUser);\n    }\n  };\n\n  return (\n    <UserContext.Provider value={{ user, actions: { logOut, setAuthState } }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n}\n\n/* \nexport function AuthGuard(props: any) {\n   const appRef = useRef(Application);\n  const [authState, setAuthState] = useState({\n    isLoggedIn: Application.currentUser?.state === \"active\",\n    currentUser: Application.currentUser,\n  });\n  // eslint-disable-next-line\n\n  const handleLogout = () => {\n    Application.currentUser?.logOut();\n    setAuthState({ isLoggedIn: false, currentUser: null });\n  };\n\n  const authInfo = React.useMemo(() => {\n    const { isLoggedIn, currentUser } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, setAuthState },\n    };\n    return value;\n  }, [authState]);\n\n  return (\n    <UserContext.Provider value={authInfo}>\n      {props.children}\n    </UserContext.Provider>\n  );\n} */\n"]},"metadata":{},"sourceType":"module"}