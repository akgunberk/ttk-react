{"ast":null,"code":"import _slicedToArray from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import store from\"core/store/index\";import{dispatchDefaultUser}from\"core/store/actions\";import{app,collection}from\"core/initApp\";var payload={operation:\"CREATEUSER\",commands:[\"WITHPHONECONFIRMATION\",\"WITHPASSWORD\"]};export function CreateDefaultUser(environment){process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"]=\"0\";// to prevent SSL\nvar url=\"https://ttk.armut.\".concat(environment,\"/operate\");var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setState=_useState2[1];var loadUser=function loadUser(){setState(true);fetch(url,{method:\"POST\",body:JSON.stringify(payload)}).then(function(res){return res.json();}).then(function(user){var responseContext=user.responseContext,error=user.error;if(error)return;var _responseContext$=responseContext[0],accessToken=_responseContext$.accessToken,password=_responseContext$.password,model=_responseContext$.model;var user_id=model.user_id,email=model.email,first_name=model.first_name;if(!error){var _app$currentUser;store.dispatch(dispatchDefaultUser({user_id:user_id,email:email,password:password,accessToken:accessToken,name:first_name}));collection.insertOne({user_id:(_app$currentUser=app.currentUser)===null||_app$currentUser===void 0?void 0:_app$currentUser.id,id:user_id,environment:environment,email:email,password:password,accessToken:accessToken,name:first_name});}}).catch(function(error){console.log(error);}).finally(function(){setState(false);});};return[isLoading,loadUser];// infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","app","collection","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","loadUser","fetch","method","body","JSON","stringify","then","res","json","user","responseContext","error","accessToken","password","model","user_id","email","first_name","dispatch","name","insertOne","currentUser","id","catch","console","log","finally"],"mappings":"yJAAA,OAASA,QAAT,KAAyB,OAAzB,CACA,MAAOC,CAAAA,KAAP,KAAkB,kBAAlB,CACA,OAASC,mBAAT,KAAoC,oBAApC,CACA,OAASC,GAAT,CAAcC,UAAd,KAAgC,cAAhC,CAEA,GAAMC,CAAAA,OAAO,CAAG,CACdC,SAAS,CAAE,YADG,CAEdC,QAAQ,CAAE,CAAC,uBAAD,CAA0B,cAA1B,CAFI,CAAhB,CAKA,MAAO,SAASC,CAAAA,iBAAT,CAA2BC,WAA3B,CAAgD,CACrDC,OAAO,CAACC,GAAR,CAAY,8BAAZ,EAA8C,GAA9C,CAAmD;AACnD,GAAMC,CAAAA,GAAG,6BAAwBH,WAAxB,YAAT,CAFqD,cAIvBT,QAAQ,CAAC,KAAD,CAJe,wCAI9Ca,SAJ8C,eAInCC,QAJmC,eAMrD,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACrBD,QAAQ,CAAC,IAAD,CAAR,CACAE,KAAK,CAACJ,GAAD,CAAM,CACTK,MAAM,CAAE,MADC,CAETC,IAAI,CAAEC,IAAI,CAACC,SAAL,CAAef,OAAf,CAFG,CAAN,CAAL,CAIGgB,IAJH,CAIQ,SAACC,GAAD,QAASA,CAAAA,GAAG,CAACC,IAAJ,EAAT,EAJR,EAKGF,IALH,CAKQ,SAACG,IAAD,CAAU,IACNC,CAAAA,eADM,CACqBD,IADrB,CACNC,eADM,CACWC,KADX,CACqBF,IADrB,CACWE,KADX,CAEd,GAAIA,KAAJ,CAAW,OAFG,sBAG2BD,eAAe,CAAC,CAAD,CAH1C,CAGNE,WAHM,mBAGNA,WAHM,CAGOC,QAHP,mBAGOA,QAHP,CAGiBC,KAHjB,mBAGiBA,KAHjB,IAINC,CAAAA,OAJM,CAIyBD,KAJzB,CAINC,OAJM,CAIGC,KAJH,CAIyBF,KAJzB,CAIGE,KAJH,CAIUC,UAJV,CAIyBH,KAJzB,CAIUG,UAJV,CAKd,GAAI,CAACN,KAAL,CAAY,sBACVzB,KAAK,CAACgC,QAAN,CACE/B,mBAAmB,CAAC,CAClB4B,OAAO,CAAPA,OADkB,CAElBC,KAAK,CAALA,KAFkB,CAGlBH,QAAQ,CAARA,QAHkB,CAIlBD,WAAW,CAAXA,WAJkB,CAKlBO,IAAI,CAAEF,UALY,CAAD,CADrB,EASA5B,UAAU,CAAC+B,SAAX,CAAqB,CACnBL,OAAO,mBAAE3B,GAAG,CAACiC,WAAN,2CAAE,iBAAiBC,EADP,CAEnBA,EAAE,CAAEP,OAFe,CAGnBrB,WAAW,CAAXA,WAHmB,CAInBsB,KAAK,CAALA,KAJmB,CAKnBH,QAAQ,CAARA,QALmB,CAMnBD,WAAW,CAAXA,WANmB,CAOnBO,IAAI,CAAEF,UAPa,CAArB,EASD,CACF,CA9BH,EA+BGM,KA/BH,CA+BS,SAACZ,KAAD,CAAW,CAChBa,OAAO,CAACC,GAAR,CAAYd,KAAZ,EACD,CAjCH,EAkCGe,OAlCH,CAkCW,UAAM,CACb3B,QAAQ,CAAC,KAAD,CAAR,CACD,CApCH,EAqCD,CAvCD,CAwCA,MAAO,CAACD,SAAD,CAAYE,QAAZ,CAAP,CAAuC;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { app, collection } from \"core/initApp\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        if (error) return;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n            })\n          );\n          collection.insertOne({\n            user_id: app.currentUser?.id,\n            id: user_id,\n            environment,\n            email,\n            password,\n            accessToken,\n            name: first_name,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}