{"ast":null,"code":"import { Stitch, RemoteMongoClient, AnonymousCredential, UserPasswordCredential, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\nconst client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\nconst db = client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\").db(\"ttk-ui\");\nexport async function fetchUsers(environment) {\n  const userCount = db.collection(\"test\").count();\n  console.log(userCount);\n  return client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment).find().asArray();\n  });\n}\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport function saveUser(environment) {\n  client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment).insertOne({\n      auth: \"asdnaksjdnasjdhasd\",\n      email: \"berkakgun@email.com\",\n      password: \"123456789\"\n    }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n  });\n}\nexport async function SignUp(email, password) {\n  const emailPasswordClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  console.log(token, tokenId); // Confirm the user's email/password account\n\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  return emailPassClient.confirmUser(token, tokenId);\n}\nexport function resendConfirmation(email) {\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  emailPassClient.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/api/db-actions.js"],"names":["Stitch","RemoteMongoClient","AnonymousCredential","UserPasswordCredential","UserPasswordAuthProviderClient","client","initializeDefaultAppClient","db","getServiceClient","factory","fetchUsers","environment","userCount","collection","count","console","log","auth","loginWithCredential","then","find","asArray","logDB","email","password","credential","authedUser","id","success","error","undefined","err","saveUser","insertOne","result","insertedId","catch","SignUp","emailPasswordClient","defaultAppClient","getProviderClient","registerWithEmail","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPassClient","resendConfirmation","sendResetPasswordEmail"],"mappings":"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","sourcesContent":["import {\n  Stitch,\n  RemoteMongoClient,\n  AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nconst client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nconst db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui\");\n\nexport async function fetchUsers(environment) {\n  const userCount = db.collection(\"test\").count();\n  console.log(userCount);\n  return client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment).find().asArray();\n  });\n}\n\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport function saveUser(environment) {\n  client.auth.loginWithCredential(new AnonymousCredential()).then(() => {\n    db.collection(environment)\n      .insertOne({\n        auth: \"asdnaksjdnasjdhasd\",\n        email: \"berkakgun@email.com\",\n        password: \"123456789\",\n      })\n      .then((result) =>\n        console.log(`Successfully inserted item with _id: ${result.insertedId}`)\n      )\n      .catch((err) => console.error(`Failed to insert item: ${err}`));\n  });\n}\n\nexport async function SignUp(email, password) {\n  const emailPasswordClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  console.log(token, tokenId);\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}