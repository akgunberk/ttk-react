{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { Application, collection } from \"core/initApp\";\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"]\n};\nexport function CreateDefaultUser(environment) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const [isLoading, setState] = useState(false);\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  const loadUser = () => {\n    setState(true);\n    setTimeout(() => controller.abort(), 15000);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      signal\n    }).then(res => res.json()).then(user => {\n      const {\n        responseContext,\n        error\n      } = user;\n      if (error) return;\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email,\n        first_name\n      } = model;\n\n      if (!error) {\n        var _Application$currentU;\n\n        let imageId = Math.floor(Math.random() * Math.floor(151));\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken,\n          name: first_name,\n          imageId\n        }));\n        collection.insertOne({\n          user_id: (_Application$currentU = Application.currentUser) === null || _Application$currentU === void 0 ? void 0 : _Application$currentU.id,\n          id: user_id,\n          environment,\n          email,\n          password,\n          accessToken,\n          name: first_name,\n          imageId\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    }).finally(() => {\n      setState(false);\n    });\n  };\n\n  return [isLoading, loadUser]; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/services/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","Application","collection","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","controller","AbortController","signal","loadUser","setTimeout","abort","fetch","method","body","JSON","stringify","then","res","json","user","responseContext","error","accessToken","password","model","user_id","email","first_name","imageId","Math","floor","random","dispatch","name","insertOne","currentUser","id","catch","console","log","finally"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,cAAxC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,YADG;AAEdC,EAAAA,QAAQ,EAAE,CAAC,uBAAD,EAA0B,cAA1B;AAFI,CAAhB;AAKA,OAAO,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,GAA9C,CADqD,CACF;;AACnD,QAAMC,GAAG,GAAI,qBAAoBH,WAAY,UAA7C;AAEA,QAAM,CAACI,SAAD,EAAYC,QAAZ,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;AAEA,QAAMe,UAAU,GAAG,IAAIC,eAAJ,EAAnB;AACA,QAAMC,MAAM,GAAGF,UAAU,CAACE,MAA1B;;AAEA,QAAMC,QAAQ,GAAG,MAAM;AACrBJ,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAK,IAAAA,UAAU,CAAC,MAAMJ,UAAU,CAACK,KAAX,EAAP,EAA2B,KAA3B,CAAV;AACAC,IAAAA,KAAK,CAACT,GAAD,EAAM;AACTU,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAepB,OAAf,CAFG;AAGTY,MAAAA;AAHS,KAAN,CAAL,CAKGS,IALH,CAKSC,GAAD,IAASA,GAAG,CAACC,IAAJ,EALjB,EAMGF,IANH,CAMSG,IAAD,IAAU;AACd,YAAM;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAA6BF,IAAnC;AACA,UAAIE,KAAJ,EAAW;AACX,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAmCJ,eAAe,CAAC,CAAD,CAAxD;AACA,YAAM;AAAEK,QAAAA,OAAF;AAAWC,QAAAA,KAAX;AAAkBC,QAAAA;AAAlB,UAAiCH,KAAvC;;AACA,UAAI,CAACH,KAAL,EAAY;AAAA;;AACV,YAAIO,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBF,IAAI,CAACC,KAAL,CAAW,GAAX,CAA3B,CAAd;AACAvC,QAAAA,KAAK,CAACyC,QAAN,CACExC,mBAAmB,CAAC;AAClBiC,UAAAA,OADkB;AAElBC,UAAAA,KAFkB;AAGlBH,UAAAA,QAHkB;AAIlBD,UAAAA,WAJkB;AAKlBW,UAAAA,IAAI,EAAEN,UALY;AAMlBC,UAAAA;AANkB,SAAD,CADrB;AAUAlC,QAAAA,UAAU,CAACwC,SAAX,CAAqB;AACnBT,UAAAA,OAAO,2BAAEhC,WAAW,CAAC0C,WAAd,0DAAE,sBAAyBC,EADf;AAEnBA,UAAAA,EAAE,EAAEX,OAFe;AAGnB1B,UAAAA,WAHmB;AAInB2B,UAAAA,KAJmB;AAKnBH,UAAAA,QALmB;AAMnBD,UAAAA,WANmB;AAOnBW,UAAAA,IAAI,EAAEN,UAPa;AAQnBC,UAAAA;AARmB,SAArB;AAUD;AACF,KAlCH,EAmCGS,KAnCH,CAmCUhB,KAAD,IAAW;AAChBiB,MAAAA,OAAO,CAACC,GAAR,CAAYlB,KAAZ;AACD,KArCH,EAsCGmB,OAtCH,CAsCW,MAAM;AACbpC,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KAxCH;AAyCD,GA5CD;;AA6CA,SAAO,CAACD,SAAD,EAAYK,QAAZ,CAAP,CAtDqD,CAsDd;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { Application, collection } from \"core/initApp\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n\n  const controller = new AbortController();\n  const signal = controller.signal;\n\n  const loadUser = () => {\n    setState(true);\n    setTimeout(() => controller.abort(), 15000);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n      signal,\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        if (error) return;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          let imageId = Math.floor(Math.random() * Math.floor(151));\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n              imageId,\n            })\n          );\n          collection.insertOne({\n            user_id: Application.currentUser?.id,\n            id: user_id,\n            environment,\n            email,\n            password,\n            accessToken,\n            name: first_name,\n            imageId,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}