{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nimport { db, client } from \"api/db-actions\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"store/selectors\";\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n  commandContext: {},\n  jobTestContext: {}\n};\nexport function CreateCustomUser(environment) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const user = useSelector(getUserElements);\n  const [isLoading, setState] = useState(false);\n\n  const loadCustomUser = () => {\n    /* if (user.country) {\n      payload.commands.push(\"WITHCOUNTRYID\");\n      payload.commandContext[\"countryId\"] = user.country;\n    } */\n    if (user.job) {\n      payload.commands.push(\"WITHJOB\");\n      payload.jobTestContext = {\n        operation: \"CREATEJOB\",\n        commands: [\"WITHSERVICEID\"],\n        commandContext: {\n          serviceId: parseInt(user.service)\n        }\n      };\n\n      if (user.date) {\n        var _payload$jobTestConte;\n\n        (_payload$jobTestConte = payload.jobTestContext.commands) === null || _payload$jobTestConte === void 0 ? void 0 : _payload$jobTestConte.push(\"WITHJOBDATE\");\n        payload.jobTestContext.commandContext = { ...payload.jobTestContext.commandContext,\n          jobDate: user.date\n        };\n      }\n\n      if (user.deal === 1) {\n        var _payload$jobTestConte2;\n\n        (_payload$jobTestConte2 = payload.jobTestContext.commands) === null || _payload$jobTestConte2 === void 0 ? void 0 : _payload$jobTestConte2.push(\"WITHDEAL\");\n        payload.jobTestContext.commandContext = { ...payload.jobTestContext.commandContext,\n          jobDate: user.date\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: [\"CREATEPRO\"],\n          commands: [\"WITHCREDITCARD\", \"WITHBALANCE\"],\n          commandContext: {\n            proBalance: 10000\n          }\n        };\n      } else if (user.deal === 0) {\n        var _payload$jobTestConte3;\n\n        (_payload$jobTestConte3 = payload.jobTestContext.commands) === null || _payload$jobTestConte3 === void 0 ? void 0 : _payload$jobTestConte3.push(\"WITHQUOTES\");\n      }\n\n      console.log(payload);\n    }\n\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload)\n    }).then(res => res.json()).then(user => {\n      const {\n        responseContext,\n        error\n      } = user;\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email\n      } = model;\n\n      if (!error) {\n        var _client$auth$user;\n\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken\n        }));\n        db.collection(\"test\").insertOne({\n          user_id: (_client$auth$user = client.auth.user) === null || _client$auth$user === void 0 ? void 0 : _client$auth$user.id,\n          id: user_id,\n          email,\n          password,\n          accessToken\n        }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n      }\n    }).finally(() => {\n      setState(false);\n    });\n  };\n\n  return [isLoading, loadCustomUser];\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createCustomUser.tsx"],"names":["useState","store","dispatchDefaultUser","db","client","useSelector","getUserElements","payload","operation","commands","commandContext","jobTestContext","CreateCustomUser","environment","process","env","url","user","isLoading","setState","loadCustomUser","job","push","serviceId","parseInt","service","date","jobDate","deal","proTestContext","proBalance","console","log","fetch","method","body","JSON","stringify","then","res","json","responseContext","error","accessToken","password","model","user_id","email","dispatch","collection","insertOne","auth","id","result","insertedId","catch","err","finally"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nimport { db, client } from \"api/db-actions\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"store/selectors\";\n\ninterface contextType {\n  jobDate?: string; // example \"2020-03-06 14:00\"\n  businessModel?: number;\n  serviceId?: number;\n  proBalance?: number;\n  quoteId?: number;\n  countryId?: number;\n}\n\ninterface jobContextType {\n  operation?: string;\n  commands?: Array<string | undefined>;\n  commandContext?: contextType;\n  proTestContext?: {};\n}\n\nconst payload: {\n  operation: string;\n  commands: Array<string>;\n  commandContext: contextType;\n  jobTestContext: jobContextType;\n} = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n  commandContext: {},\n  jobTestContext: {},\n};\n\nexport function CreateCustomUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const user = useSelector(getUserElements);\n  const [isLoading, setState] = useState(false);\n\n  const loadCustomUser = () => {\n    /* if (user.country) {\n      payload.commands.push(\"WITHCOUNTRYID\");\n      payload.commandContext[\"countryId\"] = user.country;\n    } */\n    if (user.job) {\n      payload.commands.push(\"WITHJOB\");\n      payload.jobTestContext = {\n        operation: \"CREATEJOB\",\n        commands: [\"WITHSERVICEID\"],\n        commandContext: {\n          serviceId: parseInt(user.service),\n        },\n      };\n      if (user.date) {\n        payload.jobTestContext.commands?.push(\"WITHJOBDATE\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n      }\n      if (user.deal === 1) {\n        payload.jobTestContext.commands?.push(\"WITHDEAL\");\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: [\"CREATEPRO\"],\n          commands: [\"WITHCREDITCARD\", \"WITHBALANCE\"],\n          commandContext: { proBalance: 10000 },\n        };\n      } else if (user.deal === 0) {\n        payload.jobTestContext.commands?.push(\"WITHQUOTES\");\n      }\n      console.log(payload);\n    }\n\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({ user_id, email, password, accessToken })\n          );\n          db.collection(\"test\")\n            .insertOne({\n              user_id: client.auth.user?.id,\n              id: user_id,\n              email,\n              password,\n              accessToken,\n            })\n            .then((result) =>\n              console.log(\n                `Successfully inserted item with _id: ${result.insertedId}`\n              )\n            )\n            .catch((err) => console.error(`Failed to insert item: ${err}`));\n        }\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadCustomUser] as const;\n}\n"]},"metadata":{},"sourceType":"module"}