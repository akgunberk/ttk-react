{"ast":null,"code":"/* import * as Realm from \"realm-web\";\nimport assert from \"assert\";\n\n  const app: Realm.App = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\n\nexport async function loginEmailPassword(email: string, password: string) {\n\n  const credentials = Realm.Credentials.emailPassword(email, password);\n\n  try {\n\n    const user: Realm.User = await app.logIn(credentials);\n\n    assert(user.id === app.currentUser.id)\n    return user\n  } catch (err) {\n    console.error(\"Failed to log in\", err);\n  }\n}\n\nloginEmailPassword(\"joe.jasper@example.com\", \"passw0rd\").then(user => {\n\n  console.log(\"Successfully logged in!\", user)\n})\n\nexport function signUp() {\n  const user: Realm.User = app.currentUser;\n  const key: Realm.Auth.ApiKey = await user.apiKeys.create(\"apiKeyName\");\n} */\nimport { Stitch, RemoteMongoClient //AnonymousCredential,\n, UserPasswordCredential, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\nimport * as Realm from \"realm-web\";\nconst app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nconst user = app.currentUser;\n\nconst key = async () => await user.apiKeys.create(\"apiKeyName\");\n\nconsole.log(key());\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\nexport const db = client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\").db(\"ttk-ui-db\");\nconst collection = db.collection(\"test\");\nexport const auth = Stitch.defaultAppClient.auth;\nexport const emailPasswordClient = auth.getProviderClient(UserPasswordAuthProviderClient.factory);\nexport default collection;\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\"); // Confirm the user's email/password account\n\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  return emailPassClient.confirmUser(token, tokenId);\n}\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  emailPassClient.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/db/initDb.js"],"names":["Stitch","RemoteMongoClient","UserPasswordCredential","UserPasswordAuthProviderClient","Realm","app","App","id","user","currentUser","key","apiKeys","create","console","log","client","initializeDefaultAppClient","db","getServiceClient","factory","collection","auth","defaultAppClient","emailPasswordClient","getProviderClient","logDB","email","password","credential","authedUser","loginWithCredential","success","error","undefined","err","SignUp","registerWithEmail","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPassClient","resendConfirmation","sendResetPasswordEmail","then","catch"],"mappings":"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","sourcesContent":["/* import * as Realm from \"realm-web\";\nimport assert from \"assert\";\n\n  const app: Realm.App = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\n\nexport async function loginEmailPassword(email: string, password: string) {\n\n  const credentials = Realm.Credentials.emailPassword(email, password);\n\n  try {\n\n    const user: Realm.User = await app.logIn(credentials);\n\n    assert(user.id === app.currentUser.id)\n    return user\n  } catch (err) {\n    console.error(\"Failed to log in\", err);\n  }\n}\n\nloginEmailPassword(\"joe.jasper@example.com\", \"passw0rd\").then(user => {\n\n  console.log(\"Successfully logged in!\", user)\n})\n\nexport function signUp() {\n  const user: Realm.User = app.currentUser;\n  const key: Realm.Auth.ApiKey = await user.apiKeys.create(\"apiKeyName\");\n} */\n\nimport {\n  Stitch,\n  RemoteMongoClient,\n  //AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nimport * as Realm from \"realm-web\";\n\nconst app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nconst user = app.currentUser;\n\nconst key = async () => await user.apiKeys.create(\"apiKeyName\");\n\nconsole.log(key());\n\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nexport const db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui-db\");\n\nconst collection = db.collection(\"test\");\n\nexport const auth = Stitch.defaultAppClient.auth;\n\nexport const emailPasswordClient = auth.getProviderClient(\n  UserPasswordAuthProviderClient.factory\n);\n\nexport default collection;\n\nexport async function logDB(email, password) {\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}