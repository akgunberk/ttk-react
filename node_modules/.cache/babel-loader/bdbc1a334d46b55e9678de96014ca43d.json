{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { Application, collection } from \"core/initApp\";\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"]\n};\nexport function CreateDefaultUser(environment) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload)\n    }).then(res => res.json()).then(user => {\n      const {\n        responseContext,\n        error\n      } = user;\n      if (error) return;\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email,\n        first_name\n      } = model;\n\n      if (!error) {\n        var _Application$currentU;\n\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken,\n          name: first_name\n        }));\n        collection.insertOne({\n          user_id: (_Application$currentU = Application.currentUser) === null || _Application$currentU === void 0 ? void 0 : _Application$currentU.id,\n          id: user_id,\n          environment,\n          email,\n          password,\n          accessToken,\n          name: first_name\n        });\n      }\n    }).catch(error => {\n      console.log(error);\n    }).finally(() => {\n      setState(false);\n    });\n  };\n\n  return [isLoading, loadUser]; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/services/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","Application","collection","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","loadUser","fetch","method","body","JSON","stringify","then","res","json","user","responseContext","error","accessToken","password","model","user_id","email","first_name","dispatch","name","insertOne","currentUser","id","catch","console","log","finally"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AACA,SAASC,mBAAT,QAAoC,oBAApC;AACA,SAASC,WAAT,EAAsBC,UAAtB,QAAwC,cAAxC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,YADG;AAEdC,EAAAA,QAAQ,EAAE,CAAC,uBAAD,EAA0B,cAA1B;AAFI,CAAhB;AAKA,OAAO,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,GAA9C,CADqD,CACF;;AACnD,QAAMC,GAAG,GAAI,qBAAoBH,WAAY,UAA7C;AAEA,QAAM,CAACI,SAAD,EAAYC,QAAZ,IAAwBd,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMe,QAAQ,GAAG,MAAM;AACrBD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,KAAK,CAACJ,GAAD,EAAM;AACTK,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,OAAf;AAFG,KAAN,CAAL,CAIGgB,IAJH,CAISC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJjB,EAKGF,IALH,CAKSG,IAAD,IAAU;AACd,YAAM;AAAEC,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAA6BF,IAAnC;AACA,UAAIE,KAAJ,EAAW;AACX,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAmCJ,eAAe,CAAC,CAAD,CAAxD;AACA,YAAM;AAAEK,QAAAA,OAAF;AAAWC,QAAAA,KAAX;AAAkBC,QAAAA;AAAlB,UAAiCH,KAAvC;;AACA,UAAI,CAACH,KAAL,EAAY;AAAA;;AACVzB,QAAAA,KAAK,CAACgC,QAAN,CACE/B,mBAAmB,CAAC;AAClB4B,UAAAA,OADkB;AAElBC,UAAAA,KAFkB;AAGlBH,UAAAA,QAHkB;AAIlBD,UAAAA,WAJkB;AAKlBO,UAAAA,IAAI,EAAEF;AALY,SAAD,CADrB;AASA5B,QAAAA,UAAU,CAAC+B,SAAX,CAAqB;AACnBL,UAAAA,OAAO,2BAAE3B,WAAW,CAACiC,WAAd,0DAAE,sBAAyBC,EADf;AAEnBA,UAAAA,EAAE,EAAEP,OAFe;AAGnBrB,UAAAA,WAHmB;AAInBsB,UAAAA,KAJmB;AAKnBH,UAAAA,QALmB;AAMnBD,UAAAA,WANmB;AAOnBO,UAAAA,IAAI,EAAEF;AAPa,SAArB;AASD;AACF,KA9BH,EA+BGM,KA/BH,CA+BUZ,KAAD,IAAW;AAChBa,MAAAA,OAAO,CAACC,GAAR,CAAYd,KAAZ;AACD,KAjCH,EAkCGe,OAlCH,CAkCW,MAAM;AACb3B,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KApCH;AAqCD,GAvCD;;AAwCA,SAAO,CAACD,SAAD,EAAYE,QAAZ,CAAP,CA9CqD,CA8Cd;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { Application, collection } from \"core/initApp\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        if (error) return;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n            })\n          );\n          collection.insertOne({\n            user_id: Application.currentUser?.id,\n            id: user_id,\n            environment,\n            email,\n            password,\n            accessToken,\n            name: first_name,\n          });\n        }\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}