{"ast":null,"code":"import { Stitch, RemoteMongoClient //AnonymousCredential,\n, UserPasswordCredential, UserPasswordAuthProviderClient } from \"mongodb-stitch-browser-sdk\";\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\nexport const db = client.getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\").db(\"ttk-ui-db\");\nconst collection = db.collection(\"test\");\nexport const auth = Stitch.defaultAppClient.auth;\nexport const emailPasswordClient = auth.getProviderClient(UserPasswordAuthProviderClient.factory);\nexport default collection;\nexport async function logDB(email, password) {\n  const users = auth.listUsers();\n  console.log(users);\n  const credential = new UserPasswordCredential(email, password);\n\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\"); // Confirm the user's email/password account\n\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  return emailPassClient.confirmUser(token, tokenId);\n}\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(UserPasswordAuthProviderClient.factory);\n  emailPassClient.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/db/initDb.js"],"names":["Stitch","RemoteMongoClient","UserPasswordCredential","UserPasswordAuthProviderClient","client","initializeDefaultAppClient","db","getServiceClient","factory","collection","auth","defaultAppClient","emailPasswordClient","getProviderClient","logDB","email","password","users","listUsers","console","log","credential","authedUser","loginWithCredential","id","success","error","undefined","err","SignUp","registerWithEmail","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPassClient","resendConfirmation","sendResetPasswordEmail","then","catch"],"mappings":"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","sourcesContent":["import {\n  Stitch,\n  RemoteMongoClient,\n  //AnonymousCredential,\n  UserPasswordCredential,\n  UserPasswordAuthProviderClient,\n} from \"mongodb-stitch-browser-sdk\";\n\nexport const client = Stitch.initializeDefaultAppClient(\"ttk-ui-cvkwt\");\n\nexport const db = client\n  .getServiceClient(RemoteMongoClient.factory, \"mongodb-atlas\")\n  .db(\"ttk-ui-db\");\n\nconst collection = db.collection(\"test\");\n\nexport const auth = Stitch.defaultAppClient.auth;\n\nexport const emailPasswordClient = auth.getProviderClient(\n  UserPasswordAuthProviderClient.factory\n);\n\nexport default collection;\n\nexport async function logDB(email, password) {\n  const users = auth.listUsers();\n  console.log(users);\n  const credential = new UserPasswordCredential(email, password);\n  try {\n    const authedUser = await client.auth.loginWithCredential(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await emailPasswordClient.registerWithEmail(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  // Confirm the user's email/password account\n  const emailPassClient = Stitch.defaultAppClient.auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n  return emailPassClient.confirmUser(token, tokenId);\n}\n\nexport function resendConfirmation(email) {\n  const emailPassClient = auth.getProviderClient(\n    UserPasswordAuthProviderClient.factory\n  );\n\n  emailPassClient\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}