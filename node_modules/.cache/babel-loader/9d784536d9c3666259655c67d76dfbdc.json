{"ast":null,"code":"var _jsxFileName = \"/Users/berkakgun/Desktop/ttk/ttkui/src/components/display/Auth/AuthGuard.tsx\";\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { UserContext } from \"core/store/ContextApi/Context\";\nimport { Application } from \"core/initApp\";\nexport function AuthGuard(props) {\n  const appRef = useRef(Application);\n  const [user, setAuthState] = useState(Application.currentUser);\n  useEffect(() => {\n    setAuthState(Application.currentUser);\n  }, [appRef.current.currentUser]);\n\n  const logOut = async () => {\n    if (Application.currentUser) {\n      var _Application$currentU;\n\n      await ((_Application$currentU = Application.currentUser) === null || _Application$currentU === void 0 ? void 0 : _Application$currentU.logOut());\n      setAuthState(Application.currentUser);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(UserContext.Provider, {\n    value: {\n      user,\n      actions: {\n        logOut,\n        setAuthState\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n/* \nexport function AuthGuard(props: any) {\n   const appRef = useRef(Application);\n  const [authState, setAuthState] = useState({\n    isLoggedIn: Application.currentUser?.state === \"active\",\n    currentUser: Application.currentUser,\n  });\n  // eslint-disable-next-line\n\n  const handleLogout = () => {\n    Application.currentUser?.logOut();\n    setAuthState({ isLoggedIn: false, currentUser: null });\n  };\n\n  const authInfo = React.useMemo(() => {\n    const { isLoggedIn, currentUser } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, setAuthState },\n    };\n    return value;\n  }, [authState]);\n\n  return (\n    <UserContext.Provider value={authInfo}>\n      {props.children}\n    </UserContext.Provider>\n  );\n} */","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/display/Auth/AuthGuard.tsx"],"names":["React","useState","useEffect","useRef","UserContext","Application","AuthGuard","props","appRef","user","setAuthState","currentUser","current","logOut","actions","children"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,SAASC,WAAT,QAA4B,+BAA5B;AACA,SAASC,WAAT,QAA4B,cAA5B;AAGA,OAAO,SAASC,SAAT,CAAmBC,KAAnB,EAA+B;AACpC,QAAMC,MAAM,GAAGL,MAAM,CAACE,WAAD,CAArB;AAEA,QAAM,CAACI,IAAD,EAAOC,YAAP,IAAuBT,QAAQ,CAG3BI,WAAW,CAACM,WAHe,CAArC;AAKAT,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,YAAY,CAACL,WAAW,CAACM,WAAb,CAAZ;AACD,GAFQ,EAEN,CAACH,MAAM,CAACI,OAAP,CAAeD,WAAhB,CAFM,CAAT;;AAIA,QAAME,MAAM,GAAG,YAAY;AACzB,QAAIR,WAAW,CAACM,WAAhB,EAA6B;AAAA;;AAC3B,sCAAMN,WAAW,CAACM,WAAlB,0DAAM,sBAAyBE,MAAzB,EAAN;AACAH,MAAAA,YAAY,CAACL,WAAW,CAACM,WAAb,CAAZ;AACD;AACF,GALD;;AAOA,sBACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAE;AAAEF,MAAAA,IAAF;AAAQK,MAAAA,OAAO,EAAE;AAAED,QAAAA,MAAF;AAAUH,QAAAA;AAAV;AAAjB,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,KAAK,CAACQ,QADT,CADF;AAKD;AAED","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport { UserContext } from \"core/store/ContextApi/Context\";\nimport { Application } from \"core/initApp\";\nimport { User } from \"realm-web\";\n\nexport function AuthGuard(props: any) {\n  const appRef = useRef(Application);\n\n  const [user, setAuthState] = useState<User<\n    Realm.DefaultFunctionsFactory,\n    any\n  > | null>(Application.currentUser);\n\n  useEffect(() => {\n    setAuthState(Application.currentUser);\n  }, [appRef.current.currentUser]);\n\n  const logOut = async () => {\n    if (Application.currentUser) {\n      await Application.currentUser?.logOut();\n      setAuthState(Application.currentUser);\n    }\n  };\n\n  return (\n    <UserContext.Provider value={{ user, actions: { logOut, setAuthState } }}>\n      {props.children}\n    </UserContext.Provider>\n  );\n}\n\n/* \nexport function AuthGuard(props: any) {\n   const appRef = useRef(Application);\n  const [authState, setAuthState] = useState({\n    isLoggedIn: Application.currentUser?.state === \"active\",\n    currentUser: Application.currentUser,\n  });\n  // eslint-disable-next-line\n\n  const handleLogout = () => {\n    Application.currentUser?.logOut();\n    setAuthState({ isLoggedIn: false, currentUser: null });\n  };\n\n  const authInfo = React.useMemo(() => {\n    const { isLoggedIn, currentUser } = authState;\n    const value = {\n      isLoggedIn,\n      currentUser,\n      actions: { handleLogout, setAuthState },\n    };\n    return value;\n  }, [authState]);\n\n  return (\n    <UserContext.Provider value={authInfo}>\n      {props.children}\n    </UserContext.Provider>\n  );\n} */\n"]},"metadata":{},"sourceType":"module"}