{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { dbParams } from \"./constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(dbParams.service);\nexport const collection = mongo.db(dbParams.database).collection(dbParams.collection);\nexport async function logIn(email, password) {\n  const credential = Realm.Credentials.emailPassword(email, password);\n\n  try {\n    const authedUser = await app.logIn(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function sendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/db/initDb.js"],"names":["Realm","dbParams","app","App","id","mongo","services","mongodb","service","collection","db","database","logIn","email","password","credential","Credentials","emailPassword","authedUser","console","log","success","error","undefined","err","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPasswordAuth","sendResetPasswordEmail","then","catch"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,SAASC,QAAT,QAAyB,aAAzB;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACG,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaC,OAAb,CAAqBN,QAAQ,CAACO,OAA9B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGJ,KAAK,CAC5BK,EADuB,CACpBT,QAAQ,CAACU,QADW,EAEvBF,UAFuB,CAEZR,QAAQ,CAACQ,UAFG,CAAnB;AAIP,OAAO,eAAeG,KAAf,CAAqBC,KAArB,EAA4BC,QAA5B,EAAsC;AAC3C,QAAMC,UAAU,GAAGf,KAAK,CAACgB,WAAN,CAAkBC,aAAlB,CAAgCJ,KAAhC,EAAuCC,QAAvC,CAAnB;;AACA,MAAI;AACF,UAAMI,UAAU,GAAG,MAAMhB,GAAG,CAACU,KAAJ,CAAUG,UAAV,CAAzB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCF,UAAU,CAACd,EAAG,EAA7D;AACA,WAAO;AAAEiB,MAAAA,OAAO,EAAE,IAAX;AAAiBjB,MAAAA,EAAE,EAAEc,UAAU,CAACd,EAAhC;AAAoCkB,MAAAA,KAAK,EAAEC;AAA3C,KAAP;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZL,IAAAA,OAAO,CAACG,KAAR,CAAe,4BAA2BE,GAAI,EAA9C;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACD;AACF;AAED,OAAO,eAAeC,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAO/B,GAAG,CAACiC,iBAAJ,CAAsBV,WAAtB,CAAkCO,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CAAgCvB,KAAhC,EAAuC;AAC5C,SAAOX,GAAG,CAACiC,iBAAJ,CACJC,sBADI,CACmBvB,KADnB,EAEJwB,IAFI,CAEC,MAAM;AACVlB,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJkB,KALI,CAKGd,GAAD,IAAS;AACdL,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDI,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { dbParams } from \"./constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(dbParams.service);\n\nexport const collection = mongo\n  .db(dbParams.database)\n  .collection(dbParams.collection);\n\nexport async function logIn(email, password) {\n  const credential = Realm.Credentials.emailPassword(email, password);\n  try {\n    const authedUser = await app.logIn(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function sendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}