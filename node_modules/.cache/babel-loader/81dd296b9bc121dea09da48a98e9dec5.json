{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (err) {\n    console.log(err);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function logIn(email, password) {\n  const credential = Realm.Credentials.emailPassword(email, password);\n\n  try {\n    const authedUser = await app.logIn(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return {\n      success: true,\n      id: authedUser.id,\n      error: undefined\n    };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return {\n      success: false,\n      error: err\n    };\n  }\n}\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function sendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/db/initApp.js"],"names":["Realm","mongodb","app","App","id","mongo","services","service","collection","db","database","SignUp","email","password","emailPasswordAuth","registerUser","success","error","undefined","err","console","log","logIn","credential","Credentials","emailPassword","authedUser","confirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","sendResetPasswordEmail","then","catch"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,SAASC,OAAT,QAAwB,aAAxB;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACG,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaL,OAAb,CAAqBA,OAAO,CAACM,OAA7B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,EADuB,CACpBR,OAAO,CAACS,QADY,EAEvBF,UAFuB,CAEZP,OAAO,CAACO,UAFI,CAAnB;AAIP,OAAO,eAAeG,MAAf,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAI;AACF,UAAMX,GAAG,CAACY,iBAAJ,CAAsBC,YAAtB,CAAmCH,KAAnC,EAA0CC,QAA1C,CAAN;AACA,WAAO;AAAEG,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAEC;AAAxB,KAAP;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACD;AACF;AAED,OAAO,eAAeG,KAAf,CAAqBV,KAArB,EAA4BC,QAA5B,EAAsC;AAC3C,QAAMU,UAAU,GAAGvB,KAAK,CAACwB,WAAN,CAAkBC,aAAlB,CAAgCb,KAAhC,EAAuCC,QAAvC,CAAnB;;AACA,MAAI;AACF,UAAMa,UAAU,GAAG,MAAMxB,GAAG,CAACoB,KAAJ,CAAUC,UAAV,CAAzB;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAa,mCAAkCK,UAAU,CAACtB,EAAG,EAA7D;AACA,WAAO;AAAEY,MAAAA,OAAO,EAAE,IAAX;AAAiBZ,MAAAA,EAAE,EAAEsB,UAAU,CAACtB,EAAhC;AAAoCa,MAAAA,KAAK,EAAEC;AAA3C,KAAP;AACD,GAJD,CAIE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACH,KAAR,CAAe,4BAA2BE,GAAI,EAA9C;AACA,WAAO;AAAEH,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA,KAAK,EAAEE;AAAzB,KAAP;AACD;AACF;AAED,OAAO,eAAeQ,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAOjC,GAAG,CAACY,iBAAJ,CAAsBa,WAAtB,CAAkCO,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASC,sBAAT,CAAgCzB,KAAhC,EAAuC;AAC5C,SAAOV,GAAG,CAACY,iBAAJ,CACJuB,sBADI,CACmBzB,KADnB,EAEJ0B,IAFI,CAEC,MAAM;AACVlB,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJkB,KALI,CAKGpB,GAAD,IAAS;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDF,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (err) {\n    console.log(err);\n    return { success: false, error: err };\n  }\n}\n\nexport async function logIn(email, password) {\n  const credential = Realm.Credentials.emailPassword(email, password);\n  try {\n    const authedUser = await app.logIn(credential);\n    console.log(`successfully logged in with id: ${authedUser.id}`);\n    return { success: true, id: authedUser.id, error: undefined };\n  } catch (err) {\n    console.error(`login failed with error: ${err}`);\n    return { success: false, error: err };\n  }\n}\n\nexport async function confirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function sendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}