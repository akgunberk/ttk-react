{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"]\n};\nexport function CreateDefaultUser(environment) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload)\n    }).then(res => res.json()).then(user => {\n      console.log(user);\n      const {\n        responseContext,\n        error\n      } = user;\n      if (error) return;\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email\n      } = model;\n\n      if (!error) {\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken\n        }));\n      }\n    }).catch(() => {\n      store.dispatch(dispatchDefaultUser({\n        user_id: \"123\",\n        email: \"12312\",\n        password: \"12313\",\n        accessToken: \"accessToken\"\n      }));\n    }).finally(() => {\n      setState(false);\n    });\n  };\n\n  return [isLoading, loadUser]; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/components/hooks/createDefaultUser.tsx"],"names":["useState","store","dispatchDefaultUser","payload","operation","commands","CreateDefaultUser","environment","process","env","url","isLoading","setState","loadUser","fetch","method","body","JSON","stringify","then","res","json","user","console","log","responseContext","error","accessToken","password","model","user_id","email","dispatch","catch","finally"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,mBAAT,QAAoC,eAApC;AAEA,MAAMC,OAAO,GAAG;AACdC,EAAAA,SAAS,EAAE,YADG;AAEdC,EAAAA,QAAQ,EAAE,CAAC,uBAAD,EAA0B,cAA1B;AAFI,CAAhB;AAKA,OAAO,SAASC,iBAAT,CAA2BC,WAA3B,EAAgD;AACrDC,EAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ,IAA8C,GAA9C,CADqD,CACF;;AACnD,QAAMC,GAAG,GAAI,qBAAoBH,WAAY,UAA7C;AAEA,QAAM,CAACI,SAAD,EAAYC,QAAZ,IAAwBZ,QAAQ,CAAC,KAAD,CAAtC;;AAEA,QAAMa,QAAQ,GAAG,MAAM;AACrBD,IAAAA,QAAQ,CAAC,IAAD,CAAR;AACAE,IAAAA,KAAK,CAACJ,GAAD,EAAM;AACTK,MAAAA,MAAM,EAAE,MADC;AAETC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAef,OAAf;AAFG,KAAN,CAAL,CAIGgB,IAJH,CAISC,GAAD,IAASA,GAAG,CAACC,IAAJ,EAJjB,EAKGF,IALH,CAKSG,IAAD,IAAU;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,YAAM;AAAEG,QAAAA,eAAF;AAAmBC,QAAAA;AAAnB,UAA6BJ,IAAnC;AACA,UAAII,KAAJ,EAAW;AACX,YAAM;AAAEC,QAAAA,WAAF;AAAeC,QAAAA,QAAf;AAAyBC,QAAAA;AAAzB,UAAmCJ,eAAe,CAAC,CAAD,CAAxD;AACA,YAAM;AAAEK,QAAAA,OAAF;AAAWC,QAAAA;AAAX,UAAqBF,KAA3B;;AACA,UAAI,CAACH,KAAL,EAAY;AACVzB,QAAAA,KAAK,CAAC+B,QAAN,CACE9B,mBAAmB,CAAC;AAAE4B,UAAAA,OAAF;AAAWC,UAAAA,KAAX;AAAkBH,UAAAA,QAAlB;AAA4BD,UAAAA;AAA5B,SAAD,CADrB;AAGD;AACF,KAhBH,EAiBGM,KAjBH,CAiBS,MAAM;AACXhC,MAAAA,KAAK,CAAC+B,QAAN,CACE9B,mBAAmB,CAAC;AAClB4B,QAAAA,OAAO,EAAE,KADS;AAElBC,QAAAA,KAAK,EAAE,OAFW;AAGlBH,QAAAA,QAAQ,EAAE,OAHQ;AAIlBD,QAAAA,WAAW,EAAE;AAJK,OAAD,CADrB;AAQD,KA1BH,EA2BGO,OA3BH,CA2BW,MAAM;AACbtB,MAAAA,QAAQ,CAAC,KAAD,CAAR;AACD,KA7BH;AA8BD,GAhCD;;AAiCA,SAAO,CAACD,SAAD,EAAYE,QAAZ,CAAP,CAvCqD,CAuCd;AACxC","sourcesContent":["import { useState } from \"react\";\nimport store from \"store/index\";\nimport { dispatchDefaultUser } from \"store/actions\";\n\nconst payload = {\n  operation: \"CREATEUSER\",\n  commands: [\"WITHPHONECONFIRMATION\", \"WITHPASSWORD\"],\n};\n\nexport function CreateDefaultUser(environment: string) {\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const [isLoading, setState] = useState(false);\n\n  const loadUser = () => {\n    setState(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        console.log(user);\n        const { responseContext, error } = user;\n        if (error) return;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({ user_id, email, password, accessToken })\n          );\n        }\n      })\n      .catch(() => {\n        store.dispatch(\n          dispatchDefaultUser({\n            user_id: \"123\",\n            email: \"12312\",\n            password: \"12313\",\n            accessToken: \"accessToken\",\n          })\n        );\n      })\n      .finally(() => {\n        setState(false);\n      });\n  };\n  return [isLoading, loadUser] as const; // infers [boolean, typeof load] instead of (boolean | typeof load)[]\n}\n"]},"metadata":{},"sourceType":"module"}