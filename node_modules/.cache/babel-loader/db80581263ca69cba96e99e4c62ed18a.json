{"ast":null,"code":"import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { collection, Application } from \"core/initApp\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"core/store/selectors\";\nimport { DefaultPayload } from \"./shared\";\nimport { With, Create } from \"./models\";\nexport function CreateCustomUser(environment) {\n  const payload = JSON.parse(JSON.stringify(DefaultPayload));\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n\n  const url = `https://ttk.armut.${environment}/operate`;\n  const user = useSelector(getUserElements);\n  const [isLoading, setLoading] = useState(false);\n  let features = [\"country\", \"job\", \"date\", \"deal\"];\n\n  const loadCustomUser = () => {\n    /*  if (user.country) {\n      payload.commands?.push(With.COUNTRY);\n      payload.commandContext = {\n        ...payload.commandContext,\n        countryId: user.country,\n      };\n    } */\n    if (user.job) {\n      var _payload$commands;\n\n      (_payload$commands = payload.commands) === null || _payload$commands === void 0 ? void 0 : _payload$commands.push(With.JOB);\n      payload.jobTestContext = {\n        operation: Create.JOB,\n        commands: [With.SERVICEID],\n        commandContext: {\n          serviceId: parseInt(user.service)\n        }\n      };\n\n      if (user.date) {\n        var _payload$jobTestConte;\n\n        (_payload$jobTestConte = payload.jobTestContext.commands) === null || _payload$jobTestConte === void 0 ? void 0 : _payload$jobTestConte.push(With.JOBDATE);\n        payload.jobTestContext.commandContext = { ...payload.jobTestContext.commandContext,\n          jobDate: user.date\n        };\n      }\n\n      if (user.deal) {\n        var _payload$jobTestConte2;\n\n        (_payload$jobTestConte2 = payload.jobTestContext.commands) === null || _payload$jobTestConte2 === void 0 ? void 0 : _payload$jobTestConte2.push(With.DEAL);\n        payload.jobTestContext.commandContext = { ...payload.jobTestContext.commandContext,\n          jobDate: user.date\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: Create.PRO,\n          commands: [With.CREDITCARD, With.BALANCE],\n          commandContext: {\n            proBalance: 10000\n          }\n        };\n      } else if (!user.deal) {\n        var _payload$jobTestConte3;\n\n        (_payload$jobTestConte3 = payload.jobTestContext.commands) === null || _payload$jobTestConte3 === void 0 ? void 0 : _payload$jobTestConte3.push(With.QUOTES);\n      }\n    }\n\n    console.log(payload);\n    setLoading(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload)\n    }).then(res => res.json()).then(user => {\n      const {\n        responseContext,\n        error\n      } = user;\n      const {\n        accessToken,\n        password,\n        model\n      } = responseContext[0];\n      const {\n        user_id,\n        email,\n        first_name\n      } = model;\n\n      if (!error) {\n        var _Application$currentU;\n\n        store.dispatch(dispatchDefaultUser({\n          user_id,\n          email,\n          password,\n          accessToken,\n          name: first_name\n        }));\n        collection.insertOne({\n          user_id: (_Application$currentU = Application.currentUser) === null || _Application$currentU === void 0 ? void 0 : _Application$currentU.id,\n          id: user_id,\n          email,\n          password,\n          accessToken,\n          first_name\n        }).then(result => console.log(`Successfully inserted item with _id: ${result.insertedId}`)).catch(err => console.error(`Failed to insert item: ${err}`));\n      }\n    }).finally(() => {\n      setLoading(false);\n    });\n  };\n\n  return [isLoading, loadCustomUser];\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/services/createCustomUser.tsx"],"names":["useState","store","dispatchDefaultUser","collection","Application","useSelector","getUserElements","DefaultPayload","With","Create","CreateCustomUser","environment","payload","JSON","parse","stringify","process","env","url","user","isLoading","setLoading","features","loadCustomUser","job","commands","push","JOB","jobTestContext","operation","SERVICEID","commandContext","serviceId","parseInt","service","date","JOBDATE","jobDate","deal","DEAL","proTestContext","PRO","CREDITCARD","BALANCE","proBalance","QUOTES","console","log","fetch","method","body","then","res","json","responseContext","error","accessToken","password","model","user_id","email","first_name","dispatch","name","insertOne","currentUser","id","result","insertedId","catch","err","finally"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { collection, Application } from \"core/initApp\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"core/store/selectors\";\nimport { DefaultPayload } from \"./shared\";\nimport { Payload, With, Create } from \"./models\";\n\nexport function CreateCustomUser(environment: string) {\n  const payload: Payload = JSON.parse(JSON.stringify(DefaultPayload));\n\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const user = useSelector(getUserElements);\n  const [isLoading, setLoading] = useState(false);\n\n  let features = [\"country\", \"job\", \"date\", \"deal\"];\n\n  const loadCustomUser = () => {\n    /*  if (user.country) {\n      payload.commands?.push(With.COUNTRY);\n      payload.commandContext = {\n        ...payload.commandContext,\n        countryId: user.country,\n      };\n    } */\n    if (user.job) {\n      payload.commands?.push(With.JOB);\n      payload.jobTestContext = {\n        operation: Create.JOB,\n        commands: [With.SERVICEID],\n        commandContext: {\n          serviceId: parseInt(user.service),\n        },\n      };\n      if (user.date) {\n        payload.jobTestContext.commands?.push(With.JOBDATE);\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n      }\n      if (user.deal) {\n        payload.jobTestContext.commands?.push(With.DEAL);\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: Create.PRO,\n          commands: [With.CREDITCARD, With.BALANCE],\n          commandContext: { proBalance: 10000 },\n        };\n      } else if (!user.deal) {\n        payload.jobTestContext.commands?.push(With.QUOTES);\n      }\n    }\n    console.log(payload);\n\n    setLoading(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n            })\n          );\n          collection\n            .insertOne({\n              user_id: Application.currentUser?.id,\n              id: user_id,\n              email,\n              password,\n              accessToken,\n              first_name,\n            })\n            .then((result) =>\n              console.log(\n                `Successfully inserted item with _id: ${result.insertedId}`\n              )\n            )\n            .catch((err) => console.error(`Failed to insert item: ${err}`));\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n  return [isLoading, loadCustomUser] as const;\n}\n"]},"metadata":{},"sourceType":"module"}