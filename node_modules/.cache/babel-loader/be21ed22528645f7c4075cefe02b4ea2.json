{"ast":null,"code":"import _regeneratorRuntime from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import*as Realm from\"realm-web\";import{mongodb}from\"./db/constants\";import{redirect_uri,client_id,redirect_g}from\"assets/constants\";export var app=new Realm.App({id:\"ttk-ui-cvkwt\"});export var mongo=app.services.mongodb(mongodb.service);export var collection=mongo.db(mongodb.database).collection(mongodb.collection);export function getGoogleAccessToken(){// Google's OAuth 2.0 endpoint for requesting an access token\nvar oauth2Endpoint=\"https://accounts.google.com/o/oauth2/v2/auth\";// Create <form> element to submit parameters to OAuth 2.0 endpoint.\nvar form=document.createElement(\"form\");form.setAttribute(\"method\",\"GET\");// Send as a GET request.\nform.setAttribute(\"action\",oauth2Endpoint);// Parameters to pass to OAuth 2.0 endpoint.\nvar params={client_id:client_id,redirect_uri:redirect_g,response_type:\"token\",scope:\"https://www.googleapis.com/auth/drive.metadata.readonly\",include_granted_scopes:\"true\"};// Add form parameters as hidden input values.\nfor(var p in params){var input=document.createElement(\"input\");input.setAttribute(\"type\",\"hidden\");input.setAttribute(\"name\",p);input.setAttribute(\"value\",params[p]);form.appendChild(input);}// Add form to page and submit it to open the OAuth 2.0 endpoint.\ndocument.body.appendChild(form);form.submit();}export function LoginWithGoogle(){return _LoginWithGoogle.apply(this,arguments);}function _LoginWithGoogle(){_LoginWithGoogle=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var credentials;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:try{credentials=Realm.Credentials.google(redirect_uri);}catch(error){console.log(error);}debugger;_context.next=4;return app.logIn(credentials).then(function(user){console.log(\"Logged in with id: \".concat(user.id));});case 4:return _context.abrupt(\"return\",_context.sent);case 5:case\"end\":return _context.stop();}}},_callee);}));return _LoginWithGoogle.apply(this,arguments);}export function SignUp(_x,_x2){return _SignUp.apply(this,arguments);}function _SignUp(){_SignUp=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(email,password){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:_context2.prev=0;_context2.next=3;return app.emailPasswordAuth.registerUser(email,password);case 3:return _context2.abrupt(\"return\",{success:true,error:undefined});case 6:_context2.prev=6;_context2.t0=_context2[\"catch\"](0);console.log(_context2.t0);return _context2.abrupt(\"return\",{success:false,error:_context2.t0});case 10:case\"end\":return _context2.stop();}}},_callee2,null,[[0,6]]);}));return _SignUp.apply(this,arguments);}export function ConfirmUser(){return _ConfirmUser.apply(this,arguments);}function _ConfirmUser(){_ConfirmUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee3(){var url,params,token,tokenId;return _regeneratorRuntime.wrap(function _callee3$(_context3){while(1){switch(_context3.prev=_context3.next){case 0:url=window.location.search;params=new URLSearchParams(url);token=params.get(\"token\");tokenId=params.get(\"tokenId\");return _context3.abrupt(\"return\",app.emailPasswordAuth.confirmUser(token,tokenId));case 5:case\"end\":return _context3.stop();}}},_callee3);}));return _ConfirmUser.apply(this,arguments);}export function SendResetPasswordEmail(email){return app.emailPasswordAuth.sendResetPasswordEmail(email).then(function(){console.log(\"Successfully sent password reset email!\");}).catch(function(err){console.log(\"Error sending password reset email:\",err);});}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","redirect_uri","client_id","redirect_g","app","App","id","mongo","services","service","collection","db","database","getGoogleAccessToken","oauth2Endpoint","form","document","createElement","setAttribute","params","response_type","scope","include_granted_scopes","p","input","appendChild","body","submit","LoginWithGoogle","credentials","Credentials","google","error","console","log","logIn","then","user","SignUp","email","password","emailPasswordAuth","registerUser","success","undefined","ConfirmUser","url","window","location","search","URLSearchParams","token","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","catch","err"],"mappings":"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","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri, client_id, redirect_g } from \"assets/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\n  // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n  form.setAttribute(\"action\", oauth2Endpoint);\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_g,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n}\n\nexport async function LoginWithGoogle() {\n  let credentials;\n  try {\n    credentials = Realm.Credentials.google(redirect_uri);\n  } catch (error) {\n    console.log(error);\n  }\n  debugger;\n  return await app.logIn(credentials).then((user) => {\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}