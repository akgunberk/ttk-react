{"ast":null,"code":"import { EJSON } from 'bson'; ////////////////////////////////////////////////////////////////////////////\n\n/**\n * Serialize an object containing BSON types into extended-JSON.\n *\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\n\nfunction serialize(obj) {\n  return EJSON.serialize(obj);\n}\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n *\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\n\n\nfunction deserialize(obj) {\n  if (Array.isArray(obj)) {\n    return obj.map(doc => EJSON.deserialize(doc));\n  } else {\n    return EJSON.deserialize(obj);\n  }\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\n\n\nconst RESERVED_NAMES = [\"inspect\", \"callFunction\"];\n/**\n * Remove the key for any fields with undefined values.\n *\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\n\nfunction cleanArgs(args) {\n  for (const arg of args) {\n    if (typeof arg === \"object\") {\n      for (const [key, value] of Object.entries(arg)) {\n        if (value === undefined) {\n          delete arg[key];\n        }\n      }\n    }\n  }\n\n  return args;\n}\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n *\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\n\n\nfunction cleanArgsAndSerialize(args) {\n  const cleaned = cleanArgs(args);\n  return cleaned.map(arg => typeof arg === \"object\" ? serialize(arg) : arg);\n}\n/**\n * Defines how functions are called.\n */\n\n\nclass FunctionsFactory {\n  /**\n   * Construct a functions factory.\n   *\n   * @param transport The underlying transport to use when sending requests.\n   * @param config Additional configuration parameters.\n   */\n  constructor(transport, config = {}) {\n    this.transport = transport;\n    this.serviceName = config.serviceName;\n    this.argsTransformation = config.argsTransformation || cleanArgsAndSerialize;\n    this.responseTransformation = config.responseTransformation || deserialize;\n  }\n  /**\n   * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n   *\n   * @param transport The underlying transport to use when requesting.\n   * @param config Additional configuration parameters.\n   * @returns The newly created factory of functions.\n   */\n\n\n  static create(transport, config = {}) {\n    // Create a proxy, wrapping a simple object returning methods that calls functions\n    // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n    const factory = new FunctionsFactory(transport, config); // Wrap the factory in a proxy that calls the internal call method\n\n    return new Proxy(factory, {\n      get(target, p, receiver) {\n        if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n          return target.callFunction.bind(target, p);\n        } else {\n          const prop = Reflect.get(target, p, receiver);\n          return typeof prop === \"function\" ? prop.bind(target) : prop;\n        }\n      }\n\n    });\n  }\n  /**\n   * Call a remote function by it's name.\n   *\n   * @param name Name of the remote function.\n   * @param args Arguments to pass to the remote function.\n   * @returns A promise of the value returned when executing the remote function.\n   */\n\n\n  async callFunction(name, ...args) {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n    const body = {\n      name,\n      arguments: this.argsTransformation ? this.argsTransformation(args) : args\n    };\n\n    if (this.serviceName) {\n      body.service = this.serviceName;\n    }\n\n    const response = await this.transport.fetch({\n      method: \"POST\",\n      path: \"/functions/call\",\n      body\n    }); // Transform the response, if needed\n\n    if (this.responseTransformation) {\n      return this.responseTransformation(response);\n    } else {\n      return response;\n    }\n  }\n\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function (path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar base64 = createCommonjsModule(function (module, exports) {\n  (function (global, factory) {\n    module.exports = factory(global);\n  })(typeof self !== 'undefined' ? self : typeof window !== 'undefined' ? window : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal : commonjsGlobal, function (global) {\n    // existing version for noConflict()\n    global = global || {};\n    var _Base64 = global.Base64;\n    var version = \"2.6.3\"; // constants\n\n    var b64chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\n    var b64tab = function (bin) {\n      var t = {};\n\n      for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n\n      return t;\n    }(b64chars);\n\n    var fromCharCode = String.fromCharCode; // encoder stuff\n\n    var cb_utob = function (c) {\n      if (c.length < 2) {\n        var cc = c.charCodeAt(0);\n        return cc < 0x80 ? c : cc < 0x800 ? fromCharCode(0xc0 | cc >>> 6) + fromCharCode(0x80 | cc & 0x3f) : fromCharCode(0xe0 | cc >>> 12 & 0x0f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);\n      } else {\n        var cc = 0x10000 + (c.charCodeAt(0) - 0xD800) * 0x400 + (c.charCodeAt(1) - 0xDC00);\n        return fromCharCode(0xf0 | cc >>> 18 & 0x07) + fromCharCode(0x80 | cc >>> 12 & 0x3f) + fromCharCode(0x80 | cc >>> 6 & 0x3f) + fromCharCode(0x80 | cc & 0x3f);\n      }\n    };\n\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n\n    var utob = function (u) {\n      return u.replace(re_utob, cb_utob);\n    };\n\n    var cb_encode = function (ccc) {\n      var padlen = [0, 2, 1][ccc.length % 3],\n          ord = ccc.charCodeAt(0) << 16 | (ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8 | (ccc.length > 2 ? ccc.charCodeAt(2) : 0),\n          chars = [b64chars.charAt(ord >>> 18), b64chars.charAt(ord >>> 12 & 63), padlen >= 2 ? '=' : b64chars.charAt(ord >>> 6 & 63), padlen >= 1 ? '=' : b64chars.charAt(ord & 63)];\n      return chars.join('');\n    };\n\n    var btoa = global.btoa && typeof global.btoa == 'function' ? function (b) {\n      return global.btoa(b);\n    } : function (b) {\n      if (b.match(/[^\\x00-\\xFF]/)) throw new RangeError('The string contains invalid characters.');\n      return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n\n    var _encode = function (u) {\n      return btoa(utob(String(u)));\n    };\n\n    var mkUriSafe = function (b64) {\n      return b64.replace(/[+\\/]/g, function (m0) {\n        return m0 == '+' ? '-' : '_';\n      }).replace(/=/g, '');\n    };\n\n    var encode = function (u, urisafe) {\n      return urisafe ? mkUriSafe(_encode(u)) : _encode(u);\n    };\n\n    var encodeURI = function (u) {\n      return encode(u, true);\n    };\n\n    var fromUint8Array;\n    if (global.Uint8Array) fromUint8Array = function (a, urisafe) {\n      // return btoa(fromCharCode.apply(null, a));\n      var b64 = '';\n\n      for (var i = 0, l = a.length; i < l; i += 3) {\n        var a0 = a[i],\n            a1 = a[i + 1],\n            a2 = a[i + 2];\n        var ord = a0 << 16 | a1 << 8 | a2;\n        b64 += b64chars.charAt(ord >>> 18) + b64chars.charAt(ord >>> 12 & 63) + (typeof a1 != 'undefined' ? b64chars.charAt(ord >>> 6 & 63) : '=') + (typeof a2 != 'undefined' ? b64chars.charAt(ord & 63) : '=');\n      }\n\n      return urisafe ? mkUriSafe(b64) : b64;\n    }; // decoder stuff\n\n    var re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n\n    var cb_btou = function (cccc) {\n      switch (cccc.length) {\n        case 4:\n          var cp = (0x07 & cccc.charCodeAt(0)) << 18 | (0x3f & cccc.charCodeAt(1)) << 12 | (0x3f & cccc.charCodeAt(2)) << 6 | 0x3f & cccc.charCodeAt(3),\n              offset = cp - 0x10000;\n          return fromCharCode((offset >>> 10) + 0xD800) + fromCharCode((offset & 0x3FF) + 0xDC00);\n\n        case 3:\n          return fromCharCode((0x0f & cccc.charCodeAt(0)) << 12 | (0x3f & cccc.charCodeAt(1)) << 6 | 0x3f & cccc.charCodeAt(2));\n\n        default:\n          return fromCharCode((0x1f & cccc.charCodeAt(0)) << 6 | 0x3f & cccc.charCodeAt(1));\n      }\n    };\n\n    var btou = function (b) {\n      return b.replace(re_btou, cb_btou);\n    };\n\n    var cb_decode = function (cccc) {\n      var len = cccc.length,\n          padlen = len % 4,\n          n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0) | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0) | (len > 2 ? b64tab[cccc.charAt(2)] << 6 : 0) | (len > 3 ? b64tab[cccc.charAt(3)] : 0),\n          chars = [fromCharCode(n >>> 16), fromCharCode(n >>> 8 & 0xff), fromCharCode(n & 0xff)];\n      chars.length -= [0, 0, 2, 1][padlen];\n      return chars.join('');\n    };\n\n    var _atob = global.atob && typeof global.atob == 'function' ? function (a) {\n      return global.atob(a);\n    } : function (a) {\n      return a.replace(/\\S{1,4}/g, cb_decode);\n    };\n\n    var atob = function (a) {\n      return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n    };\n\n    var _decode = function (a) {\n      return btou(_atob(a));\n    };\n\n    var _fromURI = function (a) {\n      return String(a).replace(/[-_]/g, function (m0) {\n        return m0 == '-' ? '+' : '/';\n      }).replace(/[^A-Za-z0-9\\+\\/]/g, '');\n    };\n\n    var decode = function (a) {\n      return _decode(_fromURI(a));\n    };\n\n    var toUint8Array;\n    if (global.Uint8Array) toUint8Array = function (a) {\n      return Uint8Array.from(atob(_fromURI(a)), function (c) {\n        return c.charCodeAt(0);\n      });\n    };\n\n    var noConflict = function () {\n      var Base64 = global.Base64;\n      global.Base64 = _Base64;\n      return Base64;\n    }; // export Base64\n\n\n    global.Base64 = {\n      VERSION: version,\n      atob: atob,\n      btoa: btoa,\n      fromBase64: decode,\n      toBase64: encode,\n      utob: utob,\n      encode: encode,\n      encodeURI: encodeURI,\n      btou: btou,\n      decode: decode,\n      noConflict: noConflict,\n      fromUint8Array: fromUint8Array,\n      toUint8Array: toUint8Array\n    }; // if ES5 is available, make Base64.extendString() available\n\n    if (typeof Object.defineProperty === 'function') {\n      var noEnum = function (v) {\n        return {\n          value: v,\n          enumerable: false,\n          writable: true,\n          configurable: true\n        };\n      };\n\n      global.Base64.extendString = function () {\n        Object.defineProperty(String.prototype, 'fromBase64', noEnum(function () {\n          return decode(this);\n        }));\n        Object.defineProperty(String.prototype, 'toBase64', noEnum(function (urisafe) {\n          return encode(this, urisafe);\n        }));\n        Object.defineProperty(String.prototype, 'toBase64URI', noEnum(function () {\n          return encode(this, true);\n        }));\n      };\n    } //\n    // export Base64 to the namespace\n    //\n\n\n    if (global['Meteor']) {\n      // Meteor.js\n      Base64 = global.Base64;\n    } // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n\n\n    if (module.exports) {\n      module.exports.Base64 = global.Base64;\n    } // that's it!\n\n\n    return {\n      Base64: global.Base64\n    };\n  });\n}); ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * Prefixes all request with a path prefix.\n */\n\nclass PrefixedTransport {\n  /**\n   * Constructs a transport that prefix the path of all requests performed.\n   *\n   * @param transport The underlying transport used to issue requests.\n   * @param pathPrefix The path being prefixed onto requests.\n   */\n  constructor(transport, pathPrefix) {\n    this.transport = transport;\n    this.pathPrefix = pathPrefix;\n  }\n  /** @inheritdoc */\n\n\n  fetch(request) {\n    const prefixedRequest = { ...request,\n      path: `${this.pathPrefix}${request.path || \"\"}`\n    };\n    return this.transport.fetch(prefixedRequest);\n  }\n  /** @inheritdoc */\n\n\n  prefix(pathPrefix) {\n    return new PrefixedTransport(this, pathPrefix);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * A transport prefixing request paths with the path of the App id and ensuring the correct location is hit.\n */\n\n\nclass AppTransport {\n  /**\n   * Construct a transport that will prefix the app id to paths and determine location base URL.\n   *\n   * @param transport The base transport used to issue requests.\n   * @param appId The id of the app.\n   */\n  constructor(transport, appId) {\n    this.transport = transport;\n    this.appId = appId;\n  }\n  /** @inheritdoc */\n\n\n  async fetch(request) {\n    const {\n      path,\n      ...restOfRequest\n    } = request;\n    return this.transport.fetch({ ...restOfRequest,\n      path: `/app/${this.appId}${path}`\n    });\n  }\n  /** @inheritdoc */\n\n\n  prefix(pathPrefix) {\n    return new PrefixedTransport(this, pathPrefix);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * TODO: Determine if the shape of an error response is specific to each service or widely used\n */\n\n\nclass MongoDBRealmError extends Error {\n  constructor(method, url, statusCode, statusText, response) {\n    if (typeof response === \"object\" && typeof response.error === \"string\") {\n      const statusSummary = statusText ? `status ${statusCode} ${statusText}` : `status ${statusCode}`;\n      super(`Request failed (${method} ${url}): ${response.error} (${statusSummary})`);\n      this.method = method;\n      this.url = url;\n      this.statusText = statusText;\n      this.statusCode = statusCode;\n      this.errorCode = response.error_code;\n      this.link = response.link;\n    } else {\n      throw new Error(\"Unexpected error response format\");\n    }\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n\nclass DefaultNetworkTransport {\n  constructor() {\n    if (!DefaultNetworkTransport.fetch) {\n      throw new Error(\"DefaultNetworkTransport.fetch must be set before it's used\");\n    }\n\n    if (!DefaultNetworkTransport.AbortController) {\n      throw new Error(\"DefaultNetworkTransport.AbortController must be set before it's used\");\n    }\n  }\n\n  async fetchAndParse(request) {\n    try {\n      const response = await this.fetch(request);\n      const contentType = response.headers.get(\"content-type\");\n\n      if (response.ok) {\n        if (contentType === null) {\n          return null;\n        } else if (contentType.startsWith(\"application/json\")) {\n          // Awaiting the response to ensure we'll throw our own error\n          return await response.json();\n        } else {\n          throw new Error(\"Expected an empty or a JSON response\");\n        }\n      } else if (contentType && contentType.startsWith(\"application/json\")) {\n        throw new MongoDBRealmError(request.method, request.url, response.status, response.statusText, await response.json());\n      } else {\n        throw new Error(`Unexpected status code (${response.status} ${response.statusText})`);\n      }\n    } catch (err) {\n      if (err instanceof MongoDBRealmError) {\n        throw err;\n      } else {\n        throw new Error(`Request failed (${request.method} ${request.url}): ${err.message}`);\n      }\n    }\n  }\n\n  fetchWithCallbacks(request, handler) {\n    // tslint:disable-next-line: no-console\n    this.fetch(request).then(async response => {\n      const decodedBody = await response.text(); // Pull out the headers of the response\n\n      const responseHeaders = {};\n      response.headers.forEach((value, key) => {\n        responseHeaders[key] = value;\n      });\n      return {\n        statusCode: response.status,\n        headers: responseHeaders,\n        body: decodedBody\n      };\n    }).then(r => handler.onSuccess(r)).catch(e => handler.onError(e));\n  }\n\n  async fetch(request) {\n    const {\n      method,\n      url,\n      body,\n      timeoutMs,\n      headers = DefaultNetworkTransport.DEFAULT_HEADERS\n    } = request;\n    const {\n      signal,\n      cancelTimeout\n    } = this.createTimeoutSignal(timeoutMs);\n\n    try {\n      // We'll await the response to catch throw our own error\n      return await DefaultNetworkTransport.fetch(url, {\n        method,\n        headers,\n        body: typeof body === \"string\" ? body : JSON.stringify(body),\n        signal\n      });\n    } finally {\n      // Whatever happens, cancel any timeout\n      cancelTimeout();\n    }\n  }\n\n  createTimeoutSignal(timeoutMs) {\n    if (typeof timeoutMs === \"number\") {\n      const controller = new DefaultNetworkTransport.AbortController(); // Call abort after a specific number of milliseconds\n\n      const timeout = setTimeout(() => {\n        controller.abort();\n      }, timeoutMs);\n      return {\n        signal: controller.signal,\n        cancelTimeout: () => {\n          clearTimeout(timeout);\n        }\n      };\n    } else {\n      return {\n        signal: undefined,\n        cancelTimeout: () => {\n          /* No-op */\n        }\n      };\n    }\n  }\n\n}\n\nDefaultNetworkTransport.DEFAULT_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n}; ////////////////////////////////////////////////////////////////////////////\n\nDefaultNetworkTransport.fetch = window.fetch.bind(window);\nDefaultNetworkTransport.AbortController = window.AbortController; ////////////////////////////////////////////////////////////////////////////\n\n/**\n * A basic transport, wrapping a NetworkTransport from the \"realm-network-transport\" package, injecting a baseUrl.\n */\n\nclass BaseTransport {\n  /**\n   * Constructs a base transport, which takes paths (prepended by a base URL) instead of absolute urls.\n   *\n   * @param networkTransport The underlying network transport.\n   * @param baseUrl The base URL to prepend to paths.\n   * @param locationContext Optional object used to determine the actual base URL of the app.\n   * @param baseRoute Optional base route to prepend to the base URL.\n   */\n  constructor(networkTransport = new DefaultNetworkTransport(), baseUrl, locationContext, baseRoute = BaseTransport.DEFAULT_BASE_ROUTE) {\n    this.networkTransport = networkTransport;\n    this.baseUrl = baseUrl;\n    this.locationContext = locationContext;\n    this.baseRoute = baseRoute;\n  }\n  /** @inheritdoc */\n\n\n  async fetch(request) {\n    const {\n      path,\n      headers,\n      ignoreLocation = false,\n      ...restOfRequest\n    } = request; // Determine the base url\n\n    const baseUrl = await this.determineBaseUrl(ignoreLocation); // Execute the request\n\n    return this.networkTransport.fetchAndParse({ ...restOfRequest,\n      url: baseUrl + path,\n      headers: { ...BaseTransport.DEFAULT_HEADERS,\n        ...headers\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  prefix(pathPrefix) {\n    return new PrefixedTransport(this, pathPrefix);\n  }\n  /**\n   * Determines the base URL from the configuration or from the location context.\n   *\n   * @param ignoreLocation Ignore the location context.\n   */\n\n\n  async determineBaseUrl(ignoreLocation) {\n    if (ignoreLocation || !this.locationContext) {\n      return this.baseUrl + this.baseRoute;\n    } else {\n      const location = await this.locationContext.location;\n      return location.hostname + this.baseRoute;\n    }\n  }\n\n}\n/**\n * This base route will be prefixed requests issued through by the base transport.\n */\n\n\nBaseTransport.DEFAULT_BASE_ROUTE = \"/api/client/v2.0\";\n/**\n * Default headers that will always be sat on requests.\n */\n\nBaseTransport.DEFAULT_HEADERS = {\n  Accept: \"application/json\",\n  \"Content-Type\": \"application/json\"\n}; ////////////////////////////////////////////////////////////////////////////\n\n/**\n * Fetches resources as a particular user.\n */\n\nclass AuthenticatedTransport {\n  /**\n   * Constructs a transport that injects authorization headers to requests.\n   *\n   * @param transport The underlying transport.\n   * @param userContext The context controlling what user is authenticated.\n   */\n  constructor(transport, userContext) {\n    this.transport = transport;\n    this.userContext = userContext;\n  }\n  /**\n   * Fetch a network resource as an authenticated user.\n   *\n   * @param request The request to issue towards the server.\n   * @param user The user used when fetching, defaults to the `app.currentUser`.\n   *             If `null`, the fetch will be unauthenticated.\n   * @param retries How many times was this request retried?\n   * @returns A response from requesting with authentication.\n   */\n\n\n  async fetch(request, user = this.userContext.currentUser, retries = 0) {\n    try {\n      const {\n        tokenType = \"access\",\n        ...rest\n      } = request; // Awaiting to intercept errors being thrown\n\n      return await this.transport.fetch({ ...rest,\n        headers: { ...this.buildAuthorizationHeader(user, tokenType),\n          ...request.headers\n        }\n      });\n    } catch (err) {\n      if (user && retries === 0 && err instanceof MongoDBRealmError && err.statusCode === 401) {\n        // Refresh the access token\n        await user.refreshAccessToken(); // Retry\n\n        return this.fetch(request, user, retries + 1);\n      }\n\n      throw err;\n    }\n  }\n  /** @inheritdoc */\n\n\n  prefix(pathPrefix) {\n    const prefixedTransport = this.transport.prefix(pathPrefix);\n    return new AuthenticatedTransport(prefixedTransport, this.userContext);\n  }\n  /**\n   * Generate an object with an authorization header to issue requests as a specific user.\n   *\n   * @param user An optional user to generate the header for.\n   * @param tokenType The type of token (access or refresh).\n   * @returns An object containing with the users access token as authorization header or undefined if no user is given.\n   */\n\n\n  buildAuthorizationHeader(user, tokenType) {\n    if (user && tokenType === \"access\") {\n      return {\n        Authorization: `Bearer ${user.accessToken}`\n      };\n    } else if (user && tokenType === \"refresh\") {\n      return {\n        Authorization: `Bearer ${user.refreshToken}`\n      };\n    }\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * The type of a user.\n */\n\n\nvar UserType;\n\n(function (UserType) {\n  /**\n   * A normal end-user created this user.\n   */\n  UserType[\"Normal\"] = \"normal\";\n  /**\n   * The user was created by the server.\n   */\n\n  UserType[\"Server\"] = \"server\";\n})(UserType || (UserType = {}));\n/** @ignore */\n\n\nvar DataKey;\n\n(function (DataKey) {\n  /** @ignore */\n  DataKey[\"NAME\"] = \"name\";\n  /** @ignore */\n\n  DataKey[\"EMAIL\"] = \"email\";\n  /** @ignore */\n\n  DataKey[\"PICTURE\"] = \"picture\";\n  /** @ignore */\n\n  DataKey[\"FIRST_NAME\"] = \"first_name\";\n  /** @ignore */\n\n  DataKey[\"LAST_NAME\"] = \"last_name\";\n  /** @ignore */\n\n  DataKey[\"GENDER\"] = \"gender\";\n  /** @ignore */\n\n  DataKey[\"BIRTHDAY\"] = \"birthday\";\n  /** @ignore */\n\n  DataKey[\"MIN_AGE\"] = \"min_age\";\n  /** @ignore */\n\n  DataKey[\"MAX_AGE\"] = \"max_age\";\n})(DataKey || (DataKey = {}));\n\nconst DATA_MAPPING = {\n  [DataKey.NAME]: \"name\",\n  [DataKey.EMAIL]: \"email\",\n  [DataKey.PICTURE]: \"pictureUrl\",\n  [DataKey.FIRST_NAME]: \"firstName\",\n  [DataKey.LAST_NAME]: \"lastName\",\n  [DataKey.GENDER]: \"gender\",\n  [DataKey.BIRTHDAY]: \"birthday\",\n  [DataKey.MIN_AGE]: \"minAge\",\n  [DataKey.MAX_AGE]: \"maxAge\"\n};\n/** @inheritdoc */\n\nclass UserProfile {\n  /**\n   * Construct a user profile from the body of a response.\n   *\n   * @param response The response of a call fetching the users profile.\n   */\n  constructor(response) {\n    /** @inheritdoc */\n    this.type = UserType.Normal;\n    /** @inheritdoc */\n\n    this.identities = [];\n\n    if (response) {\n      if (typeof response.type === \"string\") {\n        this.type = response.type;\n      } else {\n        throw new Error(\"Expected 'type' in the response body\");\n      }\n\n      if (Array.isArray(response.identities)) {\n        this.identities = response.identities.map(identity => {\n          return {\n            id: identity.id,\n            providerId: identity[\"provider_id\"],\n            providerType: identity[\"provider_type\"]\n          };\n        });\n      } else {\n        throw new Error(\"Expected 'identities' in the response body\");\n      }\n\n      const {\n        data\n      } = response;\n\n      if (typeof data === \"object\") {\n        for (const key in DATA_MAPPING) {\n          const value = data[key];\n          const propertyName = DATA_MAPPING[key];\n\n          if (typeof value === \"string\" && propertyName !== \"identities\" && propertyName !== \"type\") {\n            this[propertyName] = value;\n          }\n        }\n      } else {\n        throw new Error(\"Expected 'data' in the response body\");\n      }\n    }\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\n\n\nclass PrefixedStorage {\n  /**\n   * Construct a `Storage` which will prefix a key part to every operation.\n   *\n   * @param storage The underlying storage to use for operations.\n   * @param keyPart The part of the key to prefix when performing operations.\n   */\n  constructor(storage, keyPart) {\n    this.storage = storage;\n    this.keyPart = keyPart;\n  }\n  /** @inheritdoc */\n\n\n  get(key) {\n    return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n  /** @inheritdoc */\n\n\n  set(key, value) {\n    return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n  }\n  /** @inheritdoc */\n\n\n  remove(key) {\n    return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n  }\n  /** @inheritdoc */\n\n\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n\n\n  clear(prefix = \"\") {\n    return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n  }\n  /** @inheritdoc */\n\n\n  addListener(listener) {\n    return this.storage.addListener(listener);\n  }\n  /** @inheritdoc */\n\n\n  removeListener(listener) {\n    return this.storage.addListener(listener);\n  }\n\n}\n/**\n * The string separating two parts.\n */\n\n\nPrefixedStorage.PART_SEPARATOR = \":\"; ////////////////////////////////////////////////////////////////////////////\n\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\n/**\n * Storage specific to the app.\n */\n\nclass UserStorage extends PrefixedStorage {\n  /**\n   * Construct a storage for a `User`.\n   *\n   * @param storage The underlying storage to wrap.\n   * @param userId The id of the user.\n   */\n  constructor(storage, userId) {\n    super(storage, `user(${userId})`);\n  }\n  /**\n   * Get the access token from storage.\n   *\n   * @returns Access token (null if unknown).\n   */\n\n\n  get accessToken() {\n    return this.get(ACCESS_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the access token in storage.\n   *\n   * @param value Access token (null if unknown).\n   */\n\n\n  set accessToken(value) {\n    if (value === null) {\n      this.remove(ACCESS_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the refresh token from storage.\n   *\n   * @returns Refresh token (null if unknown and user is logged out).\n   */\n\n\n  get refreshToken() {\n    return this.get(REFRESH_TOKEN_STORAGE_KEY);\n  }\n  /**\n   * Set the refresh token in storage.\n   *\n   * @param value Refresh token (null if unknown and user is logged out).\n   */\n\n\n  set refreshToken(value) {\n    if (value === null) {\n      this.remove(REFRESH_TOKEN_STORAGE_KEY);\n    } else {\n      this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n    }\n  }\n  /**\n   * Get the user profile from storage.\n   *\n   * @returns User profile (undefined if its unknown).\n   */\n\n\n  get profile() {\n    const value = this.get(PROFILE_STORAGE_KEY);\n\n    if (value) {\n      const profile = new UserProfile(); // Patch in the values\n\n      Object.assign(profile, JSON.parse(value));\n      return profile;\n    }\n  }\n  /**\n   * Set the user profile in storage.\n   *\n   * @param value User profile (undefined if its unknown).\n   */\n\n\n  set profile(value) {\n    if (!value) {\n      this.remove(PROFILE_STORAGE_KEY);\n    } else {\n      this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n    }\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/** @inheritdoc */\n\n\nclass EmailPasswordAuth {\n  /**\n   * Construct an interface to the email / password authentication provider.\n   *\n   * @param transport The underlying transport used to request the services.\n   * @param providerName Optional custom name of the authentication provider.\n   */\n  constructor(transport, providerName = \"local-userpass\") {\n    this.transport = transport.prefix(`/auth/providers/${providerName}`);\n  }\n  /** @inheritdoc */\n\n\n  registerUser(email, password) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/register\",\n      body: {\n        email,\n        password\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  confirmUser(token, tokenId) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/confirm\",\n      body: {\n        token,\n        tokenId\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  resendConfirmationEmail(email) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/confirm/send\",\n      body: {\n        email\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  resetPassword(token, tokenId, password) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/reset\",\n      body: {\n        token,\n        tokenId,\n        password\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  sendResetPasswordEmail(email) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/reset/send\",\n      body: {\n        email\n      }\n    });\n  }\n  /** @inheritdoc */\n\n\n  callResetPasswordFunction(email, password, ...args) {\n    return this.transport.fetch({\n      method: \"POST\",\n      path: \"/reset/call\",\n      body: {\n        email,\n        password,\n        arguments: args\n      }\n    });\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n/** @inheritdoc */\n\n\nclass ApiKeyAuth {\n  /**\n   * Construct an interface to the API-key authentication provider.\n   *\n   * @param transport The transport used to send requests to services.\n   * @param providerName Optional custom name of the authentication provider.\n   */\n  constructor(transport, providerName = \"api-key\") {\n    this.transport = transport.prefix(\"/auth/api_keys\");\n  }\n  /** @inheritdoc */\n\n\n  create(name) {\n    return this.transport.fetch({\n      method: \"POST\",\n      body: {\n        name\n      },\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n  /** @inheritdoc */\n\n\n  fetch(keyId) {\n    return this.transport.fetch({\n      method: \"GET\",\n      path: `/${keyId}`,\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n  /** @inheritdoc */\n\n\n  fetchAll() {\n    return this.transport.fetch({\n      method: \"GET\",\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n  /** @inheritdoc */\n\n\n  delete(keyId) {\n    return this.transport.fetch({\n      method: \"DELETE\",\n      path: `/${keyId}`,\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n  /** @inheritdoc */\n\n\n  enable(keyId) {\n    return this.transport.fetch({\n      method: \"PUT\",\n      path: `/${keyId}/enable`,\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n  /** @inheritdoc */\n\n\n  disable(keyId) {\n    return this.transport.fetch({\n      method: \"PUT\",\n      path: `/${keyId}/disable`,\n      tokenType: \"refresh\"\n    }).then(deserialize);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n\nvar UserState;\n\n(function (UserState) {\n  UserState[\"Active\"] = \"active\";\n  UserState[\"LoggedOut\"] = \"logged-out\";\n  UserState[\"Removed\"] = \"removed\";\n})(UserState || (UserState = {}));\n\nvar UserType$1;\n\n(function (UserType) {\n  UserType[\"Normal\"] = \"normal\";\n  UserType[\"Server\"] = \"server\";\n})(UserType$1 || (UserType$1 = {}));\n\nasync function performLogIn(app, credentials) {\n  // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n  const response = await app.appTransport.fetch({\n    method: \"POST\",\n    path: `/auth/providers/${credentials.providerName}/login`,\n    body: credentials.payload\n  }); // Spread out values from the response and ensure they're valid\n\n  const {\n    user_id: id,\n    access_token: accessToken,\n    refresh_token: refreshToken\n  } = response;\n\n  if (typeof id !== \"string\") {\n    throw new Error(\"Expected a user id in the response\");\n  }\n\n  if (typeof accessToken !== \"string\") {\n    throw new Error(\"Expected an access token in the response\");\n  }\n\n  if (typeof refreshToken !== \"string\") {\n    throw new Error(\"Expected a refresh token in the response\");\n  }\n\n  return {\n    id,\n    accessToken,\n    refreshToken\n  };\n}\n/**\n * Representation of an authenticated user of an app.\n */\n\n\nclass User {\n  constructor({\n    app,\n    id,\n    accessToken,\n    refreshToken\n  }) {\n    this.app = app;\n    this._id = id;\n    this._accessToken = accessToken;\n    this._refreshToken = refreshToken;\n    this.transport = new AuthenticatedTransport(app.baseTransport, {\n      currentUser: this\n    });\n    const appTransport = new AppTransport(this.transport, app.id);\n    this.apiKeys = new ApiKeyAuth(this.transport);\n    this.functions = FunctionsFactory.create(appTransport);\n    this.storage = new UserStorage(app.storage, id); // Store tokens in storage for later hydration\n\n    if (accessToken) {\n      this.storage.accessToken = accessToken;\n    }\n\n    if (refreshToken) {\n      this.storage.refreshToken = refreshToken;\n    }\n  }\n  /**\n   * Creates a user from the data stored in the storage of an `App` instance.\n   *\n   * @param app The app that the user was logged into.\n   * @param userId The id of the user to restore.\n   * @returns The user created from values retrieved from storage.\n   */\n\n\n  static hydrate(app, userId) {\n    const user = new User({\n      app,\n      id: userId,\n      accessToken: null,\n      refreshToken: null\n    });\n    user.hydrate();\n    return user;\n  }\n  /**\n   * The automatically-generated internal id of the user.\n   *\n   * @returns The id of the user in the MongoDB Realm database.\n   */\n\n\n  get id() {\n    return this._id;\n  }\n  /**\n   * @returns The access token used to authenticate the user towards MongoDB Realm.\n   */\n\n\n  get accessToken() {\n    return this._accessToken;\n  }\n  /**\n   * @param token The new access token.\n   */\n\n\n  set accessToken(token) {\n    this._accessToken = token;\n    this.storage.accessToken = token;\n  }\n  /**\n   * @returns The refresh token used to issue new access tokens.\n   */\n\n\n  get refreshToken() {\n    return this._refreshToken;\n  }\n  /**\n   * @param token The new refresh token.\n   */\n\n\n  set refreshToken(token) {\n    this._refreshToken = token;\n    this.storage.refreshToken = token;\n  }\n  /**\n   * The state of the user is one of:\n   * - \"active\" The user is logged in and ready.\n   * - \"logged-out\" The user was logged in, but is no longer logged in.\n   * - \"removed\" The user was logged in, but removed entirely from the app again.\n   *\n   * @returns The current state of the user.\n   */\n\n\n  get state() {\n    if (this.app.allUsers.indexOf(this) === -1) {\n      return UserState.Removed;\n    } else {\n      return this.refreshToken === null ? UserState.LoggedOut : UserState.Active;\n    }\n  }\n\n  get customData() {\n    if (this.accessToken) {\n      const decodedToken = this.decodeAccessToken();\n      return decodedToken.userData;\n    } else {\n      throw new Error(\"Cannot read custom data without an access token\");\n    }\n  }\n  /**\n   * @returns Profile containing detailed information about the user.\n   */\n\n\n  get profile() {\n    if (this._profile) {\n      return this._profile;\n    } else {\n      throw new Error(\"A profile was never fetched for this user\");\n    }\n  }\n\n  async refreshProfile() {\n    // Fetch the latest profile\n    const response = await this.transport.fetch({\n      method: \"GET\",\n      path: \"/auth/profile\"\n    }); // Create a profile instance\n\n    this._profile = new UserProfile(response); // Store this for later hydration\n\n    this.storage.profile = this._profile;\n  }\n\n  async logOut() {\n    // Invalidate the refresh token\n    if (this._refreshToken !== null) {\n      await this.app.baseTransport.fetch({\n        method: \"DELETE\",\n        path: \"/auth/session\",\n        headers: {\n          Authorization: `Bearer ${this._refreshToken}`\n        }\n      });\n    } // Forget the access and refresh token\n\n\n    this.accessToken = null;\n    this.refreshToken = null;\n  }\n  /**\n   * Authenticate and retrieve the access and refresh tokens.\n   *\n   * @param credentials Credentials to use when logging in.\n   */\n\n\n  async logIn(credentials) {\n    const {\n      id,\n      accessToken,\n      refreshToken\n    } = await performLogIn(this.app, credentials);\n\n    if (id !== this.id) {\n      throw new Error(\"Logged into a different user\");\n    } // Store the access and refresh token\n\n\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n  }\n  /** @inheritdoc */\n\n\n  async linkCredentials(credentials) {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  async refreshAccessToken() {\n    const response = await this.app.baseTransport.fetch({\n      method: \"POST\",\n      path: \"/auth/session\",\n      headers: {\n        Authorization: `Bearer ${this.refreshToken}`\n      }\n    });\n    const {\n      access_token: accessToken\n    } = response;\n\n    if (typeof accessToken === \"string\") {\n      this.accessToken = accessToken;\n    } else {\n      throw new Error(\"Expected an 'access_token' in the response\");\n    }\n  }\n\n  async refreshCustomData() {\n    await this.refreshAccessToken();\n    return this.customData;\n  }\n\n  callFunction(name, ...args) {\n    return this.functions.callFunction(name, ...args);\n  }\n  /**\n   * Restore a user from the data stored in the storage of an `App` instance.\n   */\n\n\n  hydrate() {\n    // Hydrate tokens\n    const accessToken = this.storage.accessToken;\n    const refreshToken = this.storage.refreshToken;\n    const profile = this.storage.profile;\n\n    if (typeof accessToken === \"string\") {\n      this.accessToken = accessToken;\n    }\n\n    if (typeof refreshToken === \"string\") {\n      this.refreshToken = refreshToken;\n    }\n\n    if (typeof profile === \"object\") {\n      this._profile = profile;\n    }\n  }\n\n  push(serviceName = \"\") {\n    throw new Error(\"Not yet implemented\");\n  }\n\n  decodeAccessToken() {\n    if (this.accessToken) {\n      // Decode and spread the token\n      const parts = this.accessToken.split(\".\");\n\n      if (parts.length !== 3) {\n        throw new Error(\"Expected three parts\");\n      } // Decode the payload\n\n\n      const encodedPayload = parts[1];\n      const decodedPayload = base64.Base64.decode(encodedPayload);\n      const parsedPayload = JSON.parse(decodedPayload);\n      const {\n        exp: expires,\n        iat: issuedAt,\n        user_data: userData = {}\n      } = parsedPayload; // Validate the types\n\n      if (typeof expires !== \"number\") {\n        throw new Error(\"Failed to decode access token 'exp'\");\n      } else if (typeof issuedAt !== \"number\") {\n        throw new Error(\"Failed to decode access token 'iat'\");\n      }\n\n      return {\n        expires,\n        issuedAt,\n        userData\n      };\n    } else {\n      throw new Error(\"Missing an access token\");\n    }\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\n\n\nclass Credentials {\n  /**\n   * Constructs an instance of credentials.\n   *\n   * @param providerName The name of the authentication provider used when authenticating.\n   * @param providerType The type of the authentication provider used when authenticating.\n   * @param payload The data being sent to the service when authenticating.\n   */\n  constructor(providerName, providerType, payload) {\n    this.providerName = providerName;\n    this.providerType = providerType;\n    this.payload = payload;\n  }\n  /**\n   * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n   *\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static anonymous() {\n    return new Credentials(\"anon-user\", \"anon-user\", {});\n  }\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   *\n   * @deprecated Use `Credentials.apiKey`.\n   *\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static userApiKey(key) {\n    return new Credentials(\"api-key\", \"api-key\", {\n      key\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   *\n   * @deprecated Use `Credentials.apiKey`.\n   *\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static serverApiKey(key) {\n    return new Credentials(\"api-key\", \"api-key\", {\n      key\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n   *\n   * @param key The secret content of the API key.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static apiKey(key) {\n    return new Credentials(\"api-key\", \"api-key\", {\n      key\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n   * Note: This was formerly known as the \"Username/Password\" provider.\n   *\n   * @param email The end-users email address.\n   * @param password The end-users password.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static emailPassword(email, password) {\n    return new Credentials(\"local-userpass\", \"local-userpass\", {\n      username: email,\n      password\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n   *\n   * @param payload The custom payload as expected by the server.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static function(payload) {\n    return new Credentials(\"custom-function\", \"custom-function\", payload);\n  }\n  /**\n   * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n   *\n   * @param token The JSON Web Token (JWT).\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static jwt(token) {\n    return new Credentials(\"custom-token\", \"custom-token\", {\n      token\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n   *\n   * @param redirectUrlOrAuthCode The URL that users should be redirected to or the auth code returned from Google.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static google(redirectUrlOrAuthCode) {\n    return new Credentials(\"oauth2-google\", \"oauth2-google\", redirectUrlOrAuthCode.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrAuthCode\n    } : {\n      authCode: redirectUrlOrAuthCode\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n   *\n   * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static facebook(redirectUrlOrAccessToken) {\n    return new Credentials(\"oauth2-facebook\", \"oauth2-facebook\", redirectUrlOrAccessToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrAccessToken\n    } : {\n      accessToken: redirectUrlOrAccessToken\n    });\n  }\n  /**\n   * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n   *\n   * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n   * @returns The credentials instance, which can be passed to `app.logIn`.\n   */\n\n\n  static apple(redirectUrlOrIdToken) {\n    return new Credentials(\"oauth2-apple\", \"oauth2-apple\", redirectUrlOrIdToken.includes(\"://\") ? {\n      redirectUrl: redirectUrlOrIdToken\n    } : {\n      // eslint-disable-next-line @typescript-eslint/camelcase\n      id_token: redirectUrlOrIdToken\n    });\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * A remote collection of documents.\n */\n\n\nclass MongoDBCollection {\n  /**\n   * Construct a remote collection of documents.\n   *\n   * @param transport The transport to use when requesting the service.\n   * @param serviceName The name of the remote service.\n   * @param databaseName The name of the database.\n   * @param collectionName The name of the remote collection.\n   */\n  constructor(transport, serviceName, databaseName, collectionName) {\n    this.functions = FunctionsFactory.create(transport, {\n      serviceName\n    });\n    this.databaseName = databaseName;\n    this.collectionName = collectionName;\n  }\n  /** @inheritdoc */\n\n\n  find(filter = {}, options = {}) {\n    return this.functions.find({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOne(filter = {}, options = {}) {\n    return this.functions.findOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      project: options.projection,\n      sort: options.sort\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndUpdate(filter = {}, update, options = {}) {\n    return this.functions.findOneAndUpdate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      update,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndReplace(filter = {}, replacement, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter: filter,\n      update: replacement,\n      sort: options.sort,\n      projection: options.projection,\n      upsert: options.upsert,\n      returnNewDocument: options.returnNewDocument\n    });\n  }\n  /** @inheritdoc */\n\n\n  findOneAndDelete(filter = {}, options = {}) {\n    return this.functions.findOneAndReplace({\n      database: this.databaseName,\n      collection: this.collectionName,\n      filter,\n      sort: options.sort,\n      projection: options.projection\n    });\n  }\n  /** @inheritdoc */\n\n\n  aggregate(pipeline) {\n    return this.functions.aggregate({\n      database: this.databaseName,\n      collection: this.collectionName,\n      pipeline\n    });\n  }\n  /** @inheritdoc */\n\n\n  count(filter = {}, options = {}) {\n    return this.functions.count({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      limit: options.limit\n    });\n  }\n  /** @inheritdoc */\n\n\n  insertOne(document) {\n    return this.functions.insertOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      document\n    });\n  }\n  /** @inheritdoc */\n\n\n  insertMany(documents) {\n    return this.functions.insertMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      documents\n    });\n  }\n  /** @inheritdoc */\n\n\n  deleteOne(filter = {}) {\n    return this.functions.deleteOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n\n\n  deleteMany(filter = {}) {\n    return this.functions.deleteMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter\n    });\n  }\n  /** @inheritdoc */\n\n\n  updateOne(filter, update, options = {}) {\n    return this.functions.updateOne({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert\n    });\n  }\n  /** @inheritdoc */\n\n\n  updateMany(filter, update, options = {}) {\n    return this.functions.updateMany({\n      database: this.databaseName,\n      collection: this.collectionName,\n      query: filter,\n      update,\n      upsert: options.upsert\n    });\n  }\n  /** @inheritdoc */\n\n\n  watch() {\n    throw new Error(\"Not yet implemented\");\n  }\n\n}\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\n\n\nfunction createCollection(transport, serviceName, databaseName, collectionName) {\n  return new MongoDBCollection(transport, serviceName, databaseName, collectionName);\n}\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\n\n\nfunction createDatabase(transport, serviceName, databaseName) {\n  return {\n    collection: createCollection.bind(null, transport, serviceName, databaseName)\n  };\n}\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName An optional service name.\n * @returns The service.\n */\n\n\nfunction createService(transport, serviceName = \"mongo-db\") {\n  return {\n    db: createDatabase.bind(null, transport, serviceName)\n  };\n} ////////////////////////////////////////////////////////////////////////////\n// @see https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/services/http/src/internal/CoreHttpServiceClient.ts\n\n/**\n * The Stitch HTTP Service is a generic interface that enables you to communicate with any service that is available over HTTP.\n *\n * @see https://docs.mongodb.com/stitch/services/http/\n */\n\n\nclass HTTPService {\n  /**\n   * Construct an HTTP Service.\n   *\n   * @param transport The underlying transport.\n   * @param serviceName An optional service name.\n   */\n  constructor(transport, serviceName = \"http\") {\n    this.functions = FunctionsFactory.create(transport, {\n      serviceName\n    });\n  }\n  /**\n   * Sends an HTTP GET request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  get(url, options = {}) {\n    return this.functions.get({\n      url,\n      ...options\n    });\n  }\n  /**\n   * Sends an HTTP POST request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  post(url, options = {}) {\n    return this.functions.post({\n      url,\n      ...options\n    });\n  }\n  /**\n   * Sends an HTTP PUT request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  put(url, options = {}) {\n    return this.functions.put({\n      url,\n      ...options\n    });\n  }\n  /**\n   * Sends an HTTP DELETE request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  delete(url, options = {}) {\n    return this.functions.delete({\n      url,\n      ...options\n    });\n  }\n  /**\n   * Sends an HTTP HEAD request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  head(url, options = {}) {\n    return this.functions.head({\n      url,\n      ...options\n    });\n  }\n  /**\n   * Sends an HTTP PATCH request to the specified URL.\n   *\n   * @param url The URL to send the request to.\n   * @param options Options related to the request.\n   * @returns The response.\n   */\n\n\n  patch(url, options = {}) {\n    return this.functions.patch({\n      url,\n      ...options\n    });\n  }\n\n}\n/**\n * Creates an HTTP Service.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName An optional service name.\n * @returns The new HTTP Service.\n */\n\n\nfunction createService$1(transport, serviceName = \"http\") {\n  return new HTTPService(transport, serviceName);\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * Create all services for a particular app.\n *\n * @param transport The transport to use when senting requests to the services.\n * @returns An object containing functions that create the individual services.\n */\n\n\nfunction create(transport) {\n  return {\n    mongodb: createService.bind(null, transport),\n    http: createService$1.bind(null, transport)\n  };\n} ////////////////////////////////////////////////////////////////////////////\n\n\nconst USER_IDS_STORAGE_KEY = \"userIds\";\n/**\n * Storage specific to the app.\n */\n\nclass AppStorage extends PrefixedStorage {\n  /**\n   * Construct a storage for an `App`\n   *\n   * @param storage The underlying storage to wrap.\n   * @param appId The id of the app.\n   */\n  constructor(storage, appId) {\n    super(storage, `app(${appId})`);\n  }\n  /**\n   * Reads out the list of user ids from storage.\n   *\n   * @returns A list of user ids.\n   */\n\n\n  getUserIds() {\n    try {\n      const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n      const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n\n      if (Array.isArray(userIds)) {\n        // Remove any duplicates that might have been added\n        // The Set preserves insertion order\n        return [...new Set(userIds)];\n      } else {\n        throw new Error(\"Expected an array\");\n      }\n    } catch (err) {\n      // The storage was corrupted\n      this.remove(USER_IDS_STORAGE_KEY);\n      throw err;\n    }\n  }\n  /**\n   * Sets the list of ids in storage.\n   * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n   *\n   * @param userIds The list of ids to store.\n   * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n   */\n\n\n  setUserIds(userIds, mergeWithExisting) {\n    if (mergeWithExisting) {\n      // Add any existing user id to the end of this list, avoiding duplicates\n      const existingIds = this.getUserIds();\n\n      for (const id of existingIds) {\n        if (userIds.indexOf(id) === -1) {\n          userIds.push(id);\n        }\n      }\n    } // Store the list of ids\n\n\n    this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n  }\n  /**\n   * Remove an id from the list of ids.\n   *\n   * @param userId The id of a User to be removed.\n   */\n\n\n  removeUserId(userId) {\n    const existingIds = this.getUserIds();\n    const userIds = existingIds.filter(id => id !== userId); // Store the list of ids\n\n    this.setUserIds(userIds, false);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n/**\n * Generate a random sequence of characters.\n *\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\n\n\nfunction generateRandomString(length, alphabet) {\n  let result = \"\";\n\n  for (let i = 0; i < length; i++) {\n    result += alphabet[Math.floor(Math.random() * alphabet.length)];\n  }\n\n  return result;\n}\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n *\n * @param params The parameters to include in the string.\n * @returns A URL encoded representation of the parameters.\n */\n\n\nfunction encodeQueryString(params) {\n  return Object.entries(params).map(([k, v]) => [k, encodeURIComponent(v)]).map(([k, v]) => `${k}=${v}`).join(\"&\");\n}\n/**\n * Decodes a query string into an object.\n *\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\n\n\nfunction decodeQueryString(str) {\n  return Object.fromEntries(str.split(\"&\").map(kvp => kvp.split(\"=\")).map(([k, v]) => [k, decodeURIComponent(v)]));\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nlet environment = null;\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n *\n * @param e An object containing environment specific implementations.\n */\n\nfunction setEnvironment(e) {\n  environment = e;\n}\n/**\n * Get the environment of execution.\n *\n * @returns An object containing environment specific implementations.\n */\n\n\nfunction getEnvironment() {\n  if (environment) {\n    return environment;\n  } else {\n    throw new Error(\"Cannot get environment before it's set\");\n  }\n} ////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n\n\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\n\n/* eslint-disable @typescript-eslint/camelcase */\n\nconst REDIRECT_HASH_TO_RESULT = {\n  _stitch_client_app_id: \"appId\",\n  _baas_client_app_id: \"appId\",\n  _stitch_ua: \"userAuth\",\n  _baas_ua: \"userAuth\",\n  _stitch_link: \"link\",\n  _baas_link: \"link\",\n  _stitch_error: \"error\",\n  _baas_error: \"error\",\n  _stitch_state: \"state\",\n  _baas_state: \"state\"\n};\n/* eslint-enable @typescript-eslint/camelcase */\n\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\n\nclass OAuth2Helper {\n  /**\n   * Construct a helper implementing the OAuth2 flow.\n   *\n   * @param storage The underlying storage to use when storing and retriving secrets.\n   * @param getAppUrl Call this to determine the app url.\n   * @param openWindow An optional function called when a browser window needs to open.\n   */\n  constructor(storage, getAppUrl, openWindow = getEnvironment().openWindow) {\n    this.storage = storage.prefix(\"oauth2\");\n    this.getAppUrl = getAppUrl;\n    this.openWindow = openWindow;\n  }\n  /**\n   * Parses the query string from the final step of the OAuth flow.\n   *\n   * @param queryString The query string passed through in location.hash.\n   * @returns The result of the OAuth flow.\n   */\n\n\n  static parseRedirectLocation(queryString) {\n    const params = decodeQueryString(queryString);\n    const result = {};\n\n    for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n      const value = params[p];\n\n      if (value) {\n        result[r] = value;\n      }\n    }\n\n    return result;\n  }\n  /**\n   * Handle the redirect querystring by parsing it and storing it for others to consume.\n   *\n   * @param queryString The query string containing the encoded result from the OAuth provider.\n   * @param storage The underlying storage used to persist the result.\n   */\n\n\n  static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {\n    const helper = new OAuth2Helper(storage, async () => {\n      throw new Error(\"This instance cannot be used to initiate a flow\");\n    });\n    const result = OAuth2Helper.parseRedirectLocation(queryString);\n    helper.handleRedirect(result);\n  }\n  /**\n   * Decodes the authInfo string into its seperate parts.\n   *\n   * @param authInfo An authInfo string returned from the server.\n   * @returns An object containing the separate parts of the authInfo string.\n   */\n\n\n  static decodeAuthInfo(authInfo) {\n    const parts = (authInfo || \"\").split(\"$\");\n\n    if (parts.length === 4) {\n      const [accessToken, refreshToken, userId, deviceId] = parts;\n      return {\n        accessToken,\n        refreshToken,\n        userId,\n        deviceId\n      };\n    } else {\n      throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n    }\n  }\n  /**\n   * Initiates the flow by opening a browser window.\n   *\n   * @param credentials A set of OAuth2 credentials with a redirectUrl in its payload.\n   * @returns The secret.\n   */\n\n\n  async initiate(credentials) {\n    // TODO: Implement a timeout and an option to cancel.\n    const state = this.generateState();\n    const stateStorage = this.getStateStorage(state);\n    const url = await this.generateOAuth2Url(credentials, state); // Return a promise that resolves when the  gets known\n\n    return new Promise((resolve, reject) => {\n      let redirectWindow = null; // We're declaring the interval now to enable referencing before its initialized\n\n      let windowClosedInterval; // eslint-disable-line prefer-const\n\n      const handleStorageUpdate = () => {\n        // Trying to get the secret from storage\n        const result = stateStorage.get(\"result\");\n\n        if (result) {\n          const parsedResult = JSON.parse(result); // The secret got updated!\n\n          stateStorage.removeListener(handleStorageUpdate); // Clear the storage to prevent others from reading this\n\n          stateStorage.clear(); // Try closing the newly created window\n\n          try {\n            if (redirectWindow) {\n              // Stop checking if the window closed\n              clearInterval(windowClosedInterval);\n              redirectWindow.close();\n            }\n          } catch (err) {\n            console.warn(`Failed closing redirect window: ${err}`);\n          } finally {\n            resolve(parsedResult);\n          }\n        }\n      }; // Add a listener to the state storage, awaiting an update to the secret\n\n\n      stateStorage.addListener(handleStorageUpdate); // Open up a window\n\n      redirectWindow = this.openWindow(url); // No using a const, because we need the two listeners to reference each other when removing the other.\n\n      windowClosedInterval = setInterval(() => {\n        if (redirectWindow && redirectWindow.closed) {\n          clearInterval(windowClosedInterval); // Stop listening for changes to the storage\n\n          stateStorage.removeListener(handleStorageUpdate); // Reject the promise\n\n          const err = new Error(\"Window closed\");\n          reject(err);\n        }\n      }, CLOSE_CHECK_INTERVAL);\n    });\n  }\n  /**\n   * Generate the URL to which the user should be redirected to initiate the OAuth2 flow.\n   *\n   * @param credentials A set of OAuth2 credentials with a redirectUrl in its payload.\n   * @param state A random state, used to track the request throughout the flow, avoiding CSRF attacks.\n   * @returns A URL to redirect the user to.\n   */\n\n\n  async generateOAuth2Url(credentials, state) {\n    const {\n      redirectUrl\n    } = credentials.payload;\n    const appUrl = await this.getAppUrl();\n    const qs = encodeQueryString({\n      redirect: redirectUrl,\n      state\n    });\n    return `${appUrl}/auth/providers/${credentials.providerName}/login?${qs}`;\n  }\n  /**\n   * Handle a redirect.\n   *\n   * @param result The result from parsing the OAuth 2.0 redirect URL.\n   */\n\n\n  handleRedirect(result) {\n    const {\n      state,\n      error\n    } = result;\n\n    if (typeof state === \"string\") {\n      const storage = this.getStateStorage(state);\n      storage.set(\"result\", JSON.stringify(result));\n    } else if (error) {\n      throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n    } else {\n      throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n    }\n  }\n  /**\n   * Generate a random state string.\n   *\n   * @returns The random state string.\n   */\n\n\n  generateState() {\n    return generateRandomString(12, LOWERCASE_LETTERS);\n  }\n  /**\n   * Get the storage key associated of an secret associated with a state.\n   *\n   * @param state The random state.\n   * @returns The storage associated with a particular state.\n   */\n\n\n  getStateStorage(state) {\n    return this.storage.prefix(`state(${state})`);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * MongoDB Realm App\n */\n\n\nclass App {\n  /**\n   * Construct a Realm App, either from the Realm App id visible from the MongoDB Realm UI or a configuration.\n   *\n   * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n   */\n  constructor(idOrConfiguration) {\n    /**\n     * An array of active and logged-out users.\n     * Elements in the beginning of the array is considered more recent than the later elements.\n     */\n    this.users = []; // If the argument is a string, convert it to a simple configuration object.\n\n    const configuration = typeof idOrConfiguration === \"string\" ? {\n      id: idOrConfiguration\n    } : idOrConfiguration; // Initialize properties from the configuration\n\n    if (typeof configuration === \"object\" && typeof configuration.id === \"string\") {\n      this.id = configuration.id;\n    } else {\n      throw new Error(\"Missing a MongoDB Realm app-id\");\n    }\n\n    const {\n      transport,\n      storage,\n      baseUrl,\n      fetchLocation = true\n    } = configuration; // Construct the various transports\n\n    this.baseTransport = new BaseTransport(transport, baseUrl || App.DEFAULT_BASE_URL, fetchLocation ? this : undefined);\n    this.appTransport = this.baseTransport.prefix(`/app/${this.id}`);\n    const authTransport = new AuthenticatedTransport(this.appTransport, this); // Construct the functions factory\n\n    this.functions = FunctionsFactory.create(authTransport); // Construct the services factory\n\n    this.services = create(authTransport); // Construct the auth providers\n\n    this.emailPasswordAuth = new EmailPasswordAuth(authTransport); // Construct the storage\n\n    const baseStorage = storage || getEnvironment().defaultStorage;\n    this.storage = new AppStorage(baseStorage, this.id); // Constructing the oauth2 helper, passing in the baseStorage to avoid an app scope.\n\n    this.oauth2 = new OAuth2Helper(baseStorage, async () => {\n      const baseUrl = await this.baseTransport.determineBaseUrl(false);\n      return `${baseUrl}/app/${this.id}`;\n    }); // Hydrate the app state from storage\n\n    this.hydrate();\n  }\n  /**\n   * Switch user\n   *\n   * @param nextUser The user or id of the user to switch to\n   */\n\n\n  switchUser(nextUser) {\n    const index = this.users.findIndex(u => u === nextUser);\n\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    } // Remove the user from the stack\n\n\n    const [user] = this.users.splice(index, 1); // Insert the user in the beginning of the stack\n\n    this.users.unshift(user);\n  }\n  /**\n   * Log in a user\n   *\n   * @param credentials Credentials to use when logging in\n   * @param fetchProfile Should the users profile be fetched? (default: true)\n   */\n\n\n  async logIn(credentials, fetchProfile = true) {\n    const user = await this.performLogIn(credentials); // Let's ensure this will be the current user, in case the user object was reused.\n\n    this.switchUser(user); // If neeeded, fetch and set the profile on the user\n\n    if (fetchProfile) {\n      await user.refreshProfile();\n    } // Persist the user id in the storage,\n    // merging to avoid overriding logins from other apps using the same underlying storage\n\n\n    this.storage.setUserIds(this.users.map(u => u.id), true); // Return the user\n\n    return user;\n  }\n  /**\n   * @inheritdoc\n   */\n\n\n  async removeUser(user) {\n    // Remove the user from the list of users\n    const index = this.users.findIndex(u => u === user);\n\n    if (index === -1) {\n      throw new Error(\"The user was never logged into this app\");\n    }\n\n    this.users.splice(index, 1); // Log out the user - this removes access and refresh tokens from storage\n\n    await user.logOut(); // Remove the users profile from storage\n\n    this.storage.remove(`user(${user.id}):profile`); // Remove the user from the storage\n\n    this.storage.removeUserId(user.id);\n  }\n  /**\n   * The currently active user (or null if no active users exists)\n   *\n   * @returns the currently active user or null.\n   */\n\n\n  get currentUser() {\n    const activeUsers = this.users.filter(user => user.state === UserState.Active);\n\n    if (activeUsers.length === 0) {\n      return null;\n    } else {\n      // Current user is the top of the stack\n      return activeUsers[0];\n    }\n  }\n  /**\n   * All active and logged-out users:\n   *  - First in the list are active users (ordered by most recent call to switchUser or login)\n   *  - Followed by logged out users (also ordered by most recent call to switchUser or login).\n   *\n   * @returns An array of users active or loggedout users (current user being the first).\n   */\n\n\n  get allUsers() {\n    // We need to peek into refresh tokens to avoid cyclic code\n    const activeUsers = this.users.filter(user => user.refreshToken !== null);\n    const loggedOutUsers = this.users.filter(user => user.refreshToken === null); // Returning a freezed copy of the list of users to prevent outside changes\n\n    return Object.freeze([...activeUsers, ...loggedOutUsers]);\n  }\n  /**\n   * Get the location metadata of an app.\n   *\n   * @returns A promise of the app's location metadata.\n   */\n\n\n  get location() {\n    // Initiate the fetch of the location metadata only once per app instance.\n    if (!this._location) {\n      this._location = this.baseTransport.fetch({\n        method: \"GET\",\n        path: `/app/${this.id}/location`,\n        ignoreLocation: true\n      });\n    }\n\n    return this._location;\n  }\n  /**\n   * Perform the actual login, based on the credentials.\n   * Either it decodes the credentials and instantiates a user directly or it calls User.logIn to perform a fetch.\n   *\n   * @param credentials Credentials to use when logging in\n   */\n\n\n  async performLogIn(credentials) {\n    if (credentials.providerType.startsWith(\"oauth2\") && typeof credentials.payload.redirectUrl === \"string\") {\n      // Initiate the OAuth2 and use the next credentials once they're known\n      const result = await this.oauth2.initiate(credentials);\n      const {\n        userId,\n        accessToken,\n        refreshToken\n      } = OAuth2Helper.decodeAuthInfo(result.userAuth);\n      return this.createOrUpdateUser(userId, accessToken, refreshToken);\n    } else {\n      const {\n        id,\n        accessToken,\n        refreshToken\n      } = await performLogIn(this, credentials);\n      return this.createOrUpdateUser(id, accessToken, refreshToken);\n    }\n  }\n  /**\n   * Create (and store) a new user or update an existing user's access and refresh tokens.\n   * This helps de-duplicating users in the list of users known to the app.\n   *\n   * @param userId The id of the user.\n   * @param accessToken The new access token of the user.\n   * @param refreshToken The new refresh token of the user.\n   * @returns A new or an existing user.\n   */\n\n\n  createOrUpdateUser(userId, accessToken, refreshToken) {\n    const existingUser = this.users.find(u => u.id === userId);\n\n    if (existingUser) {\n      // Update the users access and refresh tokens\n      existingUser.accessToken = accessToken;\n      existingUser.refreshToken = refreshToken;\n      return existingUser;\n    } else {\n      // Create and store a new user\n      const user = new User({\n        app: this,\n        id: userId,\n        accessToken,\n        refreshToken\n      });\n      this.users.unshift(user);\n      return user;\n    }\n  }\n  /**\n   * Restores the state of the app (active and logged-out users) from the storage\n   */\n\n\n  hydrate() {\n    try {\n      const userIds = this.storage.getUserIds();\n      this.users = userIds.map(id => User.hydrate(this, id));\n    } catch (err) {\n      // The storage was corrupted\n      this.storage.clear();\n      throw err;\n    }\n  }\n\n}\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\n\n\nApp.Credentials = Credentials;\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\n\nApp.DEFAULT_BASE_URL = \"https://stitch.mongodb.com\"; ////////////////////////////////////////////////////////////////////////////\n\nconst appCache = {};\n/**\n * Get or create a singleton Realm App from an id.\n *\n * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.\n * @returns The Realm App instance. Calling this function multiple times with the same id will return the same instance.\n */\n\nfunction getApp(id) {\n  if (id in appCache) {\n    return appCache[id];\n  } else {\n    const instance = new App(id);\n    appCache[id] = instance;\n    return instance;\n  }\n} ////////////////////////////////////////////////////////////////////////////\n\n/**\n * In-memory storage that will not be persisted.\n */\n\n\nclass LocalStorage {\n  /**\n   * Constructs a LocalStorage using the global window.\n   */\n  constructor() {\n    if (typeof window === \"object\") {\n      this.window = window;\n    } else {\n      throw new Error(\"Cannot use LocalStorage without a global window object\");\n    }\n  }\n  /** @inheritdoc */\n\n\n  get(key) {\n    return this.window.localStorage.getItem(key);\n  }\n  /** @inheritdoc */\n\n\n  set(key, value) {\n    return this.window.localStorage.setItem(key, value);\n  }\n  /** @inheritdoc */\n\n\n  remove(key) {\n    return this.window.localStorage.removeItem(key);\n  }\n  /** @inheritdoc */\n\n\n  prefix(keyPart) {\n    return new PrefixedStorage(this, keyPart);\n  }\n  /** @inheritdoc */\n\n\n  clear(prefix) {\n    const keys = []; // Iterate all keys to find the once have a matching prefix.\n\n    for (let i = 0; i < this.window.localStorage.length; i++) {\n      const key = this.window.localStorage.key(i);\n\n      if (key && (!prefix || key.startsWith(prefix))) {\n        keys.push(key);\n      }\n    } // Remove the items in a seperate loop to avoid updating while iterating.\n\n\n    for (const key of keys) {\n      this.window.localStorage.removeItem(key);\n    }\n  }\n  /** @inheritdoc */\n\n\n  addListener(listener) {\n    return this.window.addEventListener(\"storage\", listener);\n  }\n  /** @inheritdoc */\n\n\n  removeListener(listener) {\n    return this.window.removeEventListener(\"storage\", listener);\n  }\n\n} ////////////////////////////////////////////////////////////////////////////\n\n\nconst environment$1 = {\n  defaultStorage: new LocalStorage().prefix(\"realm-web\"),\n  openWindow: url => window.open(url)\n};\nsetEnvironment(environment$1);\n/**\n * Handle an OAuth 2.0 redirect.\n *\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\n\nfunction handleAuthRedirect(location = window.location, storage = environment$1.defaultStorage) {\n  try {\n    const queryString = location.hash.substr(1); // Strip the initial # from the hash\n\n    OAuth2Helper.handleRedirect(queryString, storage);\n  } catch (err) {\n    // Ensure calling this never throws: It should not interrupt a users flow.\n    console.warn(err);\n  }\n}\n\nexport { App, Credentials, LocalStorage, MongoDBRealmError, User, UserState, UserType$1 as UserType, getApp, getEnvironment, handleAuthRedirect, performLogIn, setEnvironment };","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/node_modules/realm-web/dist/bundle.dom.es.js"],"names":["EJSON","serialize","obj","deserialize","Array","isArray","map","doc","RESERVED_NAMES","cleanArgs","args","arg","key","value","Object","entries","undefined","cleanArgsAndSerialize","cleaned","FunctionsFactory","constructor","transport","config","serviceName","argsTransformation","responseTransformation","create","factory","Proxy","get","target","p","receiver","indexOf","callFunction","bind","prop","Reflect","name","body","arguments","service","response","fetch","method","path","commonjsGlobal","globalThis","window","global","self","createCommonjsModule","fn","basedir","module","exports","require","base","commonjsRequire","Error","base64","_Base64","Base64","version","b64chars","b64tab","bin","t","i","l","length","charAt","fromCharCode","String","cb_utob","c","cc","charCodeAt","re_utob","utob","u","replace","cb_encode","ccc","padlen","ord","chars","join","btoa","b","match","RangeError","_encode","mkUriSafe","b64","m0","encode","urisafe","encodeURI","fromUint8Array","Uint8Array","a","a0","a1","a2","re_btou","cb_btou","cccc","cp","offset","btou","cb_decode","len","n","_atob","atob","_decode","_fromURI","decode","toUint8Array","from","noConflict","VERSION","fromBase64","toBase64","defineProperty","noEnum","v","enumerable","writable","configurable","extendString","prototype","PrefixedTransport","pathPrefix","request","prefixedRequest","prefix","AppTransport","appId","restOfRequest","MongoDBRealmError","url","statusCode","statusText","error","statusSummary","errorCode","error_code","link","DefaultNetworkTransport","AbortController","fetchAndParse","contentType","headers","ok","startsWith","json","status","err","message","fetchWithCallbacks","handler","then","decodedBody","text","responseHeaders","forEach","r","onSuccess","catch","e","onError","timeoutMs","DEFAULT_HEADERS","signal","cancelTimeout","createTimeoutSignal","JSON","stringify","controller","timeout","setTimeout","abort","clearTimeout","Accept","BaseTransport","networkTransport","baseUrl","locationContext","baseRoute","DEFAULT_BASE_ROUTE","ignoreLocation","determineBaseUrl","location","hostname","AuthenticatedTransport","userContext","user","currentUser","retries","tokenType","rest","buildAuthorizationHeader","refreshAccessToken","prefixedTransport","Authorization","accessToken","refreshToken","UserType","DataKey","DATA_MAPPING","NAME","EMAIL","PICTURE","FIRST_NAME","LAST_NAME","GENDER","BIRTHDAY","MIN_AGE","MAX_AGE","UserProfile","type","Normal","identities","identity","id","providerId","providerType","data","propertyName","PrefixedStorage","storage","keyPart","PART_SEPARATOR","set","remove","clear","addListener","listener","removeListener","ACCESS_TOKEN_STORAGE_KEY","REFRESH_TOKEN_STORAGE_KEY","PROFILE_STORAGE_KEY","UserStorage","userId","profile","assign","parse","EmailPasswordAuth","providerName","registerUser","email","password","confirmUser","token","tokenId","resendConfirmationEmail","resetPassword","sendResetPasswordEmail","callResetPasswordFunction","ApiKeyAuth","keyId","fetchAll","delete","enable","disable","UserState","UserType$1","performLogIn","app","credentials","appTransport","payload","user_id","access_token","refresh_token","User","_id","_accessToken","_refreshToken","baseTransport","apiKeys","functions","hydrate","state","allUsers","Removed","LoggedOut","Active","customData","decodedToken","decodeAccessToken","userData","_profile","refreshProfile","logOut","logIn","linkCredentials","refreshCustomData","push","parts","split","encodedPayload","decodedPayload","parsedPayload","exp","expires","iat","issuedAt","user_data","Credentials","anonymous","userApiKey","serverApiKey","apiKey","emailPassword","username","function","jwt","google","redirectUrlOrAuthCode","includes","redirectUrl","authCode","facebook","redirectUrlOrAccessToken","apple","redirectUrlOrIdToken","id_token","MongoDBCollection","databaseName","collectionName","find","filter","options","database","collection","query","project","projection","sort","limit","findOne","findOneAndUpdate","update","upsert","returnNewDocument","findOneAndReplace","replacement","findOneAndDelete","aggregate","pipeline","count","insertOne","document","insertMany","documents","deleteOne","deleteMany","updateOne","updateMany","watch","createCollection","createDatabase","createService","db","HTTPService","post","put","head","patch","createService$1","mongodb","http","USER_IDS_STORAGE_KEY","AppStorage","getUserIds","userIdsString","userIds","Set","setUserIds","mergeWithExisting","existingIds","removeUserId","generateRandomString","alphabet","result","Math","floor","random","encodeQueryString","params","k","encodeURIComponent","decodeQueryString","str","fromEntries","kvp","decodeURIComponent","environment","setEnvironment","getEnvironment","LOWERCASE_LETTERS","CLOSE_CHECK_INTERVAL","REDIRECT_HASH_TO_RESULT","_stitch_client_app_id","_baas_client_app_id","_stitch_ua","_baas_ua","_stitch_link","_baas_link","_stitch_error","_baas_error","_stitch_state","_baas_state","OAuth2Helper","getAppUrl","openWindow","parseRedirectLocation","queryString","handleRedirect","defaultStorage","helper","decodeAuthInfo","authInfo","deviceId","initiate","generateState","stateStorage","getStateStorage","generateOAuth2Url","Promise","resolve","reject","redirectWindow","windowClosedInterval","handleStorageUpdate","parsedResult","clearInterval","close","console","warn","setInterval","closed","appUrl","qs","redirect","App","idOrConfiguration","users","configuration","fetchLocation","DEFAULT_BASE_URL","authTransport","services","emailPasswordAuth","baseStorage","oauth2","switchUser","nextUser","index","findIndex","splice","unshift","fetchProfile","removeUser","activeUsers","loggedOutUsers","freeze","_location","userAuth","createOrUpdateUser","existingUser","appCache","getApp","instance","LocalStorage","localStorage","getItem","setItem","removeItem","keys","addEventListener","removeEventListener","environment$1","open","handleAuthRedirect","hash","substr"],"mappings":"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","sourcesContent":["import { EJSON } from 'bson';\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Serialize an object containing BSON types into extended-JSON.\n *\n * @param obj The object containing BSON types.\n * @returns The document in extended-JSON format.\n */\nfunction serialize(obj) {\n    return EJSON.serialize(obj);\n}\n/**\n * De-serialize an object or an array of object from extended-JSON into an object or an array of object with BSON types.\n *\n * @param obj The object or array of objects in extended-JSON format.\n * @returns The object or array of objects with inflated BSON types.\n */\nfunction deserialize(obj) {\n    if (Array.isArray(obj)) {\n        return obj.map(doc => EJSON.deserialize(doc));\n    }\n    else {\n        return EJSON.deserialize(obj);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A list of names that functions cannot have to be callable through the functions proxy.\n */\nconst RESERVED_NAMES = [\"inspect\", \"callFunction\"];\n/**\n * Remove the key for any fields with undefined values.\n *\n * @param args The arguments to clean.\n * @returns The cleaned arguments.\n */\nfunction cleanArgs(args) {\n    for (const arg of args) {\n        if (typeof arg === \"object\") {\n            for (const [key, value] of Object.entries(arg)) {\n                if (value === undefined) {\n                    delete arg[key];\n                }\n            }\n        }\n    }\n    return args;\n}\n/**\n * Remove keys for any undefined values and serialize to EJSON.\n *\n * @param args The arguments to clean and serialize.\n * @returns The cleaned and serialized arguments.\n */\nfunction cleanArgsAndSerialize(args) {\n    const cleaned = cleanArgs(args);\n    return cleaned.map(arg => (typeof arg === \"object\" ? serialize(arg) : arg));\n}\n/**\n * Defines how functions are called.\n */\nclass FunctionsFactory {\n    /**\n     * Construct a functions factory.\n     *\n     * @param transport The underlying transport to use when sending requests.\n     * @param config Additional configuration parameters.\n     */\n    constructor(transport, config = {}) {\n        this.transport = transport;\n        this.serviceName = config.serviceName;\n        this.argsTransformation =\n            config.argsTransformation || cleanArgsAndSerialize;\n        this.responseTransformation =\n            config.responseTransformation || deserialize;\n    }\n    /**\n     * Create a factory of functions, wrapped in a Proxy that returns bound copies of `callFunction` on any property.\n     *\n     * @param transport The underlying transport to use when requesting.\n     * @param config Additional configuration parameters.\n     * @returns The newly created factory of functions.\n     */\n    static create(transport, config = {}) {\n        // Create a proxy, wrapping a simple object returning methods that calls functions\n        // TODO: Lazily fetch available functions and return these from the ownKeys() trap\n        const factory = new FunctionsFactory(transport, config);\n        // Wrap the factory in a proxy that calls the internal call method\n        return new Proxy(factory, {\n            get(target, p, receiver) {\n                if (typeof p === \"string\" && RESERVED_NAMES.indexOf(p) === -1) {\n                    return target.callFunction.bind(target, p);\n                }\n                else {\n                    const prop = Reflect.get(target, p, receiver);\n                    return typeof prop === \"function\"\n                        ? prop.bind(target)\n                        : prop;\n                }\n            },\n        });\n    }\n    /**\n     * Call a remote function by it's name.\n     *\n     * @param name Name of the remote function.\n     * @param args Arguments to pass to the remote function.\n     * @returns A promise of the value returned when executing the remote function.\n     */\n    async callFunction(name, ...args) {\n        // See https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/sdk/src/services/internal/CoreStitchServiceClientImpl.ts\n        const body = {\n            name,\n            arguments: this.argsTransformation\n                ? this.argsTransformation(args)\n                : args,\n        };\n        if (this.serviceName) {\n            body.service = this.serviceName;\n        }\n        const response = await this.transport.fetch({\n            method: \"POST\",\n            path: \"/functions/call\",\n            body,\n        });\n        // Transform the response, if needed\n        if (this.responseTransformation) {\n            return this.responseTransformation(response);\n        }\n        else {\n            return response;\n        }\n    }\n}\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, basedir, module) {\n\treturn module = {\n\t  path: basedir,\n\t  exports: {},\n\t  require: function (path, base) {\n      return commonjsRequire(path, (base === undefined || base === null) ? module.path : base);\n    }\n\t}, fn(module, module.exports), module.exports;\n}\n\nfunction commonjsRequire () {\n\tthrow new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n\nvar base64 = createCommonjsModule(function (module, exports) {\n(function (global, factory) {\n     module.exports = factory(global)\n        ;\n}((\n    typeof self !== 'undefined' ? self\n        : typeof window !== 'undefined' ? window\n        : typeof commonjsGlobal !== 'undefined' ? commonjsGlobal\n: commonjsGlobal\n), function(global) {\n    // existing version for noConflict()\n    global = global || {};\n    var _Base64 = global.Base64;\n    var version = \"2.6.3\";\n    // constants\n    var b64chars\n        = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n    var b64tab = function(bin) {\n        var t = {};\n        for (var i = 0, l = bin.length; i < l; i++) t[bin.charAt(i)] = i;\n        return t;\n    }(b64chars);\n    var fromCharCode = String.fromCharCode;\n    // encoder stuff\n    var cb_utob = function(c) {\n        if (c.length < 2) {\n            var cc = c.charCodeAt(0);\n            return cc < 0x80 ? c\n                : cc < 0x800 ? (fromCharCode(0xc0 | (cc >>> 6))\n                                + fromCharCode(0x80 | (cc & 0x3f)))\n                : (fromCharCode(0xe0 | ((cc >>> 12) & 0x0f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        } else {\n            var cc = 0x10000\n                + (c.charCodeAt(0) - 0xD800) * 0x400\n                + (c.charCodeAt(1) - 0xDC00);\n            return (fromCharCode(0xf0 | ((cc >>> 18) & 0x07))\n                    + fromCharCode(0x80 | ((cc >>> 12) & 0x3f))\n                    + fromCharCode(0x80 | ((cc >>>  6) & 0x3f))\n                    + fromCharCode(0x80 | ( cc         & 0x3f)));\n        }\n    };\n    var re_utob = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFFF]|[^\\x00-\\x7F]/g;\n    var utob = function(u) {\n        return u.replace(re_utob, cb_utob);\n    };\n    var cb_encode = function(ccc) {\n        var padlen = [0, 2, 1][ccc.length % 3],\n        ord = ccc.charCodeAt(0) << 16\n            | ((ccc.length > 1 ? ccc.charCodeAt(1) : 0) << 8)\n            | ((ccc.length > 2 ? ccc.charCodeAt(2) : 0)),\n        chars = [\n            b64chars.charAt( ord >>> 18),\n            b64chars.charAt((ord >>> 12) & 63),\n            padlen >= 2 ? '=' : b64chars.charAt((ord >>> 6) & 63),\n            padlen >= 1 ? '=' : b64chars.charAt(ord & 63)\n        ];\n        return chars.join('');\n    };\n    var btoa = global.btoa && typeof global.btoa == 'function'\n        ? function(b){ return global.btoa(b) } : function(b) {\n        if (b.match(/[^\\x00-\\xFF]/)) throw new RangeError(\n            'The string contains invalid characters.'\n        );\n        return b.replace(/[\\s\\S]{1,3}/g, cb_encode);\n    };\n    var _encode = function(u) {\n        return btoa(utob(String(u)));\n    };\n    var mkUriSafe = function (b64) {\n        return b64.replace(/[+\\/]/g, function(m0) {\n            return m0 == '+' ? '-' : '_';\n        }).replace(/=/g, '');\n    };\n    var encode = function(u, urisafe) {\n        return urisafe ? mkUriSafe(_encode(u)) : _encode(u);\n    };\n    var encodeURI = function(u) { return encode(u, true) };\n    var fromUint8Array;\n    if (global.Uint8Array) fromUint8Array = function(a, urisafe) {\n        // return btoa(fromCharCode.apply(null, a));\n        var b64 = '';\n        for (var i = 0, l = a.length; i < l; i += 3) {\n            var a0 = a[i], a1 = a[i+1], a2 = a[i+2];\n            var ord = a0 << 16 | a1 << 8 | a2;\n            b64 +=    b64chars.charAt( ord >>> 18)\n                +     b64chars.charAt((ord >>> 12) & 63)\n                + ( typeof a1 != 'undefined'\n                    ? b64chars.charAt((ord >>>  6) & 63) : '=')\n                + ( typeof a2 != 'undefined'\n                    ? b64chars.charAt( ord         & 63) : '=');\n        }\n        return urisafe ? mkUriSafe(b64) : b64;\n    };\n    // decoder stuff\n    var re_btou = /[\\xC0-\\xDF][\\x80-\\xBF]|[\\xE0-\\xEF][\\x80-\\xBF]{2}|[\\xF0-\\xF7][\\x80-\\xBF]{3}/g;\n    var cb_btou = function(cccc) {\n        switch(cccc.length) {\n        case 4:\n            var cp = ((0x07 & cccc.charCodeAt(0)) << 18)\n                |    ((0x3f & cccc.charCodeAt(1)) << 12)\n                |    ((0x3f & cccc.charCodeAt(2)) <<  6)\n                |     (0x3f & cccc.charCodeAt(3)),\n            offset = cp - 0x10000;\n            return (fromCharCode((offset  >>> 10) + 0xD800)\n                    + fromCharCode((offset & 0x3FF) + 0xDC00));\n        case 3:\n            return fromCharCode(\n                ((0x0f & cccc.charCodeAt(0)) << 12)\n                    | ((0x3f & cccc.charCodeAt(1)) << 6)\n                    |  (0x3f & cccc.charCodeAt(2))\n            );\n        default:\n            return  fromCharCode(\n                ((0x1f & cccc.charCodeAt(0)) << 6)\n                    |  (0x3f & cccc.charCodeAt(1))\n            );\n        }\n    };\n    var btou = function(b) {\n        return b.replace(re_btou, cb_btou);\n    };\n    var cb_decode = function(cccc) {\n        var len = cccc.length,\n        padlen = len % 4,\n        n = (len > 0 ? b64tab[cccc.charAt(0)] << 18 : 0)\n            | (len > 1 ? b64tab[cccc.charAt(1)] << 12 : 0)\n            | (len > 2 ? b64tab[cccc.charAt(2)] <<  6 : 0)\n            | (len > 3 ? b64tab[cccc.charAt(3)]       : 0),\n        chars = [\n            fromCharCode( n >>> 16),\n            fromCharCode((n >>>  8) & 0xff),\n            fromCharCode( n         & 0xff)\n        ];\n        chars.length -= [0, 0, 2, 1][padlen];\n        return chars.join('');\n    };\n    var _atob = global.atob && typeof global.atob == 'function'\n        ? function(a){ return global.atob(a) } : function(a){\n        return a.replace(/\\S{1,4}/g, cb_decode);\n    };\n    var atob = function(a) {\n        return _atob(String(a).replace(/[^A-Za-z0-9\\+\\/]/g, ''));\n    };\n    var _decode = function(a) { return btou(_atob(a)) };\n    var _fromURI = function(a) {\n        return String(a).replace(/[-_]/g, function(m0) {\n            return m0 == '-' ? '+' : '/'\n        }).replace(/[^A-Za-z0-9\\+\\/]/g, '');\n    };\n    var decode = function(a){\n        return _decode(_fromURI(a));\n    };\n    var toUint8Array;\n    if (global.Uint8Array) toUint8Array = function(a) {\n        return Uint8Array.from(atob(_fromURI(a)), function(c) {\n            return c.charCodeAt(0);\n        });\n    };\n    var noConflict = function() {\n        var Base64 = global.Base64;\n        global.Base64 = _Base64;\n        return Base64;\n    };\n    // export Base64\n    global.Base64 = {\n        VERSION: version,\n        atob: atob,\n        btoa: btoa,\n        fromBase64: decode,\n        toBase64: encode,\n        utob: utob,\n        encode: encode,\n        encodeURI: encodeURI,\n        btou: btou,\n        decode: decode,\n        noConflict: noConflict,\n        fromUint8Array: fromUint8Array,\n        toUint8Array: toUint8Array\n    };\n    // if ES5 is available, make Base64.extendString() available\n    if (typeof Object.defineProperty === 'function') {\n        var noEnum = function(v){\n            return {value:v,enumerable:false,writable:true,configurable:true};\n        };\n        global.Base64.extendString = function () {\n            Object.defineProperty(\n                String.prototype, 'fromBase64', noEnum(function () {\n                    return decode(this)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64', noEnum(function (urisafe) {\n                    return encode(this, urisafe)\n                }));\n            Object.defineProperty(\n                String.prototype, 'toBase64URI', noEnum(function () {\n                    return encode(this, true)\n                }));\n        };\n    }\n    //\n    // export Base64 to the namespace\n    //\n    if (global['Meteor']) { // Meteor.js\n        Base64 = global.Base64;\n    }\n    // module.exports and AMD are mutually exclusive.\n    // module.exports has precedence.\n    if ( module.exports) {\n        module.exports.Base64 = global.Base64;\n    }\n    // that's it!\n    return {Base64: global.Base64}\n}));\n});\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Prefixes all request with a path prefix.\n */\nclass PrefixedTransport {\n    /**\n     * Constructs a transport that prefix the path of all requests performed.\n     *\n     * @param transport The underlying transport used to issue requests.\n     * @param pathPrefix The path being prefixed onto requests.\n     */\n    constructor(transport, pathPrefix) {\n        this.transport = transport;\n        this.pathPrefix = pathPrefix;\n    }\n    /** @inheritdoc */\n    fetch(request) {\n        const prefixedRequest = {\n            ...request,\n            path: `${this.pathPrefix}${request.path || \"\"}`,\n        };\n        return this.transport.fetch(prefixedRequest);\n    }\n    /** @inheritdoc */\n    prefix(pathPrefix) {\n        return new PrefixedTransport(this, pathPrefix);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A transport prefixing request paths with the path of the App id and ensuring the correct location is hit.\n */\nclass AppTransport {\n    /**\n     * Construct a transport that will prefix the app id to paths and determine location base URL.\n     *\n     * @param transport The base transport used to issue requests.\n     * @param appId The id of the app.\n     */\n    constructor(transport, appId) {\n        this.transport = transport;\n        this.appId = appId;\n    }\n    /** @inheritdoc */\n    async fetch(request) {\n        const { path, ...restOfRequest } = request;\n        return this.transport.fetch({\n            ...restOfRequest,\n            path: `/app/${this.appId}${path}`,\n        });\n    }\n    /** @inheritdoc */\n    prefix(pathPrefix) {\n        return new PrefixedTransport(this, pathPrefix);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * TODO: Determine if the shape of an error response is specific to each service or widely used\n */\nclass MongoDBRealmError extends Error {\n    constructor(method, url, statusCode, statusText, response) {\n        if (typeof response === \"object\" &&\n            typeof response.error === \"string\") {\n            const statusSummary = statusText\n                ? `status ${statusCode} ${statusText}`\n                : `status ${statusCode}`;\n            super(`Request failed (${method} ${url}): ${response.error} (${statusSummary})`);\n            this.method = method;\n            this.url = url;\n            this.statusText = statusText;\n            this.statusCode = statusCode;\n            this.errorCode = response.error_code;\n            this.link = response.link;\n        }\n        else {\n            throw new Error(\"Unexpected error response format\");\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nclass DefaultNetworkTransport {\n    constructor() {\n        if (!DefaultNetworkTransport.fetch) {\n            throw new Error(\"DefaultNetworkTransport.fetch must be set before it's used\");\n        }\n        if (!DefaultNetworkTransport.AbortController) {\n            throw new Error(\"DefaultNetworkTransport.AbortController must be set before it's used\");\n        }\n    }\n    async fetchAndParse(request) {\n        try {\n            const response = await this.fetch(request);\n            const contentType = response.headers.get(\"content-type\");\n            if (response.ok) {\n                if (contentType === null) {\n                    return null;\n                }\n                else if (contentType.startsWith(\"application/json\")) {\n                    // Awaiting the response to ensure we'll throw our own error\n                    return await response.json();\n                }\n                else {\n                    throw new Error(\"Expected an empty or a JSON response\");\n                }\n            }\n            else if (contentType &&\n                contentType.startsWith(\"application/json\")) {\n                throw new MongoDBRealmError(request.method, request.url, response.status, response.statusText, await response.json());\n            }\n            else {\n                throw new Error(`Unexpected status code (${response.status} ${response.statusText})`);\n            }\n        }\n        catch (err) {\n            if (err instanceof MongoDBRealmError) {\n                throw err;\n            }\n            else {\n                throw new Error(`Request failed (${request.method} ${request.url}): ${err.message}`);\n            }\n        }\n    }\n    fetchWithCallbacks(request, handler) {\n        // tslint:disable-next-line: no-console\n        this.fetch(request)\n            .then(async (response) => {\n            const decodedBody = await response.text();\n            // Pull out the headers of the response\n            const responseHeaders = {};\n            response.headers.forEach((value, key) => {\n                responseHeaders[key] = value;\n            });\n            return {\n                statusCode: response.status,\n                headers: responseHeaders,\n                body: decodedBody,\n            };\n        })\n            .then(r => handler.onSuccess(r))\n            .catch(e => handler.onError(e));\n    }\n    async fetch(request) {\n        const { method, url, body, timeoutMs, headers = DefaultNetworkTransport.DEFAULT_HEADERS, } = request;\n        const { signal, cancelTimeout } = this.createTimeoutSignal(timeoutMs);\n        try {\n            // We'll await the response to catch throw our own error\n            return await DefaultNetworkTransport.fetch(url, {\n                method,\n                headers,\n                body: typeof body === \"string\" ? body : JSON.stringify(body),\n                signal,\n            });\n        }\n        finally {\n            // Whatever happens, cancel any timeout\n            cancelTimeout();\n        }\n    }\n    createTimeoutSignal(timeoutMs) {\n        if (typeof timeoutMs === \"number\") {\n            const controller = new DefaultNetworkTransport.AbortController();\n            // Call abort after a specific number of milliseconds\n            const timeout = setTimeout(() => {\n                controller.abort();\n            }, timeoutMs);\n            return {\n                signal: controller.signal,\n                cancelTimeout: () => {\n                    clearTimeout(timeout);\n                },\n            };\n        }\n        else {\n            return {\n                signal: undefined,\n                cancelTimeout: () => {\n                    /* No-op */\n                },\n            };\n        }\n    }\n}\nDefaultNetworkTransport.DEFAULT_HEADERS = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n};\n\n////////////////////////////////////////////////////////////////////////////\nDefaultNetworkTransport.fetch = window.fetch.bind(window);\nDefaultNetworkTransport.AbortController = window.AbortController;\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A basic transport, wrapping a NetworkTransport from the \"realm-network-transport\" package, injecting a baseUrl.\n */\nclass BaseTransport {\n    /**\n     * Constructs a base transport, which takes paths (prepended by a base URL) instead of absolute urls.\n     *\n     * @param networkTransport The underlying network transport.\n     * @param baseUrl The base URL to prepend to paths.\n     * @param locationContext Optional object used to determine the actual base URL of the app.\n     * @param baseRoute Optional base route to prepend to the base URL.\n     */\n    constructor(networkTransport = new DefaultNetworkTransport(), baseUrl, locationContext, baseRoute = BaseTransport.DEFAULT_BASE_ROUTE) {\n        this.networkTransport = networkTransport;\n        this.baseUrl = baseUrl;\n        this.locationContext = locationContext;\n        this.baseRoute = baseRoute;\n    }\n    /** @inheritdoc */\n    async fetch(request) {\n        const { path, headers, ignoreLocation = false, ...restOfRequest } = request;\n        // Determine the base url\n        const baseUrl = await this.determineBaseUrl(ignoreLocation);\n        // Execute the request\n        return this.networkTransport.fetchAndParse({\n            ...restOfRequest,\n            url: baseUrl + path,\n            headers: { ...BaseTransport.DEFAULT_HEADERS, ...headers },\n        });\n    }\n    /** @inheritdoc */\n    prefix(pathPrefix) {\n        return new PrefixedTransport(this, pathPrefix);\n    }\n    /**\n     * Determines the base URL from the configuration or from the location context.\n     *\n     * @param ignoreLocation Ignore the location context.\n     */\n    async determineBaseUrl(ignoreLocation) {\n        if (ignoreLocation || !this.locationContext) {\n            return this.baseUrl + this.baseRoute;\n        }\n        else {\n            const location = await this.locationContext.location;\n            return location.hostname + this.baseRoute;\n        }\n    }\n}\n/**\n * This base route will be prefixed requests issued through by the base transport.\n */\nBaseTransport.DEFAULT_BASE_ROUTE = \"/api/client/v2.0\";\n/**\n * Default headers that will always be sat on requests.\n */\nBaseTransport.DEFAULT_HEADERS = {\n    Accept: \"application/json\",\n    \"Content-Type\": \"application/json\",\n};\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Fetches resources as a particular user.\n */\nclass AuthenticatedTransport {\n    /**\n     * Constructs a transport that injects authorization headers to requests.\n     *\n     * @param transport The underlying transport.\n     * @param userContext The context controlling what user is authenticated.\n     */\n    constructor(transport, userContext) {\n        this.transport = transport;\n        this.userContext = userContext;\n    }\n    /**\n     * Fetch a network resource as an authenticated user.\n     *\n     * @param request The request to issue towards the server.\n     * @param user The user used when fetching, defaults to the `app.currentUser`.\n     *             If `null`, the fetch will be unauthenticated.\n     * @param retries How many times was this request retried?\n     * @returns A response from requesting with authentication.\n     */\n    async fetch(request, user = this.userContext.currentUser, retries = 0) {\n        try {\n            const { tokenType = \"access\", ...rest } = request;\n            // Awaiting to intercept errors being thrown\n            return await this.transport.fetch({\n                ...rest,\n                headers: {\n                    ...this.buildAuthorizationHeader(user, tokenType),\n                    ...request.headers,\n                },\n            });\n        }\n        catch (err) {\n            if (user &&\n                retries === 0 &&\n                err instanceof MongoDBRealmError &&\n                err.statusCode === 401) {\n                // Refresh the access token\n                await user.refreshAccessToken();\n                // Retry\n                return this.fetch(request, user, retries + 1);\n            }\n            throw err;\n        }\n    }\n    /** @inheritdoc */\n    prefix(pathPrefix) {\n        const prefixedTransport = this.transport.prefix(pathPrefix);\n        return new AuthenticatedTransport(prefixedTransport, this.userContext);\n    }\n    /**\n     * Generate an object with an authorization header to issue requests as a specific user.\n     *\n     * @param user An optional user to generate the header for.\n     * @param tokenType The type of token (access or refresh).\n     * @returns An object containing with the users access token as authorization header or undefined if no user is given.\n     */\n    buildAuthorizationHeader(user, tokenType) {\n        if (user && tokenType === \"access\") {\n            return { Authorization: `Bearer ${user.accessToken}` };\n        }\n        else if (user && tokenType === \"refresh\") {\n            return { Authorization: `Bearer ${user.refreshToken}` };\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * The type of a user.\n */\nvar UserType;\n(function (UserType) {\n    /**\n     * A normal end-user created this user.\n     */\n    UserType[\"Normal\"] = \"normal\";\n    /**\n     * The user was created by the server.\n     */\n    UserType[\"Server\"] = \"server\";\n})(UserType || (UserType = {}));\n/** @ignore */\nvar DataKey;\n(function (DataKey) {\n    /** @ignore */\n    DataKey[\"NAME\"] = \"name\";\n    /** @ignore */\n    DataKey[\"EMAIL\"] = \"email\";\n    /** @ignore */\n    DataKey[\"PICTURE\"] = \"picture\";\n    /** @ignore */\n    DataKey[\"FIRST_NAME\"] = \"first_name\";\n    /** @ignore */\n    DataKey[\"LAST_NAME\"] = \"last_name\";\n    /** @ignore */\n    DataKey[\"GENDER\"] = \"gender\";\n    /** @ignore */\n    DataKey[\"BIRTHDAY\"] = \"birthday\";\n    /** @ignore */\n    DataKey[\"MIN_AGE\"] = \"min_age\";\n    /** @ignore */\n    DataKey[\"MAX_AGE\"] = \"max_age\";\n})(DataKey || (DataKey = {}));\nconst DATA_MAPPING = {\n    [DataKey.NAME]: \"name\",\n    [DataKey.EMAIL]: \"email\",\n    [DataKey.PICTURE]: \"pictureUrl\",\n    [DataKey.FIRST_NAME]: \"firstName\",\n    [DataKey.LAST_NAME]: \"lastName\",\n    [DataKey.GENDER]: \"gender\",\n    [DataKey.BIRTHDAY]: \"birthday\",\n    [DataKey.MIN_AGE]: \"minAge\",\n    [DataKey.MAX_AGE]: \"maxAge\",\n};\n/** @inheritdoc */\nclass UserProfile {\n    /**\n     * Construct a user profile from the body of a response.\n     *\n     * @param response The response of a call fetching the users profile.\n     */\n    constructor(response) {\n        /** @inheritdoc */\n        this.type = UserType.Normal;\n        /** @inheritdoc */\n        this.identities = [];\n        if (response) {\n            if (typeof response.type === \"string\") {\n                this.type = response.type;\n            }\n            else {\n                throw new Error(\"Expected 'type' in the response body\");\n            }\n            if (Array.isArray(response.identities)) {\n                this.identities = response.identities.map((identity) => {\n                    return {\n                        id: identity.id,\n                        providerId: identity[\"provider_id\"],\n                        providerType: identity[\"provider_type\"],\n                    };\n                });\n            }\n            else {\n                throw new Error(\"Expected 'identities' in the response body\");\n            }\n            const { data } = response;\n            if (typeof data === \"object\") {\n                for (const key in DATA_MAPPING) {\n                    const value = data[key];\n                    const propertyName = DATA_MAPPING[key];\n                    if (typeof value === \"string\" &&\n                        propertyName !== \"identities\" &&\n                        propertyName !== \"type\") {\n                        this[propertyName] = value;\n                    }\n                }\n            }\n            else {\n                throw new Error(\"Expected 'data' in the response body\");\n            }\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * A `Storage` which will prefix a key part to every operation.\n */\nclass PrefixedStorage {\n    /**\n     * Construct a `Storage` which will prefix a key part to every operation.\n     *\n     * @param storage The underlying storage to use for operations.\n     * @param keyPart The part of the key to prefix when performing operations.\n     */\n    constructor(storage, keyPart) {\n        this.storage = storage;\n        this.keyPart = keyPart;\n    }\n    /** @inheritdoc */\n    get(key) {\n        return this.storage.get(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    set(key, value) {\n        return this.storage.set(this.keyPart + PrefixedStorage.PART_SEPARATOR + key, value);\n    }\n    /** @inheritdoc */\n    remove(key) {\n        return this.storage.remove(this.keyPart + PrefixedStorage.PART_SEPARATOR + key);\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n        return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix = \"\") {\n        return this.storage.clear(this.keyPart + PrefixedStorage.PART_SEPARATOR + prefix);\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n        return this.storage.addListener(listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n        return this.storage.addListener(listener);\n    }\n}\n/**\n * The string separating two parts.\n */\nPrefixedStorage.PART_SEPARATOR = \":\";\n\n////////////////////////////////////////////////////////////////////////////\nconst ACCESS_TOKEN_STORAGE_KEY = \"accessToken\";\nconst REFRESH_TOKEN_STORAGE_KEY = \"refreshToken\";\nconst PROFILE_STORAGE_KEY = \"profile\";\n/**\n * Storage specific to the app.\n */\nclass UserStorage extends PrefixedStorage {\n    /**\n     * Construct a storage for a `User`.\n     *\n     * @param storage The underlying storage to wrap.\n     * @param userId The id of the user.\n     */\n    constructor(storage, userId) {\n        super(storage, `user(${userId})`);\n    }\n    /**\n     * Get the access token from storage.\n     *\n     * @returns Access token (null if unknown).\n     */\n    get accessToken() {\n        return this.get(ACCESS_TOKEN_STORAGE_KEY);\n    }\n    /**\n     * Set the access token in storage.\n     *\n     * @param value Access token (null if unknown).\n     */\n    set accessToken(value) {\n        if (value === null) {\n            this.remove(ACCESS_TOKEN_STORAGE_KEY);\n        }\n        else {\n            this.set(ACCESS_TOKEN_STORAGE_KEY, value);\n        }\n    }\n    /**\n     * Get the refresh token from storage.\n     *\n     * @returns Refresh token (null if unknown and user is logged out).\n     */\n    get refreshToken() {\n        return this.get(REFRESH_TOKEN_STORAGE_KEY);\n    }\n    /**\n     * Set the refresh token in storage.\n     *\n     * @param value Refresh token (null if unknown and user is logged out).\n     */\n    set refreshToken(value) {\n        if (value === null) {\n            this.remove(REFRESH_TOKEN_STORAGE_KEY);\n        }\n        else {\n            this.set(REFRESH_TOKEN_STORAGE_KEY, value);\n        }\n    }\n    /**\n     * Get the user profile from storage.\n     *\n     * @returns User profile (undefined if its unknown).\n     */\n    get profile() {\n        const value = this.get(PROFILE_STORAGE_KEY);\n        if (value) {\n            const profile = new UserProfile();\n            // Patch in the values\n            Object.assign(profile, JSON.parse(value));\n            return profile;\n        }\n    }\n    /**\n     * Set the user profile in storage.\n     *\n     * @param value User profile (undefined if its unknown).\n     */\n    set profile(value) {\n        if (!value) {\n            this.remove(PROFILE_STORAGE_KEY);\n        }\n        else {\n            this.set(PROFILE_STORAGE_KEY, JSON.stringify(value));\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass EmailPasswordAuth {\n    /**\n     * Construct an interface to the email / password authentication provider.\n     *\n     * @param transport The underlying transport used to request the services.\n     * @param providerName Optional custom name of the authentication provider.\n     */\n    constructor(transport, providerName = \"local-userpass\") {\n        this.transport = transport.prefix(`/auth/providers/${providerName}`);\n    }\n    /** @inheritdoc */\n    registerUser(email, password) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/register\",\n            body: { email, password },\n        });\n    }\n    /** @inheritdoc */\n    confirmUser(token, tokenId) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/confirm\",\n            body: { token, tokenId },\n        });\n    }\n    /** @inheritdoc */\n    resendConfirmationEmail(email) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/confirm/send\",\n            body: { email },\n        });\n    }\n    /** @inheritdoc */\n    resetPassword(token, tokenId, password) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/reset\",\n            body: { token, tokenId, password },\n        });\n    }\n    /** @inheritdoc */\n    sendResetPasswordEmail(email) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/reset/send\",\n            body: { email },\n        });\n    }\n    /** @inheritdoc */\n    callResetPasswordFunction(email, password, ...args) {\n        return this.transport.fetch({\n            method: \"POST\",\n            path: \"/reset/call\",\n            body: { email, password, arguments: args },\n        });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/** @inheritdoc */\nclass ApiKeyAuth {\n    /**\n     * Construct an interface to the API-key authentication provider.\n     *\n     * @param transport The transport used to send requests to services.\n     * @param providerName Optional custom name of the authentication provider.\n     */\n    constructor(transport, providerName = \"api-key\") {\n        this.transport = transport.prefix(\"/auth/api_keys\");\n    }\n    /** @inheritdoc */\n    create(name) {\n        return this.transport\n            .fetch({\n            method: \"POST\",\n            body: { name },\n            tokenType: \"refresh\",\n        })\n            .then(deserialize);\n    }\n    /** @inheritdoc */\n    fetch(keyId) {\n        return this.transport\n            .fetch({\n            method: \"GET\",\n            path: `/${keyId}`,\n            tokenType: \"refresh\",\n        })\n            .then(deserialize);\n    }\n    /** @inheritdoc */\n    fetchAll() {\n        return this.transport\n            .fetch({ method: \"GET\", tokenType: \"refresh\" })\n            .then(deserialize);\n    }\n    /** @inheritdoc */\n    delete(keyId) {\n        return this.transport\n            .fetch({\n            method: \"DELETE\",\n            path: `/${keyId}`,\n            tokenType: \"refresh\",\n        })\n            .then(deserialize);\n    }\n    /** @inheritdoc */\n    enable(keyId) {\n        return this.transport\n            .fetch({\n            method: \"PUT\",\n            path: `/${keyId}/enable`,\n            tokenType: \"refresh\",\n        })\n            .then(deserialize);\n    }\n    /** @inheritdoc */\n    disable(keyId) {\n        return this.transport\n            .fetch({\n            method: \"PUT\",\n            path: `/${keyId}/disable`,\n            tokenType: \"refresh\",\n        })\n            .then(deserialize);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nvar UserState;\n(function (UserState) {\n    UserState[\"Active\"] = \"active\";\n    UserState[\"LoggedOut\"] = \"logged-out\";\n    UserState[\"Removed\"] = \"removed\";\n})(UserState || (UserState = {}));\nvar UserType$1;\n(function (UserType) {\n    UserType[\"Normal\"] = \"normal\";\n    UserType[\"Server\"] = \"server\";\n})(UserType$1 || (UserType$1 = {}));\nasync function performLogIn(app, credentials) {\n    // See https://github.com/mongodb/stitch-js-sdk/blob/310f0bd5af80f818cdfbc3caf1ae29ffa8e9c7cf/packages/core/sdk/src/auth/internal/CoreStitchAuth.ts#L746-L780\n    const response = await app.appTransport.fetch({\n        method: \"POST\",\n        path: `/auth/providers/${credentials.providerName}/login`,\n        body: credentials.payload,\n    });\n    // Spread out values from the response and ensure they're valid\n    const { user_id: id, access_token: accessToken, refresh_token: refreshToken, } = response;\n    if (typeof id !== \"string\") {\n        throw new Error(\"Expected a user id in the response\");\n    }\n    if (typeof accessToken !== \"string\") {\n        throw new Error(\"Expected an access token in the response\");\n    }\n    if (typeof refreshToken !== \"string\") {\n        throw new Error(\"Expected a refresh token in the response\");\n    }\n    return { id, accessToken, refreshToken };\n}\n/**\n * Representation of an authenticated user of an app.\n */\nclass User {\n    constructor({ app, id, accessToken, refreshToken }) {\n        this.app = app;\n        this._id = id;\n        this._accessToken = accessToken;\n        this._refreshToken = refreshToken;\n        this.transport = new AuthenticatedTransport(app.baseTransport, {\n            currentUser: this,\n        });\n        const appTransport = new AppTransport(this.transport, app.id);\n        this.apiKeys = new ApiKeyAuth(this.transport);\n        this.functions = FunctionsFactory.create(appTransport);\n        this.storage = new UserStorage(app.storage, id);\n        // Store tokens in storage for later hydration\n        if (accessToken) {\n            this.storage.accessToken = accessToken;\n        }\n        if (refreshToken) {\n            this.storage.refreshToken = refreshToken;\n        }\n    }\n    /**\n     * Creates a user from the data stored in the storage of an `App` instance.\n     *\n     * @param app The app that the user was logged into.\n     * @param userId The id of the user to restore.\n     * @returns The user created from values retrieved from storage.\n     */\n    static hydrate(app, userId) {\n        const user = new User({\n            app,\n            id: userId,\n            accessToken: null,\n            refreshToken: null,\n        });\n        user.hydrate();\n        return user;\n    }\n    /**\n     * The automatically-generated internal id of the user.\n     *\n     * @returns The id of the user in the MongoDB Realm database.\n     */\n    get id() {\n        return this._id;\n    }\n    /**\n     * @returns The access token used to authenticate the user towards MongoDB Realm.\n     */\n    get accessToken() {\n        return this._accessToken;\n    }\n    /**\n     * @param token The new access token.\n     */\n    set accessToken(token) {\n        this._accessToken = token;\n        this.storage.accessToken = token;\n    }\n    /**\n     * @returns The refresh token used to issue new access tokens.\n     */\n    get refreshToken() {\n        return this._refreshToken;\n    }\n    /**\n     * @param token The new refresh token.\n     */\n    set refreshToken(token) {\n        this._refreshToken = token;\n        this.storage.refreshToken = token;\n    }\n    /**\n     * The state of the user is one of:\n     * - \"active\" The user is logged in and ready.\n     * - \"logged-out\" The user was logged in, but is no longer logged in.\n     * - \"removed\" The user was logged in, but removed entirely from the app again.\n     *\n     * @returns The current state of the user.\n     */\n    get state() {\n        if (this.app.allUsers.indexOf(this) === -1) {\n            return UserState.Removed;\n        }\n        else {\n            return this.refreshToken === null\n                ? UserState.LoggedOut\n                : UserState.Active;\n        }\n    }\n    get customData() {\n        if (this.accessToken) {\n            const decodedToken = this.decodeAccessToken();\n            return decodedToken.userData;\n        }\n        else {\n            throw new Error(\"Cannot read custom data without an access token\");\n        }\n    }\n    /**\n     * @returns Profile containing detailed information about the user.\n     */\n    get profile() {\n        if (this._profile) {\n            return this._profile;\n        }\n        else {\n            throw new Error(\"A profile was never fetched for this user\");\n        }\n    }\n    async refreshProfile() {\n        // Fetch the latest profile\n        const response = await this.transport.fetch({\n            method: \"GET\",\n            path: \"/auth/profile\",\n        });\n        // Create a profile instance\n        this._profile = new UserProfile(response);\n        // Store this for later hydration\n        this.storage.profile = this._profile;\n    }\n    async logOut() {\n        // Invalidate the refresh token\n        if (this._refreshToken !== null) {\n            await this.app.baseTransport.fetch({\n                method: \"DELETE\",\n                path: \"/auth/session\",\n                headers: {\n                    Authorization: `Bearer ${this._refreshToken}`,\n                },\n            });\n        }\n        // Forget the access and refresh token\n        this.accessToken = null;\n        this.refreshToken = null;\n    }\n    /**\n     * Authenticate and retrieve the access and refresh tokens.\n     *\n     * @param credentials Credentials to use when logging in.\n     */\n    async logIn(credentials) {\n        const { id, accessToken, refreshToken } = await performLogIn(this.app, credentials);\n        if (id !== this.id) {\n            throw new Error(\"Logged into a different user\");\n        }\n        // Store the access and refresh token\n        this.accessToken = accessToken;\n        this.refreshToken = refreshToken;\n    }\n    /** @inheritdoc */\n    async linkCredentials(credentials) {\n        throw new Error(\"Not yet implemented\");\n    }\n    async refreshAccessToken() {\n        const response = await this.app.baseTransport.fetch({\n            method: \"POST\",\n            path: \"/auth/session\",\n            headers: {\n                Authorization: `Bearer ${this.refreshToken}`,\n            },\n        });\n        const { access_token: accessToken } = response;\n        if (typeof accessToken === \"string\") {\n            this.accessToken = accessToken;\n        }\n        else {\n            throw new Error(\"Expected an 'access_token' in the response\");\n        }\n    }\n    async refreshCustomData() {\n        await this.refreshAccessToken();\n        return this.customData;\n    }\n    callFunction(name, ...args) {\n        return this.functions.callFunction(name, ...args);\n    }\n    /**\n     * Restore a user from the data stored in the storage of an `App` instance.\n     */\n    hydrate() {\n        // Hydrate tokens\n        const accessToken = this.storage.accessToken;\n        const refreshToken = this.storage.refreshToken;\n        const profile = this.storage.profile;\n        if (typeof accessToken === \"string\") {\n            this.accessToken = accessToken;\n        }\n        if (typeof refreshToken === \"string\") {\n            this.refreshToken = refreshToken;\n        }\n        if (typeof profile === \"object\") {\n            this._profile = profile;\n        }\n    }\n    push(serviceName = \"\") {\n        throw new Error(\"Not yet implemented\");\n    }\n    decodeAccessToken() {\n        if (this.accessToken) {\n            // Decode and spread the token\n            const parts = this.accessToken.split(\".\");\n            if (parts.length !== 3) {\n                throw new Error(\"Expected three parts\");\n            }\n            // Decode the payload\n            const encodedPayload = parts[1];\n            const decodedPayload = base64.Base64.decode(encodedPayload);\n            const parsedPayload = JSON.parse(decodedPayload);\n            const { exp: expires, iat: issuedAt, user_data: userData = {}, } = parsedPayload;\n            // Validate the types\n            if (typeof expires !== \"number\") {\n                throw new Error(\"Failed to decode access token 'exp'\");\n            }\n            else if (typeof issuedAt !== \"number\") {\n                throw new Error(\"Failed to decode access token 'iat'\");\n            }\n            return { expires, issuedAt, userData };\n        }\n        else {\n            throw new Error(\"Missing an access token\");\n        }\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n// TODO: Ensure the static interface of the Credentials class implements the static interface of Realm.Credentials\n// See https://stackoverflow.com/a/43484801\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nclass Credentials {\n    /**\n     * Constructs an instance of credentials.\n     *\n     * @param providerName The name of the authentication provider used when authenticating.\n     * @param providerType The type of the authentication provider used when authenticating.\n     * @param payload The data being sent to the service when authenticating.\n     */\n    constructor(providerName, providerType, payload) {\n        this.providerName = providerName;\n        this.providerType = providerType;\n        this.payload = payload;\n    }\n    /**\n     * Creates credentials that logs in using the [Anonymous Provider](https://docs.mongodb.com/realm/authentication/anonymous/).\n     *\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static anonymous() {\n        return new Credentials(\"anon-user\", \"anon-user\", {});\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @deprecated Use `Credentials.apiKey`.\n     *\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static userApiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @deprecated Use `Credentials.apiKey`.\n     *\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static serverApiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [API Key Provider](https://docs.mongodb.com/realm/authentication/api-key/).\n     *\n     * @param key The secret content of the API key.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static apiKey(key) {\n        return new Credentials(\"api-key\", \"api-key\", { key });\n    }\n    /**\n     * Creates credentials that logs in using the [Email/Password Provider](https://docs.mongodb.com/realm/authentication/email-password/).\n     * Note: This was formerly known as the \"Username/Password\" provider.\n     *\n     * @param email The end-users email address.\n     * @param password The end-users password.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static emailPassword(email, password) {\n        return new Credentials(\"local-userpass\", \"local-userpass\", {\n            username: email,\n            password,\n        });\n    }\n    /**\n     * Creates credentials that logs in using the [Custom Function Provider](https://docs.mongodb.com/realm/authentication/custom-function/).\n     *\n     * @param payload The custom payload as expected by the server.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static function(payload) {\n        return new Credentials(\"custom-function\", \"custom-function\", payload);\n    }\n    /**\n     * Creates credentials that logs in using the [Custom JWT Provider](https://docs.mongodb.com/realm/authentication/custom-jwt/).\n     *\n     * @param token The JSON Web Token (JWT).\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static jwt(token) {\n        return new Credentials(\"custom-token\", \"custom-token\", {\n            token,\n        });\n    }\n    /**\n     * Creates credentials that logs in using the [Google Provider](https://docs.mongodb.com/realm/authentication/google/).\n     *\n     * @param redirectUrlOrAuthCode The URL that users should be redirected to or the auth code returned from Google.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static google(redirectUrlOrAuthCode) {\n        return new Credentials(\"oauth2-google\", \"oauth2-google\", redirectUrlOrAuthCode.includes(\"://\")\n            ? { redirectUrl: redirectUrlOrAuthCode }\n            : { authCode: redirectUrlOrAuthCode });\n    }\n    /**\n     * Creates credentials that logs in using the [Facebook Provider](https://docs.mongodb.com/realm/authentication/facebook/).\n     *\n     * @param redirectUrlOrAccessToken The URL that users should be redirected to or the auth code returned from Facebook.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static facebook(redirectUrlOrAccessToken) {\n        return new Credentials(\"oauth2-facebook\", \"oauth2-facebook\", redirectUrlOrAccessToken.includes(\"://\")\n            ? { redirectUrl: redirectUrlOrAccessToken }\n            : { accessToken: redirectUrlOrAccessToken });\n    }\n    /**\n     * Creates credentials that logs in using the [Apple ID Provider](https://docs.mongodb.com/realm/authentication/apple/).\n     *\n     * @param redirectUrlOrIdToken The URL that users should be redirected to or the id_token returned from Apple.\n     * @returns The credentials instance, which can be passed to `app.logIn`.\n     */\n    static apple(redirectUrlOrIdToken) {\n        return new Credentials(\"oauth2-apple\", \"oauth2-apple\", redirectUrlOrIdToken.includes(\"://\")\n            ? { redirectUrl: redirectUrlOrIdToken }\n            : {\n                // eslint-disable-next-line @typescript-eslint/camelcase\n                id_token: redirectUrlOrIdToken,\n            });\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * A remote collection of documents.\n */\nclass MongoDBCollection {\n    /**\n     * Construct a remote collection of documents.\n     *\n     * @param transport The transport to use when requesting the service.\n     * @param serviceName The name of the remote service.\n     * @param databaseName The name of the database.\n     * @param collectionName The name of the remote collection.\n     */\n    constructor(transport, serviceName, databaseName, collectionName) {\n        this.functions = FunctionsFactory.create(transport, {\n            serviceName,\n        });\n        this.databaseName = databaseName;\n        this.collectionName = collectionName;\n    }\n    /** @inheritdoc */\n    find(filter = {}, options = {}) {\n        return this.functions.find({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n            limit: options.limit,\n        });\n    }\n    /** @inheritdoc */\n    findOne(filter = {}, options = {}) {\n        return this.functions.findOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            project: options.projection,\n            sort: options.sort,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndUpdate(filter = {}, update, options = {}) {\n        return this.functions.findOneAndUpdate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter,\n            update,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndReplace(filter = {}, replacement, options = {}) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter: filter,\n            update: replacement,\n            sort: options.sort,\n            projection: options.projection,\n            upsert: options.upsert,\n            returnNewDocument: options.returnNewDocument,\n        });\n    }\n    /** @inheritdoc */\n    findOneAndDelete(filter = {}, options = {}) {\n        return this.functions.findOneAndReplace({\n            database: this.databaseName,\n            collection: this.collectionName,\n            filter,\n            sort: options.sort,\n            projection: options.projection,\n        });\n    }\n    /** @inheritdoc */\n    aggregate(pipeline) {\n        return this.functions.aggregate({\n            database: this.databaseName,\n            collection: this.collectionName,\n            pipeline,\n        });\n    }\n    /** @inheritdoc */\n    count(filter = {}, options = {}) {\n        return this.functions.count({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            limit: options.limit,\n        });\n    }\n    /** @inheritdoc */\n    insertOne(document) {\n        return this.functions.insertOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            document,\n        });\n    }\n    /** @inheritdoc */\n    insertMany(documents) {\n        return this.functions.insertMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            documents,\n        });\n    }\n    /** @inheritdoc */\n    deleteOne(filter = {}) {\n        return this.functions.deleteOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n    /** @inheritdoc */\n    deleteMany(filter = {}) {\n        return this.functions.deleteMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n        });\n    }\n    /** @inheritdoc */\n    updateOne(filter, update, options = {}) {\n        return this.functions.updateOne({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n        });\n    }\n    /** @inheritdoc */\n    updateMany(filter, update, options = {}) {\n        return this.functions.updateMany({\n            database: this.databaseName,\n            collection: this.collectionName,\n            query: filter,\n            update,\n            upsert: options.upsert,\n        });\n    }\n    /** @inheritdoc */\n    watch() {\n        throw new Error(\"Not yet implemented\");\n    }\n}\n/**\n * Creates an Remote MongoDB Collection.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName A service name.\n * @param databaseName A database name.\n * @param collectionName A collection name.\n * @returns The collection.\n */\nfunction createCollection(transport, serviceName, databaseName, collectionName) {\n    return new MongoDBCollection(transport, serviceName, databaseName, collectionName);\n}\n/**\n * Creates a Remote MongoDB Database.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport\n * @param serviceName A service name\n * @param databaseName A database name\n * @returns The database.\n */\nfunction createDatabase(transport, serviceName, databaseName) {\n    return {\n        collection: createCollection.bind(null, transport, serviceName, databaseName),\n    };\n}\n/**\n * Creates a Remote MongoDB Service.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName An optional service name.\n * @returns The service.\n */\nfunction createService(transport, serviceName = \"mongo-db\") {\n    return { db: createDatabase.bind(null, transport, serviceName) };\n}\n\n////////////////////////////////////////////////////////////////////////////\n// @see https://github.com/mongodb/stitch-js-sdk/blob/master/packages/core/services/http/src/internal/CoreHttpServiceClient.ts\n/**\n * The Stitch HTTP Service is a generic interface that enables you to communicate with any service that is available over HTTP.\n *\n * @see https://docs.mongodb.com/stitch/services/http/\n */\nclass HTTPService {\n    /**\n     * Construct an HTTP Service.\n     *\n     * @param transport The underlying transport.\n     * @param serviceName An optional service name.\n     */\n    constructor(transport, serviceName = \"http\") {\n        this.functions = FunctionsFactory.create(transport, {\n            serviceName,\n        });\n    }\n    /**\n     * Sends an HTTP GET request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    get(url, options = {}) {\n        return this.functions.get({ url, ...options });\n    }\n    /**\n     * Sends an HTTP POST request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    post(url, options = {}) {\n        return this.functions.post({ url, ...options });\n    }\n    /**\n     * Sends an HTTP PUT request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    put(url, options = {}) {\n        return this.functions.put({ url, ...options });\n    }\n    /**\n     * Sends an HTTP DELETE request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    delete(url, options = {}) {\n        return this.functions.delete({ url, ...options });\n    }\n    /**\n     * Sends an HTTP HEAD request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    head(url, options = {}) {\n        return this.functions.head({ url, ...options });\n    }\n    /**\n     * Sends an HTTP PATCH request to the specified URL.\n     *\n     * @param url The URL to send the request to.\n     * @param options Options related to the request.\n     * @returns The response.\n     */\n    patch(url, options = {}) {\n        return this.functions.patch({ url, ...options });\n    }\n}\n/**\n * Creates an HTTP Service.\n * Note: This method exists to enable function binding.\n *\n * @param transport The underlying transport.\n * @param serviceName An optional service name.\n * @returns The new HTTP Service.\n */\nfunction createService$1(transport, serviceName = \"http\") {\n    return new HTTPService(transport, serviceName);\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * Create all services for a particular app.\n *\n * @param transport The transport to use when senting requests to the services.\n * @returns An object containing functions that create the individual services.\n */\nfunction create(transport) {\n    return {\n        mongodb: createService.bind(null, transport),\n        http: createService$1.bind(null, transport),\n    };\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst USER_IDS_STORAGE_KEY = \"userIds\";\n/**\n * Storage specific to the app.\n */\nclass AppStorage extends PrefixedStorage {\n    /**\n     * Construct a storage for an `App`\n     *\n     * @param storage The underlying storage to wrap.\n     * @param appId The id of the app.\n     */\n    constructor(storage, appId) {\n        super(storage, `app(${appId})`);\n    }\n    /**\n     * Reads out the list of user ids from storage.\n     *\n     * @returns A list of user ids.\n     */\n    getUserIds() {\n        try {\n            const userIdsString = this.get(USER_IDS_STORAGE_KEY);\n            const userIds = userIdsString ? JSON.parse(userIdsString) : [];\n            if (Array.isArray(userIds)) {\n                // Remove any duplicates that might have been added\n                // The Set preserves insertion order\n                return [...new Set(userIds)];\n            }\n            else {\n                throw new Error(\"Expected an array\");\n            }\n        }\n        catch (err) {\n            // The storage was corrupted\n            this.remove(USER_IDS_STORAGE_KEY);\n            throw err;\n        }\n    }\n    /**\n     * Sets the list of ids in storage.\n     * Optionally merging with existing ids stored in the storage, by prepending these while voiding duplicates.\n     *\n     * @param userIds The list of ids to store.\n     * @param mergeWithExisting Prepend existing ids to avoid data-races with other apps using this storage.\n     */\n    setUserIds(userIds, mergeWithExisting) {\n        if (mergeWithExisting) {\n            // Add any existing user id to the end of this list, avoiding duplicates\n            const existingIds = this.getUserIds();\n            for (const id of existingIds) {\n                if (userIds.indexOf(id) === -1) {\n                    userIds.push(id);\n                }\n            }\n        }\n        // Store the list of ids\n        this.set(USER_IDS_STORAGE_KEY, JSON.stringify(userIds));\n    }\n    /**\n     * Remove an id from the list of ids.\n     *\n     * @param userId The id of a User to be removed.\n     */\n    removeUserId(userId) {\n        const existingIds = this.getUserIds();\n        const userIds = existingIds.filter(id => id !== userId);\n        // Store the list of ids\n        this.setUserIds(userIds, false);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\n/**\n * Generate a random sequence of characters.\n *\n * @param length The length of the string.\n * @param alphabet The alphabet of characters to pick from.\n * @returns A string of characters picked randomly from `alphabet`.\n */\nfunction generateRandomString(length, alphabet) {\n    let result = \"\";\n    for (let i = 0; i < length; i++) {\n        result += alphabet[Math.floor(Math.random() * alphabet.length)];\n    }\n    return result;\n}\n/**\n * Encode an object mapping from string to string, into a query string to be appended a URL.\n *\n * @param params The parameters to include in the string.\n * @returns A URL encoded representation of the parameters.\n */\nfunction encodeQueryString(params) {\n    return Object.entries(params)\n        .map(([k, v]) => [k, encodeURIComponent(v)])\n        .map(([k, v]) => `${k}=${v}`)\n        .join(\"&\");\n}\n/**\n * Decodes a query string into an object.\n *\n * @param str The query string to decode.\n * @returns The decoded query string.\n */\nfunction decodeQueryString(str) {\n    return Object.fromEntries(str\n        .split(\"&\")\n        .map(kvp => kvp.split(\"=\"))\n        .map(([k, v]) => [k, decodeURIComponent(v)]));\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nlet environment = null;\n/**\n * Set the environment of execution.\n * Note: This should be called as the first thing before executing any code which calls getEnvironment()\n *\n * @param e An object containing environment specific implementations.\n */\nfunction setEnvironment(e) {\n    environment = e;\n}\n/**\n * Get the environment of execution.\n *\n * @returns An object containing environment specific implementations.\n */\nfunction getEnvironment() {\n    if (environment) {\n        return environment;\n    }\n    else {\n        throw new Error(\"Cannot get environment before it's set\");\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n//\n// Copyright 2020 Realm Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n// http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n////////////////////////////////////////////////////////////////////////////\nconst LOWERCASE_LETTERS = \"abcdefghijklmnopqrstuvwxyz\";\nconst CLOSE_CHECK_INTERVAL = 100; // 10 times per second\n/* eslint-disable @typescript-eslint/camelcase */\nconst REDIRECT_HASH_TO_RESULT = {\n    _stitch_client_app_id: \"appId\",\n    _baas_client_app_id: \"appId\",\n    _stitch_ua: \"userAuth\",\n    _baas_ua: \"userAuth\",\n    _stitch_link: \"link\",\n    _baas_link: \"link\",\n    _stitch_error: \"error\",\n    _baas_error: \"error\",\n    _stitch_state: \"state\",\n    _baas_state: \"state\",\n};\n/* eslint-enable @typescript-eslint/camelcase */\n/**\n * A collection of methods helping implement the OAuth2 flow.\n */\nclass OAuth2Helper {\n    /**\n     * Construct a helper implementing the OAuth2 flow.\n     *\n     * @param storage The underlying storage to use when storing and retriving secrets.\n     * @param getAppUrl Call this to determine the app url.\n     * @param openWindow An optional function called when a browser window needs to open.\n     */\n    constructor(storage, getAppUrl, openWindow = getEnvironment().openWindow) {\n        this.storage = storage.prefix(\"oauth2\");\n        this.getAppUrl = getAppUrl;\n        this.openWindow = openWindow;\n    }\n    /**\n     * Parses the query string from the final step of the OAuth flow.\n     *\n     * @param queryString The query string passed through in location.hash.\n     * @returns The result of the OAuth flow.\n     */\n    static parseRedirectLocation(queryString) {\n        const params = decodeQueryString(queryString);\n        const result = {};\n        for (const [p, r] of Object.entries(REDIRECT_HASH_TO_RESULT)) {\n            const value = params[p];\n            if (value) {\n                result[r] = value;\n            }\n        }\n        return result;\n    }\n    /**\n     * Handle the redirect querystring by parsing it and storing it for others to consume.\n     *\n     * @param queryString The query string containing the encoded result from the OAuth provider.\n     * @param storage The underlying storage used to persist the result.\n     */\n    static handleRedirect(queryString, storage = getEnvironment().defaultStorage) {\n        const helper = new OAuth2Helper(storage, async () => {\n            throw new Error(\"This instance cannot be used to initiate a flow\");\n        });\n        const result = OAuth2Helper.parseRedirectLocation(queryString);\n        helper.handleRedirect(result);\n    }\n    /**\n     * Decodes the authInfo string into its seperate parts.\n     *\n     * @param authInfo An authInfo string returned from the server.\n     * @returns An object containing the separate parts of the authInfo string.\n     */\n    static decodeAuthInfo(authInfo) {\n        const parts = (authInfo || \"\").split(\"$\");\n        if (parts.length === 4) {\n            const [accessToken, refreshToken, userId, deviceId] = parts;\n            return { accessToken, refreshToken, userId, deviceId };\n        }\n        else {\n            throw new Error(\"Failed to decode 'authInfo' into ids and tokens\");\n        }\n    }\n    /**\n     * Initiates the flow by opening a browser window.\n     *\n     * @param credentials A set of OAuth2 credentials with a redirectUrl in its payload.\n     * @returns The secret.\n     */\n    async initiate(credentials) {\n        // TODO: Implement a timeout and an option to cancel.\n        const state = this.generateState();\n        const stateStorage = this.getStateStorage(state);\n        const url = await this.generateOAuth2Url(credentials, state);\n        // Return a promise that resolves when the  gets known\n        return new Promise((resolve, reject) => {\n            let redirectWindow = null;\n            // We're declaring the interval now to enable referencing before its initialized\n            let windowClosedInterval; // eslint-disable-line prefer-const\n            const handleStorageUpdate = () => {\n                // Trying to get the secret from storage\n                const result = stateStorage.get(\"result\");\n                if (result) {\n                    const parsedResult = JSON.parse(result);\n                    // The secret got updated!\n                    stateStorage.removeListener(handleStorageUpdate);\n                    // Clear the storage to prevent others from reading this\n                    stateStorage.clear();\n                    // Try closing the newly created window\n                    try {\n                        if (redirectWindow) {\n                            // Stop checking if the window closed\n                            clearInterval(windowClosedInterval);\n                            redirectWindow.close();\n                        }\n                    }\n                    catch (err) {\n                        console.warn(`Failed closing redirect window: ${err}`);\n                    }\n                    finally {\n                        resolve(parsedResult);\n                    }\n                }\n            };\n            // Add a listener to the state storage, awaiting an update to the secret\n            stateStorage.addListener(handleStorageUpdate);\n            // Open up a window\n            redirectWindow = this.openWindow(url);\n            // No using a const, because we need the two listeners to reference each other when removing the other.\n            windowClosedInterval = setInterval(() => {\n                if (redirectWindow && redirectWindow.closed) {\n                    clearInterval(windowClosedInterval);\n                    // Stop listening for changes to the storage\n                    stateStorage.removeListener(handleStorageUpdate);\n                    // Reject the promise\n                    const err = new Error(\"Window closed\");\n                    reject(err);\n                }\n            }, CLOSE_CHECK_INTERVAL);\n        });\n    }\n    /**\n     * Generate the URL to which the user should be redirected to initiate the OAuth2 flow.\n     *\n     * @param credentials A set of OAuth2 credentials with a redirectUrl in its payload.\n     * @param state A random state, used to track the request throughout the flow, avoiding CSRF attacks.\n     * @returns A URL to redirect the user to.\n     */\n    async generateOAuth2Url(credentials, state) {\n        const { redirectUrl } = credentials.payload;\n        const appUrl = await this.getAppUrl();\n        const qs = encodeQueryString({\n            redirect: redirectUrl,\n            state,\n        });\n        return `${appUrl}/auth/providers/${credentials.providerName}/login?${qs}`;\n    }\n    /**\n     * Handle a redirect.\n     *\n     * @param result The result from parsing the OAuth 2.0 redirect URL.\n     */\n    handleRedirect(result) {\n        const { state, error } = result;\n        if (typeof state === \"string\") {\n            const storage = this.getStateStorage(state);\n            storage.set(\"result\", JSON.stringify(result));\n        }\n        else if (error) {\n            throw new Error(`Failed to handle OAuth 2.0 redirect: ${error}`);\n        }\n        else {\n            throw new Error(\"Failed to handle OAuth 2.0 redirect.\");\n        }\n    }\n    /**\n     * Generate a random state string.\n     *\n     * @returns The random state string.\n     */\n    generateState() {\n        return generateRandomString(12, LOWERCASE_LETTERS);\n    }\n    /**\n     * Get the storage key associated of an secret associated with a state.\n     *\n     * @param state The random state.\n     * @returns The storage associated with a particular state.\n     */\n    getStateStorage(state) {\n        return this.storage.prefix(`state(${state})`);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * MongoDB Realm App\n */\nclass App {\n    /**\n     * Construct a Realm App, either from the Realm App id visible from the MongoDB Realm UI or a configuration.\n     *\n     * @param idOrConfiguration The Realm App id or a configuration to use for this app.\n     */\n    constructor(idOrConfiguration) {\n        /**\n         * An array of active and logged-out users.\n         * Elements in the beginning of the array is considered more recent than the later elements.\n         */\n        this.users = [];\n        // If the argument is a string, convert it to a simple configuration object.\n        const configuration = typeof idOrConfiguration === \"string\"\n            ? { id: idOrConfiguration }\n            : idOrConfiguration;\n        // Initialize properties from the configuration\n        if (typeof configuration === \"object\" &&\n            typeof configuration.id === \"string\") {\n            this.id = configuration.id;\n        }\n        else {\n            throw new Error(\"Missing a MongoDB Realm app-id\");\n        }\n        const { transport, storage, baseUrl, fetchLocation = true, } = configuration;\n        // Construct the various transports\n        this.baseTransport = new BaseTransport(transport, baseUrl || App.DEFAULT_BASE_URL, fetchLocation ? this : undefined);\n        this.appTransport = this.baseTransport.prefix(`/app/${this.id}`);\n        const authTransport = new AuthenticatedTransport(this.appTransport, this);\n        // Construct the functions factory\n        this.functions = FunctionsFactory.create(authTransport);\n        // Construct the services factory\n        this.services = create(authTransport);\n        // Construct the auth providers\n        this.emailPasswordAuth = new EmailPasswordAuth(authTransport);\n        // Construct the storage\n        const baseStorage = storage || getEnvironment().defaultStorage;\n        this.storage = new AppStorage(baseStorage, this.id);\n        // Constructing the oauth2 helper, passing in the baseStorage to avoid an app scope.\n        this.oauth2 = new OAuth2Helper(baseStorage, async () => {\n            const baseUrl = await this.baseTransport.determineBaseUrl(false);\n            return `${baseUrl}/app/${this.id}`;\n        });\n        // Hydrate the app state from storage\n        this.hydrate();\n    }\n    /**\n     * Switch user\n     *\n     * @param nextUser The user or id of the user to switch to\n     */\n    switchUser(nextUser) {\n        const index = this.users.findIndex(u => u === nextUser);\n        if (index === -1) {\n            throw new Error(\"The user was never logged into this app\");\n        }\n        // Remove the user from the stack\n        const [user] = this.users.splice(index, 1);\n        // Insert the user in the beginning of the stack\n        this.users.unshift(user);\n    }\n    /**\n     * Log in a user\n     *\n     * @param credentials Credentials to use when logging in\n     * @param fetchProfile Should the users profile be fetched? (default: true)\n     */\n    async logIn(credentials, fetchProfile = true) {\n        const user = await this.performLogIn(credentials);\n        // Let's ensure this will be the current user, in case the user object was reused.\n        this.switchUser(user);\n        // If neeeded, fetch and set the profile on the user\n        if (fetchProfile) {\n            await user.refreshProfile();\n        }\n        // Persist the user id in the storage,\n        // merging to avoid overriding logins from other apps using the same underlying storage\n        this.storage.setUserIds(this.users.map(u => u.id), true);\n        // Return the user\n        return user;\n    }\n    /**\n     * @inheritdoc\n     */\n    async removeUser(user) {\n        // Remove the user from the list of users\n        const index = this.users.findIndex(u => u === user);\n        if (index === -1) {\n            throw new Error(\"The user was never logged into this app\");\n        }\n        this.users.splice(index, 1);\n        // Log out the user - this removes access and refresh tokens from storage\n        await user.logOut();\n        // Remove the users profile from storage\n        this.storage.remove(`user(${user.id}):profile`);\n        // Remove the user from the storage\n        this.storage.removeUserId(user.id);\n    }\n    /**\n     * The currently active user (or null if no active users exists)\n     *\n     * @returns the currently active user or null.\n     */\n    get currentUser() {\n        const activeUsers = this.users.filter(user => user.state === UserState.Active);\n        if (activeUsers.length === 0) {\n            return null;\n        }\n        else {\n            // Current user is the top of the stack\n            return activeUsers[0];\n        }\n    }\n    /**\n     * All active and logged-out users:\n     *  - First in the list are active users (ordered by most recent call to switchUser or login)\n     *  - Followed by logged out users (also ordered by most recent call to switchUser or login).\n     *\n     * @returns An array of users active or loggedout users (current user being the first).\n     */\n    get allUsers() {\n        // We need to peek into refresh tokens to avoid cyclic code\n        const activeUsers = this.users.filter(user => user.refreshToken !== null);\n        const loggedOutUsers = this.users.filter(user => user.refreshToken === null);\n        // Returning a freezed copy of the list of users to prevent outside changes\n        return Object.freeze([...activeUsers, ...loggedOutUsers]);\n    }\n    /**\n     * Get the location metadata of an app.\n     *\n     * @returns A promise of the app's location metadata.\n     */\n    get location() {\n        // Initiate the fetch of the location metadata only once per app instance.\n        if (!this._location) {\n            this._location = this.baseTransport.fetch({\n                method: \"GET\",\n                path: `/app/${this.id}/location`,\n                ignoreLocation: true,\n            });\n        }\n        return this._location;\n    }\n    /**\n     * Perform the actual login, based on the credentials.\n     * Either it decodes the credentials and instantiates a user directly or it calls User.logIn to perform a fetch.\n     *\n     * @param credentials Credentials to use when logging in\n     */\n    async performLogIn(credentials) {\n        if (credentials.providerType.startsWith(\"oauth2\") &&\n            typeof credentials.payload.redirectUrl === \"string\") {\n            // Initiate the OAuth2 and use the next credentials once they're known\n            const result = await this.oauth2.initiate(credentials);\n            const { userId, accessToken, refreshToken, } = OAuth2Helper.decodeAuthInfo(result.userAuth);\n            return this.createOrUpdateUser(userId, accessToken, refreshToken);\n        }\n        else {\n            const { id, accessToken, refreshToken } = await performLogIn(this, credentials);\n            return this.createOrUpdateUser(id, accessToken, refreshToken);\n        }\n    }\n    /**\n     * Create (and store) a new user or update an existing user's access and refresh tokens.\n     * This helps de-duplicating users in the list of users known to the app.\n     *\n     * @param userId The id of the user.\n     * @param accessToken The new access token of the user.\n     * @param refreshToken The new refresh token of the user.\n     * @returns A new or an existing user.\n     */\n    createOrUpdateUser(userId, accessToken, refreshToken) {\n        const existingUser = this.users.find(u => u.id === userId);\n        if (existingUser) {\n            // Update the users access and refresh tokens\n            existingUser.accessToken = accessToken;\n            existingUser.refreshToken = refreshToken;\n            return existingUser;\n        }\n        else {\n            // Create and store a new user\n            const user = new User({\n                app: this,\n                id: userId,\n                accessToken,\n                refreshToken,\n            });\n            this.users.unshift(user);\n            return user;\n        }\n    }\n    /**\n     * Restores the state of the app (active and logged-out users) from the storage\n     */\n    hydrate() {\n        try {\n            const userIds = this.storage.getUserIds();\n            this.users = userIds.map(id => User.hydrate(this, id));\n        }\n        catch (err) {\n            // The storage was corrupted\n            this.storage.clear();\n            throw err;\n        }\n    }\n}\n/**\n * Instances of this class can be passed to the `app.logIn` method to authenticate an end-user.\n */\nApp.Credentials = Credentials;\n/**\n * Default base url to prefix all requests if no baseUrl is specified in the configuration.\n */\nApp.DEFAULT_BASE_URL = \"https://stitch.mongodb.com\";\n\n////////////////////////////////////////////////////////////////////////////\nconst appCache = {};\n/**\n * Get or create a singleton Realm App from an id.\n *\n * @param id The Realm App id visible from the MongoDB Realm UI or a configuration.\n * @returns The Realm App instance. Calling this function multiple times with the same id will return the same instance.\n */\nfunction getApp(id) {\n    if (id in appCache) {\n        return appCache[id];\n    }\n    else {\n        const instance = new App(id);\n        appCache[id] = instance;\n        return instance;\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\n/**\n * In-memory storage that will not be persisted.\n */\nclass LocalStorage {\n    /**\n     * Constructs a LocalStorage using the global window.\n     */\n    constructor() {\n        if (typeof window === \"object\") {\n            this.window = window;\n        }\n        else {\n            throw new Error(\"Cannot use LocalStorage without a global window object\");\n        }\n    }\n    /** @inheritdoc */\n    get(key) {\n        return this.window.localStorage.getItem(key);\n    }\n    /** @inheritdoc */\n    set(key, value) {\n        return this.window.localStorage.setItem(key, value);\n    }\n    /** @inheritdoc */\n    remove(key) {\n        return this.window.localStorage.removeItem(key);\n    }\n    /** @inheritdoc */\n    prefix(keyPart) {\n        return new PrefixedStorage(this, keyPart);\n    }\n    /** @inheritdoc */\n    clear(prefix) {\n        const keys = [];\n        // Iterate all keys to find the once have a matching prefix.\n        for (let i = 0; i < this.window.localStorage.length; i++) {\n            const key = this.window.localStorage.key(i);\n            if (key && (!prefix || key.startsWith(prefix))) {\n                keys.push(key);\n            }\n        }\n        // Remove the items in a seperate loop to avoid updating while iterating.\n        for (const key of keys) {\n            this.window.localStorage.removeItem(key);\n        }\n    }\n    /** @inheritdoc */\n    addListener(listener) {\n        return this.window.addEventListener(\"storage\", listener);\n    }\n    /** @inheritdoc */\n    removeListener(listener) {\n        return this.window.removeEventListener(\"storage\", listener);\n    }\n}\n\n////////////////////////////////////////////////////////////////////////////\nconst environment$1 = {\n    defaultStorage: new LocalStorage().prefix(\"realm-web\"),\n    openWindow: url => window.open(url),\n};\nsetEnvironment(environment$1);\n/**\n * Handle an OAuth 2.0 redirect.\n *\n * @param location An optional location to use (defaults to the windows current location).\n * @param storage Optional storage used to save any results from the location.\n */\nfunction handleAuthRedirect(location = window.location, storage = environment$1.defaultStorage) {\n    try {\n        const queryString = location.hash.substr(1); // Strip the initial # from the hash\n        OAuth2Helper.handleRedirect(queryString, storage);\n    }\n    catch (err) {\n        // Ensure calling this never throws: It should not interrupt a users flow.\n        console.warn(err);\n    }\n}\n\nexport { App, Credentials, LocalStorage, MongoDBRealmError, User, UserState, UserType$1 as UserType, getApp, getEnvironment, handleAuthRedirect, performLogIn, setEnvironment };\n"]},"metadata":{},"sourceType":"module"}