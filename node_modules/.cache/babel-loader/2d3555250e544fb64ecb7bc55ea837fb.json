{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nimport { RedirectUri } from \"assets/constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\nexport async function LoginWithGoogle() {\n  const credentials = Realm.Credentials.google(RedirectUri); // Calling logIn() opens a Google authentication screen in a new window.\n\n  app.logIn(credentials).then(user => {\n    // The logIn() promise will not resolve until you call `handleAuthRedirect()`\n    // from the new window after the user has successfully authenticated.\n    return user.id;\n  });\n}\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","RedirectUri","app","App","id","mongo","services","service","collection","db","database","LoginWithGoogle","credentials","Credentials","google","logIn","then","user","ConfirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","emailPasswordAuth","confirmUser","SendResetPasswordEmail","email","sendResetPasswordEmail","console","log","catch","err"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AACA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIH,KAAK,CAACI,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaN,OAAb,CAAqBA,OAAO,CAACO,OAA7B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,EADuB,CACpBT,OAAO,CAACU,QADY,EAEvBF,UAFuB,CAEZR,OAAO,CAACQ,UAFI,CAAnB;AAIP,OAAO,eAAeG,eAAf,GAAiC;AACtC,QAAMC,WAAW,GAAGb,KAAK,CAACc,WAAN,CAAkBC,MAAlB,CAAyBb,WAAzB,CAApB,CADsC,CAGtC;;AACAC,EAAAA,GAAG,CAACa,KAAJ,CAAUH,WAAV,EAAuBI,IAAvB,CAA6BC,IAAD,IAAU;AACpC;AACA;AACA,WAAOA,IAAI,CAACb,EAAZ;AACD,GAJD;AAKD;AAED,OAAO,eAAec,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAOxB,GAAG,CAAC0B,iBAAJ,CAAsBC,WAAtB,CAAkCJ,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASG,sBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,SAAO7B,GAAG,CAAC0B,iBAAJ,CACJI,sBADI,CACmBD,KADnB,EAEJf,IAFI,CAEC,MAAM;AACViB,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJC,KALI,CAKGC,GAAD,IAAS;AACdH,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDE,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nimport { RedirectUri } from \"assets/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport async function LoginWithGoogle() {\n  const credentials = Realm.Credentials.google(RedirectUri);\n\n  // Calling logIn() opens a Google authentication screen in a new window.\n  app.logIn(credentials).then((user) => {\n    // The logIn() promise will not resolve until you call `handleAuthRedirect()`\n    // from the new window after the user has successfully authenticated.\n    return user.id;\n  });\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}