{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri, client_id } from \"assets/constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\n/*\n * Create form to request access token from Google's OAuth 2.0 server.\n */\n\nexport function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\"; // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n\n  form.setAttribute(\"action\", oauth2Endpoint); // Parameters to pass to OAuth 2.0 endpoint.\n\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n    state: \"pass-through value\"\n  }; // Add form parameters as hidden input values.\n\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  } // Add form to page and submit it to open the OAuth 2.0 endpoint.\n\n\n  document.body.appendChild(form);\n  form.submit();\n} // Get the access token from a client application using the Google SDK\n//const accessToken = getGoogleAccessToken();\n\nconst accessToken = \" getGoogleAccessToken()\"; // Log the user in to your app\n\n/* const credentials = Realm.Credentials.google(accessToken);\napp.logIn(credentials).then((user) => {\n  console.log(`Logged in with id: ${user.id}`);\n}); */\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      success: false,\n      error\n    };\n  }\n}\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","redirect_uri","client_id","app","App","id","mongo","services","service","collection","db","database","getGoogleAccessToken","oauth2Endpoint","form","document","createElement","setAttribute","params","response_type","scope","include_granted_scopes","state","p","input","appendChild","body","submit","accessToken","SignUp","email","password","emailPasswordAuth","registerUser","success","error","undefined","console","log","ConfirmUser","url","window","location","search","URLSearchParams","token","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","then","catch","err"],"mappings":"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","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri, client_id } from \"assets/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\n/*\n * Create form to request access token from Google's OAuth 2.0 server.\n */\nexport function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\n  // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n  form.setAttribute(\"action\", oauth2Endpoint);\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n    state: \"pass-through value\",\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n}\n\n// Get the access token from a client application using the Google SDK\n//const accessToken = getGoogleAccessToken();\nconst accessToken = \" getGoogleAccessToken()\";\n\n// Log the user in to your app\n/* const credentials = Realm.Credentials.google(accessToken);\napp.logIn(credentials).then((user) => {\n  console.log(`Logged in with id: ${user.id}`);\n}); */\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}