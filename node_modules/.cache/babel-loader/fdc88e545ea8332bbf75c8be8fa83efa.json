{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri, client_id, redirect_g } from \"assets/constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\nexport function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\"; // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n\n  form.setAttribute(\"action\", oauth2Endpoint); // Parameters to pass to OAuth 2.0 endpoint.\n\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\"\n  }; // Add form parameters as hidden input values.\n\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  } // Add form to page and submit it to open the OAuth 2.0 endpoint.\n\n\n  document.body.appendChild(form);\n  form.submit();\n}\nexport async function LoginWithGoogle() {\n  let credentials;\n\n  try {\n    credentials = Realm.Credentials.google(redirect_uri);\n  } catch (error) {\n    console.log(error);\n  }\n\n  debugger;\n  return await app.logIn(credentials).then(user => {\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      success: false,\n      error\n    };\n  }\n}\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","redirect_uri","client_id","redirect_g","app","App","id","mongo","services","service","collection","db","database","getGoogleAccessToken","oauth2Endpoint","form","document","createElement","setAttribute","params","response_type","scope","include_granted_scopes","p","input","appendChild","body","submit","LoginWithGoogle","credentials","Credentials","google","error","console","log","logIn","then","user","SignUp","email","password","emailPasswordAuth","registerUser","success","undefined","ConfirmUser","url","window","location","search","URLSearchParams","token","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","catch","err"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,UAAlC,QAAoD,kBAApD;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIL,KAAK,CAACM,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaR,OAAb,CAAqBA,OAAO,CAACS,OAA7B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,EADuB,CACpBX,OAAO,CAACY,QADY,EAEvBF,UAFuB,CAEZV,OAAO,CAACU,UAFI,CAAnB;AAIP,OAAO,SAASG,oBAAT,GAAgC;AACrC;AACA,MAAIC,cAAc,GAAG,8CAArB,CAFqC,CAIrC;;AACA,MAAIC,IAAI,GAAGC,QAAQ,CAACC,aAAT,CAAuB,MAAvB,CAAX;AACAF,EAAAA,IAAI,CAACG,YAAL,CAAkB,QAAlB,EAA4B,KAA5B,EANqC,CAMD;;AACpCH,EAAAA,IAAI,CAACG,YAAL,CAAkB,QAAlB,EAA4BJ,cAA5B,EAPqC,CASrC;;AACA,MAAIK,MAAM,GAAG;AACXjB,IAAAA,SAAS,EAAEA,SADA;AAEXD,IAAAA,YAAY,EAAEA,YAFH;AAGXmB,IAAAA,aAAa,EAAE,OAHJ;AAIXC,IAAAA,KAAK,EAAE,yDAJI;AAKXC,IAAAA,sBAAsB,EAAE;AALb,GAAb,CAVqC,CAkBrC;;AACA,OAAK,IAAIC,CAAT,IAAcJ,MAAd,EAAsB;AACpB,QAAIK,KAAK,GAAGR,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAZ;AACAO,IAAAA,KAAK,CAACN,YAAN,CAAmB,MAAnB,EAA2B,QAA3B;AACAM,IAAAA,KAAK,CAACN,YAAN,CAAmB,MAAnB,EAA2BK,CAA3B;AACAC,IAAAA,KAAK,CAACN,YAAN,CAAmB,OAAnB,EAA4BC,MAAM,CAACI,CAAD,CAAlC;AACAR,IAAAA,IAAI,CAACU,WAAL,CAAiBD,KAAjB;AACD,GAzBoC,CA2BrC;;;AACAR,EAAAA,QAAQ,CAACU,IAAT,CAAcD,WAAd,CAA0BV,IAA1B;AACAA,EAAAA,IAAI,CAACY,MAAL;AACD;AAED,OAAO,eAAeC,eAAf,GAAiC;AACtC,MAAIC,WAAJ;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAG9B,KAAK,CAAC+B,WAAN,CAAkBC,MAAlB,CAAyB9B,YAAzB,CAAd;AACD,GAFD,CAEE,OAAO+B,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;;AACD;AACA,SAAO,MAAM5B,GAAG,CAAC+B,KAAJ,CAAUN,WAAV,EAAuBO,IAAvB,CAA6BC,IAAD,IAAU;AACjDJ,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBG,IAAI,CAAC/B,EAAG,EAA1C;AACD,GAFY,CAAb;AAGD;AAED,OAAO,eAAegC,MAAf,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAI;AACF,UAAMpC,GAAG,CAACqC,iBAAJ,CAAsBC,YAAtB,CAAmCH,KAAnC,EAA0CC,QAA1C,CAAN;AACA,WAAO;AAAEG,MAAAA,OAAO,EAAE,IAAX;AAAiBX,MAAAA,KAAK,EAAEY;AAAxB,KAAP;AACD,GAHD,CAGE,OAAOZ,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,WAAO;AAAEW,MAAAA,OAAO,EAAE,KAAX;AAAkBX,MAAAA;AAAlB,KAAP;AACD;AACF;AAED,OAAO,eAAea,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAM9B,MAAM,GAAG,IAAI+B,eAAJ,CAAoBJ,GAApB,CAAf;AACA,QAAMK,KAAK,GAAGhC,MAAM,CAACiC,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGlC,MAAM,CAACiC,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAOhD,GAAG,CAACqC,iBAAJ,CAAsBa,WAAtB,CAAkCH,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CAAgChB,KAAhC,EAAuC;AAC5C,SAAOnC,GAAG,CAACqC,iBAAJ,CACJe,sBADI,CACmBjB,KADnB,EAEJH,IAFI,CAEC,MAAM;AACVH,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJuB,KALI,CAKGC,GAAD,IAAS;AACdzB,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDwB,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./db/constants\";\nimport { redirect_uri, client_id, redirect_g } from \"assets/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport function getGoogleAccessToken() {\n  // Google's OAuth 2.0 endpoint for requesting an access token\n  var oauth2Endpoint = \"https://accounts.google.com/o/oauth2/v2/auth\";\n\n  // Create <form> element to submit parameters to OAuth 2.0 endpoint.\n  var form = document.createElement(\"form\");\n  form.setAttribute(\"method\", \"GET\"); // Send as a GET request.\n  form.setAttribute(\"action\", oauth2Endpoint);\n\n  // Parameters to pass to OAuth 2.0 endpoint.\n  var params = {\n    client_id: client_id,\n    redirect_uri: redirect_uri,\n    response_type: \"token\",\n    scope: \"https://www.googleapis.com/auth/drive.metadata.readonly\",\n    include_granted_scopes: \"true\",\n  };\n\n  // Add form parameters as hidden input values.\n  for (var p in params) {\n    var input = document.createElement(\"input\");\n    input.setAttribute(\"type\", \"hidden\");\n    input.setAttribute(\"name\", p);\n    input.setAttribute(\"value\", params[p]);\n    form.appendChild(input);\n  }\n\n  // Add form to page and submit it to open the OAuth 2.0 endpoint.\n  document.body.appendChild(form);\n  form.submit();\n}\n\nexport async function LoginWithGoogle() {\n  let credentials;\n  try {\n    credentials = Realm.Credentials.google(redirect_uri);\n  } catch (error) {\n    console.log(error);\n  }\n  debugger;\n  return await app.logIn(credentials).then((user) => {\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}