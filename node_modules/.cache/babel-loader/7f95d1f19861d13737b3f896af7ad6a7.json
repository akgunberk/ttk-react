{"ast":null,"code":"import * as Realm from \"realm-web\";\nimport { mongodb } from \"./db/constants\";\nexport const app = new Realm.App({\n  id: \"ttk-ui-cvkwt\"\n});\nexport const mongo = app.services.mongodb(mongodb.service);\nexport const collection = mongo.db(mongodb.database).collection(mongodb.collection);\nexport async function LoginWithGoogle() {\n  let redirectTo = \"https://ttk-ui-cvkwt.mongodbstitch.com\";\n  const credentials = Realm.Credentials.google(redirectTo); // Calling logIn() opens a Google authentication screen in a new window.\n\n  app.logIn(credentials).then(user => {\n    // The logIn() promise will not resolve until you call `handleAuthRedirect()`\n    // from the new window after the user has successfully authenticated.\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return {\n      success: true,\n      error: undefined\n    };\n  } catch (error) {\n    console.log(error);\n    return {\n      success: false,\n      error\n    };\n  }\n}\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth.sendResetPasswordEmail(email).then(() => {\n    console.log(\"Successfully sent password reset email!\");\n  }).catch(err => {\n    console.log(\"Error sending password reset email:\", err);\n  });\n}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/core/initApp.js"],"names":["Realm","mongodb","app","App","id","mongo","services","service","collection","db","database","LoginWithGoogle","redirectTo","credentials","Credentials","google","logIn","then","user","console","log","SignUp","email","password","emailPasswordAuth","registerUser","success","error","undefined","ConfirmUser","url","window","location","search","params","URLSearchParams","token","get","tokenId","confirmUser","SendResetPasswordEmail","sendResetPasswordEmail","catch","err"],"mappings":"AAAA,OAAO,KAAKA,KAAZ,MAAuB,WAAvB;AAEA,SAASC,OAAT,QAAwB,gBAAxB;AAEA,OAAO,MAAMC,GAAG,GAAG,IAAIF,KAAK,CAACG,GAAV,CAAc;AAAEC,EAAAA,EAAE,EAAE;AAAN,CAAd,CAAZ;AAEP,OAAO,MAAMC,KAAK,GAAGH,GAAG,CAACI,QAAJ,CAAaL,OAAb,CAAqBA,OAAO,CAACM,OAA7B,CAAd;AAEP,OAAO,MAAMC,UAAU,GAAGH,KAAK,CAC5BI,EADuB,CACpBR,OAAO,CAACS,QADY,EAEvBF,UAFuB,CAEZP,OAAO,CAACO,UAFI,CAAnB;AAIP,OAAO,eAAeG,eAAf,GAAiC;AACtC,MAAIC,UAAU,GAAG,wCAAjB;AACA,QAAMC,WAAW,GAAGb,KAAK,CAACc,WAAN,CAAkBC,MAAlB,CAAyBH,UAAzB,CAApB,CAFsC,CAItC;;AACAV,EAAAA,GAAG,CAACc,KAAJ,CAAUH,WAAV,EAAuBI,IAAvB,CAA6BC,IAAD,IAAU;AACpC;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAqBF,IAAI,CAACd,EAAG,EAA1C;AACD,GAJD;AAKD;AAED,OAAO,eAAeiB,MAAf,CAAsBC,KAAtB,EAA6BC,QAA7B,EAAuC;AAC5C,MAAI;AACF,UAAMrB,GAAG,CAACsB,iBAAJ,CAAsBC,YAAtB,CAAmCH,KAAnC,EAA0CC,QAA1C,CAAN;AACA,WAAO;AAAEG,MAAAA,OAAO,EAAE,IAAX;AAAiBC,MAAAA,KAAK,EAAEC;AAAxB,KAAP;AACD,GAHD,CAGE,OAAOD,KAAP,EAAc;AACdR,IAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACA,WAAO;AAAED,MAAAA,OAAO,EAAE,KAAX;AAAkBC,MAAAA;AAAlB,KAAP;AACD;AACF;AAED,OAAO,eAAeE,WAAf,GAA6B;AAClC,QAAMC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,MAA5B;AACA,QAAMC,MAAM,GAAG,IAAIC,eAAJ,CAAoBL,GAApB,CAAf;AACA,QAAMM,KAAK,GAAGF,MAAM,CAACG,GAAP,CAAW,OAAX,CAAd;AACA,QAAMC,OAAO,GAAGJ,MAAM,CAACG,GAAP,CAAW,SAAX,CAAhB;AAEA,SAAOnC,GAAG,CAACsB,iBAAJ,CAAsBe,WAAtB,CAAkCH,KAAlC,EAAyCE,OAAzC,CAAP;AACD;AAED,OAAO,SAASE,sBAAT,CAAgClB,KAAhC,EAAuC;AAC5C,SAAOpB,GAAG,CAACsB,iBAAJ,CACJiB,sBADI,CACmBnB,KADnB,EAEJL,IAFI,CAEC,MAAM;AACVE,IAAAA,OAAO,CAACC,GAAR,CAAY,yCAAZ;AACD,GAJI,EAKJsB,KALI,CAKGC,GAAD,IAAS;AACdxB,IAAAA,OAAO,CAACC,GAAR,CAAY,qCAAZ,EAAmDuB,GAAnD;AACD,GAPI,CAAP;AAQD","sourcesContent":["import * as Realm from \"realm-web\";\n\nimport { mongodb } from \"./db/constants\";\n\nexport const app = new Realm.App({ id: \"ttk-ui-cvkwt\" });\n\nexport const mongo = app.services.mongodb(mongodb.service);\n\nexport const collection = mongo\n  .db(mongodb.database)\n  .collection(mongodb.collection);\n\nexport async function LoginWithGoogle() {\n  let redirectTo = \"https://ttk-ui-cvkwt.mongodbstitch.com\";\n  const credentials = Realm.Credentials.google(redirectTo);\n\n  // Calling logIn() opens a Google authentication screen in a new window.\n  app.logIn(credentials).then((user) => {\n    // The logIn() promise will not resolve until you call `handleAuthRedirect()`\n    // from the new window after the user has successfully authenticated.\n    console.log(`Logged in with id: ${user.id}`);\n  });\n}\n\nexport async function SignUp(email, password) {\n  try {\n    await app.emailPasswordAuth.registerUser(email, password);\n    return { success: true, error: undefined };\n  } catch (error) {\n    console.log(error);\n    return { success: false, error };\n  }\n}\n\nexport async function ConfirmUser() {\n  const url = window.location.search;\n  const params = new URLSearchParams(url);\n  const token = params.get(\"token\");\n  const tokenId = params.get(\"tokenId\");\n\n  return app.emailPasswordAuth.confirmUser(token, tokenId);\n}\n\nexport function SendResetPasswordEmail(email) {\n  return app.emailPasswordAuth\n    .sendResetPasswordEmail(email)\n    .then(() => {\n      console.log(\"Successfully sent password reset email!\");\n    })\n    .catch((err) => {\n      console.log(\"Error sending password reset email:\", err);\n    });\n}\n"]},"metadata":{},"sourceType":"module"}