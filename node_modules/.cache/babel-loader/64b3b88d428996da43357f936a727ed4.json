{"ast":null,"code":"import _objectSpread from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/berkakgun/Desktop/ttk/ttkui/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";import store from\"core/store/index\";import{dispatchDefaultUser}from\"core/store/actions\";import{collection,Application}from\"core/initApp\";import{useSelector}from\"react-redux\";import{getUserElements}from\"core/store/selectors\";import{DefaultPayload}from\"./shared\";import{With,Create}from\"./models\";export function CreateCustomUser(environment){var payload=JSON.parse(JSON.stringify(DefaultPayload));process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"]=\"0\";// to prevent SSL\nvar url=\"https://ttk.armut.\".concat(environment,\"/operate\");var user=useSelector(getUserElements);var _useState=useState(false),_useState2=_slicedToArray(_useState,2),isLoading=_useState2[0],setLoading=_useState2[1];var loadCustomUser=function loadCustomUser(){/*  if (user.country) {\n      payload.commands?.push(With.COUNTRY);\n      payload.commandContext = {\n        ...payload.commandContext,\n        countryId: user.country,\n      };\n    } */if(user.job){var _payload$commands;(_payload$commands=payload.commands)===null||_payload$commands===void 0?void 0:_payload$commands.push(With.JOB);payload.jobTestContext={operation:Create.JOB,commands:[With.SERVICEID],commandContext:{serviceId:parseInt(user.service)}};if(user.date){var _payload$jobTestConte;(_payload$jobTestConte=payload.jobTestContext.commands)===null||_payload$jobTestConte===void 0?void 0:_payload$jobTestConte.push(With.JOBDATE);payload.jobTestContext.commandContext=_objectSpread(_objectSpread({},payload.jobTestContext.commandContext),{},{jobDate:user.date});}if(user.deal){var _payload$jobTestConte2;(_payload$jobTestConte2=payload.jobTestContext.commands)===null||_payload$jobTestConte2===void 0?void 0:_payload$jobTestConte2.push(With.DEAL);payload.jobTestContext.commandContext=_objectSpread(_objectSpread({},payload.jobTestContext.commandContext),{},{jobDate:user.date});payload.jobTestContext.proTestContext={operation:Create.PRO,commands:[With.CREDITCARD,With.BALANCE],commandContext:{proBalance:10000}};}else if(!user.deal){var _payload$jobTestConte3;(_payload$jobTestConte3=payload.jobTestContext.commands)===null||_payload$jobTestConte3===void 0?void 0:_payload$jobTestConte3.push(With.QUOTES);}}console.log(payload);setLoading(true);fetch(url,{method:\"POST\",body:JSON.stringify(payload)}).then(function(res){return res.json();}).then(function(user){var responseContext=user.responseContext,error=user.error;var _responseContext$=responseContext[0],accessToken=_responseContext$.accessToken,password=_responseContext$.password,model=_responseContext$.model;var user_id=model.user_id,email=model.email,first_name=model.first_name;if(!error){var _Application$currentU;var imageId=Math.floor(Math.random()*Math.floor(151));store.dispatch(dispatchDefaultUser({user_id:user_id,email:email,password:password,accessToken:accessToken,name:first_name,imageId:imageId}));collection.insertOne({user_id:(_Application$currentU=Application.currentUser)===null||_Application$currentU===void 0?void 0:_Application$currentU.id,id:user_id,email:email,password:password,accessToken:accessToken,first_name:first_name,imageId:imageId}).then(function(result){return console.log(\"Successfully inserted item with _id: \".concat(result.insertedId));}).catch(function(err){return console.error(\"Failed to insert item: \".concat(err));});}}).finally(function(){setLoading(false);});};return[isLoading,loadCustomUser];}","map":{"version":3,"sources":["/Users/berkakgun/Desktop/ttk/ttkui/src/services/createCustomUser.tsx"],"names":["useState","store","dispatchDefaultUser","collection","Application","useSelector","getUserElements","DefaultPayload","With","Create","CreateCustomUser","environment","payload","JSON","parse","stringify","process","env","url","user","isLoading","setLoading","loadCustomUser","job","commands","push","JOB","jobTestContext","operation","SERVICEID","commandContext","serviceId","parseInt","service","date","JOBDATE","jobDate","deal","DEAL","proTestContext","PRO","CREDITCARD","BALANCE","proBalance","QUOTES","console","log","fetch","method","body","then","res","json","responseContext","error","accessToken","password","model","user_id","email","first_name","imageId","Math","floor","random","dispatch","name","insertOne","currentUser","id","result","insertedId","catch","err","finally"],"mappings":"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","sourcesContent":["import { useState } from \"react\";\nimport store from \"core/store/index\";\nimport { dispatchDefaultUser } from \"core/store/actions\";\nimport { collection, Application } from \"core/initApp\";\nimport { useSelector } from \"react-redux\";\nimport { getUserElements } from \"core/store/selectors\";\nimport { DefaultPayload } from \"./shared\";\nimport { Payload, With, Create } from \"./models\";\n\nexport function CreateCustomUser(environment: string) {\n  const payload: Payload = JSON.parse(JSON.stringify(DefaultPayload));\n\n  process.env[\"NODE_TLS_REJECT_UNAUTHORIZED\"] = \"0\"; // to prevent SSL\n  const url = `https://ttk.armut.${environment}/operate`;\n\n  const user = useSelector(getUserElements);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadCustomUser = () => {\n    /*  if (user.country) {\n      payload.commands?.push(With.COUNTRY);\n      payload.commandContext = {\n        ...payload.commandContext,\n        countryId: user.country,\n      };\n    } */\n    if (user.job) {\n      payload.commands?.push(With.JOB);\n      payload.jobTestContext = {\n        operation: Create.JOB,\n        commands: [With.SERVICEID],\n        commandContext: {\n          serviceId: parseInt(user.service),\n        },\n      };\n      if (user.date) {\n        payload.jobTestContext.commands?.push(With.JOBDATE);\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n      }\n      if (user.deal) {\n        payload.jobTestContext.commands?.push(With.DEAL);\n        payload.jobTestContext.commandContext = {\n          ...payload.jobTestContext.commandContext,\n          jobDate: user.date,\n        };\n        payload.jobTestContext.proTestContext = {\n          operation: Create.PRO,\n          commands: [With.CREDITCARD, With.BALANCE],\n          commandContext: { proBalance: 10000 },\n        };\n      } else if (!user.deal) {\n        payload.jobTestContext.commands?.push(With.QUOTES);\n      }\n    }\n    console.log(payload);\n\n    setLoading(true);\n    fetch(url, {\n      method: \"POST\",\n      body: JSON.stringify(payload),\n    })\n      .then((res) => res.json())\n      .then((user) => {\n        const { responseContext, error } = user;\n        const { accessToken, password, model } = responseContext[0];\n        const { user_id, email, first_name } = model;\n        if (!error) {\n          let imageId = Math.floor(Math.random() * Math.floor(151));\n          store.dispatch(\n            dispatchDefaultUser({\n              user_id,\n              email,\n              password,\n              accessToken,\n              name: first_name,\n              imageId,\n            })\n          );\n          collection\n            .insertOne({\n              user_id: Application.currentUser?.id,\n              id: user_id,\n              email,\n              password,\n              accessToken,\n              first_name,\n              imageId,\n            })\n            .then((result) =>\n              console.log(\n                `Successfully inserted item with _id: ${result.insertedId}`\n              )\n            )\n            .catch((err) => console.error(`Failed to insert item: ${err}`));\n        }\n      })\n      .finally(() => {\n        setLoading(false);\n      });\n  };\n  return [isLoading, loadCustomUser] as const;\n}\n"]},"metadata":{},"sourceType":"module"}