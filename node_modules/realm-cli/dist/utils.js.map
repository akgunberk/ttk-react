{"version":3,"sources":["utils.ts"],"names":[],"mappings":"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","file":"utils.js","sourcesContent":["\nimport * as request from 'request'\nimport * as fs from 'fs'\nimport tar = require('tar')\nimport * as ProgressBar from 'progress'\nimport * as glob from 'glob'\n\n/**\n * @param downloadUrl the URL of the file that you are trying to download\n * @param destinationFile the path of the file you want to save it as\n */\nexport function downloadFile(downloadUrl: string, destinationFile: string): Promise<string> {\n    return new Promise<string>((resolve, reject) => {\n        let received_bytes = 0;\n        let total_bytes = 0;\n\n        const outStream = fs.createWriteStream(destinationFile);\n        let bar: ProgressBar = null\n        request\n            .get(downloadUrl)\n            .on('error', function (err) {\n                reject(err)\n            })\n            .on('response', function (data) {\n                if (data.headers['content-length']) {\n                    let len = parseInt(data.headers['content-length'], 10)\n                    bar = new ProgressBar('  downloading [:bar] :rate/bps :percent :etas', {\n                        complete: '=',\n                        incomplete: ' ',\n                        width: 20,\n                        total: len\n                    });\n                }\n            })\n            .on('data', function (chunk) {\n                if (bar) {\n                    bar.tick(chunk.length)\n                }\n            })\n            .on('end', function () {\n                resolve(destinationFile)\n            })\n            .pipe(outStream);\n\n    })\n}\n\nexport function untarFile(cwd: string, filePath: string): Promise<any> {\n    return tar.x({\n        cwd: cwd,\n        file: filePath\n    })\n}\n\nexport function rename(src: string, dest: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        fs.rename(src, dest, function(err){\n            if (err) { reject(err) }\n            else {\n                resolve(dest)\n            }\n        })\n    })\n}\n\n/**\n * Delete, Remove, or Unlink a path\n * @param path the path you'd like to remove\n */\nexport function remove(path: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        fs.unlink(path, (err) => {\n            if (err) { reject(err) }\n            else {\n                resolve(path)\n            }\n        })\n    })\n}\n\nexport function globFind(pattern): Promise<string[]> {\n    return new Promise((resolve, reject) => {\n        glob(pattern, (err, matches) => {\n            if (err) { reject(err) }\n            else {\n                resolve(matches)\n            }\n        })\n    })\n}"],"sourceRoot":"/Users/maximilianalexander/realm-cli/src"}