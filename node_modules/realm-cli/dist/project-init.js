"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const colors = require("colors");
const utils = require("./utils");
function initProject(projectName, rosVersion, isBackend = true, isIOS = true, isAndroid = true) {
    return __awaiter(this, void 0, void 0, function* () {
        let directory = process.cwd();
        if (projectName) {
            directory = path.join(process.cwd(), projectName);
        }
        if (!(yield fs.pathExists(directory))) {
            try {
                console.log(colors.magenta(`Creating your new Realm Project called ${projectName}!`));
                yield fs.mkdirp(directory);
            }
            catch (err) {
                console.error(colors.red(`Oh no we ran into an issue creating your project name: ${projectName}`));
                process.exit(1);
            }
        }
        else {
            console.log(colors.red(`Uh oh... ${projectName} is already taken at this location. Maybe choose a different name?`));
            process.exit(0);
        }
        const serverDir = path.join(directory, 'server');
        const iosDir = path.join(directory, 'ios');
        const androidDir = path.join(directory, 'android');
        if (isBackend) {
            try {
                console.log(colors.magenta('Creating your backend!'));
                yield fs.mkdirp(serverDir);
                const downloadBase = 'https://static.realm.io/downloads/object-server';
                const realmObjectServerVersion = rosVersion;
                const objectServerBundle = `realm-object-server-bundled_node_darwin-developer-${realmObjectServerVersion}.tar.gz`;
                const downloadUrl = `${downloadBase}/${objectServerBundle}`;
                const bundlePath = path.join(serverDir, objectServerBundle);
                console.log(colors.magenta(`Grabbing Realm-Object-Server ${rosVersion}`));
                yield utils.downloadFile(downloadUrl, bundlePath);
                console.log(colors.magenta('Unpacking your backend. This could take a few seconds (^_^)'));
                yield utils.untarFile(serverDir, bundlePath);
                console.log(colors.magenta('Done with your backend. Thanks for waiting'));
            }
            catch (err) {
                console.error(colors.red(`pooooo we ran into an issue with your backend ${err}`));
                process.exit();
            }
        }
        if (isIOS) {
            try {
                console.log(colors.cyan('Creating your iOS app!'));
                const iosDownloadUrl = `https://github.com/mbalex99/ios-template/archive/master.tar.gz`;
                const iosUnzippedDirName = 'ios-template-master';
                const iosBundlePath = path.join(directory, `${iosUnzippedDirName}.tar.gz`);
                yield utils.downloadFile(iosDownloadUrl, iosBundlePath);
                console.log(colors.cyan('Unpacking your iOS App'));
                yield utils.untarFile(directory, iosBundlePath);
                yield utils.rename(path.join(directory, iosUnzippedDirName), path.join(directory, 'ios'));
                yield utils.remove(iosBundlePath);
                console.log(colors.cyan('Done your iOS app!'));
            }
            catch (err) {
                console.log(colors.red(`Uh oh we ran into an issue making your iOS app! ${err.toString()}`));
                process.exit();
            }
        }
        if (isAndroid) {
            try {
                console.log(colors.green('Creating your Android app!'));
                yield fs.mkdirp(androidDir);
                console.log(colors.green('Done your Android app!'));
            }
            catch (err) {
                console.error(err);
                process.exit();
            }
        }
        console.log(colors.bold(`Congrats! Now run "realm start ${projectName}"`));
    });
}
exports.initProject = initProject;

//# sourceMappingURL=project-init.js.map
