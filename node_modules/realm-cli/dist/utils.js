"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const request = require("request");
const fs = require("fs");
const tar = require("tar");
const ProgressBar = require("progress");
const glob = require("glob");
function downloadFile(downloadUrl, destinationFile) {
    return new Promise((resolve, reject) => {
        let received_bytes = 0;
        let total_bytes = 0;
        const outStream = fs.createWriteStream(destinationFile);
        let bar = null;
        request
            .get(downloadUrl)
            .on('error', function (err) {
            reject(err);
        })
            .on('response', function (data) {
            if (data.headers['content-length']) {
                let len = parseInt(data.headers['content-length'], 10);
                bar = new ProgressBar('  downloading [:bar] :rate/bps :percent :etas', {
                    complete: '=',
                    incomplete: ' ',
                    width: 20,
                    total: len
                });
            }
        })
            .on('data', function (chunk) {
            if (bar) {
                bar.tick(chunk.length);
            }
        })
            .on('end', function () {
            resolve(destinationFile);
        })
            .pipe(outStream);
    });
}
exports.downloadFile = downloadFile;
function untarFile(cwd, filePath) {
    return tar.x({
        cwd: cwd,
        file: filePath
    });
}
exports.untarFile = untarFile;
function rename(src, dest) {
    return new Promise((resolve, reject) => {
        fs.rename(src, dest, function (err) {
            if (err) {
                reject(err);
            }
            else {
                resolve(dest);
            }
        });
    });
}
exports.rename = rename;
function remove(path) {
    return new Promise((resolve, reject) => {
        fs.unlink(path, (err) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(path);
            }
        });
    });
}
exports.remove = remove;
function globFind(pattern) {
    return new Promise((resolve, reject) => {
        glob(pattern, (err, matches) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(matches);
            }
        });
    });
}
exports.globFind = globFind;

//# sourceMappingURL=utils.js.map
